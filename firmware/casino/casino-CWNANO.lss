
casino-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800328c  0800328c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800328c  0800328c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800328c  0800328c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000078  0800330c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000021c  0800330c  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025d41  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e73  00000000  00000000  00045e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00006f1d  00000000  00000000  0004ccfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e8  00000000  00000000  00053c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000718  00000000  00000000  00054400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008ab7  00000000  00000000  00054b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003bc7  00000000  00000000  0005d5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000109c  00000000  00000000  00061198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000204  00000000  00000000  00062234  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001e4  00000000  00000000  00062438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	b510      	push	{r4, lr}
 800018e:	4283      	cmp	r3, r0
 8000190:	d003      	beq.n	800019a <deregister_tm_clones+0x12>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d000      	beq.n	800019a <deregister_tm_clones+0x12>
 8000198:	4798      	blx	r3
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000078 	.word	0x20000078
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001aa:	4907      	ldr	r1, [pc, #28]	; (80001c8 <register_tm_clones+0x20>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	108b      	asrs	r3, r1, #2
 80001b0:	0fc9      	lsrs	r1, r1, #31
 80001b2:	18c9      	adds	r1, r1, r3
 80001b4:	b510      	push	{r4, lr}
 80001b6:	1049      	asrs	r1, r1, #1
 80001b8:	d003      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <register_tm_clones+0x24>)
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d000      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001c0:	4798      	blx	r3
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c07      	ldr	r4, [pc, #28]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d109      	bne.n	80001ee <__do_global_dtors_aux+0x1e>
 80001da:	f7ff ffd5 	bl	8000188 <deregister_tm_clones>
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x28>)
 80001e6:	e000      	b.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e8:	bf00      	nop
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003134 	.word	0x08003134

080001fc <frame_dummy>:
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <frame_dummy+0x18>)
 80001fe:	b510      	push	{r4, lr}
 8000200:	2b00      	cmp	r3, #0
 8000202:	d003      	beq.n	800020c <frame_dummy+0x10>
 8000204:	4904      	ldr	r1, [pc, #16]	; (8000218 <frame_dummy+0x1c>)
 8000206:	4805      	ldr	r0, [pc, #20]	; (800021c <frame_dummy+0x20>)
 8000208:	e000      	b.n	800020c <frame_dummy+0x10>
 800020a:	bf00      	nop
 800020c:	f7ff ffcc 	bl	80001a8 <register_tm_clones>
 8000210:	bd10      	pop	{r4, pc}
 8000212:	46c0      	nop			; (mov r8, r8)
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08003134 	.word	0x08003134

08000220 <__gnu_thumb1_case_uqi>:
 8000220:	b402      	push	{r1}
 8000222:	4671      	mov	r1, lr
 8000224:	0849      	lsrs	r1, r1, #1
 8000226:	0049      	lsls	r1, r1, #1
 8000228:	5c09      	ldrb	r1, [r1, r0]
 800022a:	0049      	lsls	r1, r1, #1
 800022c:	448e      	add	lr, r1
 800022e:	bc02      	pop	{r1}
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__udivsi3>:
 8000234:	2200      	movs	r2, #0
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d374      	bcc.n	8000326 <__udivsi3+0xf2>
 800023c:	0903      	lsrs	r3, r0, #4
 800023e:	428b      	cmp	r3, r1
 8000240:	d35f      	bcc.n	8000302 <__udivsi3+0xce>
 8000242:	0a03      	lsrs	r3, r0, #8
 8000244:	428b      	cmp	r3, r1
 8000246:	d344      	bcc.n	80002d2 <__udivsi3+0x9e>
 8000248:	0b03      	lsrs	r3, r0, #12
 800024a:	428b      	cmp	r3, r1
 800024c:	d328      	bcc.n	80002a0 <__udivsi3+0x6c>
 800024e:	0c03      	lsrs	r3, r0, #16
 8000250:	428b      	cmp	r3, r1
 8000252:	d30d      	bcc.n	8000270 <__udivsi3+0x3c>
 8000254:	22ff      	movs	r2, #255	; 0xff
 8000256:	0209      	lsls	r1, r1, #8
 8000258:	ba12      	rev	r2, r2
 800025a:	0c03      	lsrs	r3, r0, #16
 800025c:	428b      	cmp	r3, r1
 800025e:	d302      	bcc.n	8000266 <__udivsi3+0x32>
 8000260:	1212      	asrs	r2, r2, #8
 8000262:	0209      	lsls	r1, r1, #8
 8000264:	d065      	beq.n	8000332 <__udivsi3+0xfe>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d319      	bcc.n	80002a0 <__udivsi3+0x6c>
 800026c:	e000      	b.n	8000270 <__udivsi3+0x3c>
 800026e:	0a09      	lsrs	r1, r1, #8
 8000270:	0bc3      	lsrs	r3, r0, #15
 8000272:	428b      	cmp	r3, r1
 8000274:	d301      	bcc.n	800027a <__udivsi3+0x46>
 8000276:	03cb      	lsls	r3, r1, #15
 8000278:	1ac0      	subs	r0, r0, r3
 800027a:	4152      	adcs	r2, r2
 800027c:	0b83      	lsrs	r3, r0, #14
 800027e:	428b      	cmp	r3, r1
 8000280:	d301      	bcc.n	8000286 <__udivsi3+0x52>
 8000282:	038b      	lsls	r3, r1, #14
 8000284:	1ac0      	subs	r0, r0, r3
 8000286:	4152      	adcs	r2, r2
 8000288:	0b43      	lsrs	r3, r0, #13
 800028a:	428b      	cmp	r3, r1
 800028c:	d301      	bcc.n	8000292 <__udivsi3+0x5e>
 800028e:	034b      	lsls	r3, r1, #13
 8000290:	1ac0      	subs	r0, r0, r3
 8000292:	4152      	adcs	r2, r2
 8000294:	0b03      	lsrs	r3, r0, #12
 8000296:	428b      	cmp	r3, r1
 8000298:	d301      	bcc.n	800029e <__udivsi3+0x6a>
 800029a:	030b      	lsls	r3, r1, #12
 800029c:	1ac0      	subs	r0, r0, r3
 800029e:	4152      	adcs	r2, r2
 80002a0:	0ac3      	lsrs	r3, r0, #11
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d301      	bcc.n	80002aa <__udivsi3+0x76>
 80002a6:	02cb      	lsls	r3, r1, #11
 80002a8:	1ac0      	subs	r0, r0, r3
 80002aa:	4152      	adcs	r2, r2
 80002ac:	0a83      	lsrs	r3, r0, #10
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d301      	bcc.n	80002b6 <__udivsi3+0x82>
 80002b2:	028b      	lsls	r3, r1, #10
 80002b4:	1ac0      	subs	r0, r0, r3
 80002b6:	4152      	adcs	r2, r2
 80002b8:	0a43      	lsrs	r3, r0, #9
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__udivsi3+0x8e>
 80002be:	024b      	lsls	r3, r1, #9
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0a03      	lsrs	r3, r0, #8
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__udivsi3+0x9a>
 80002ca:	020b      	lsls	r3, r1, #8
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	d2cd      	bcs.n	800026e <__udivsi3+0x3a>
 80002d2:	09c3      	lsrs	r3, r0, #7
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__udivsi3+0xa8>
 80002d8:	01cb      	lsls	r3, r1, #7
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0983      	lsrs	r3, r0, #6
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__udivsi3+0xb4>
 80002e4:	018b      	lsls	r3, r1, #6
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0943      	lsrs	r3, r0, #5
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__udivsi3+0xc0>
 80002f0:	014b      	lsls	r3, r1, #5
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0903      	lsrs	r3, r0, #4
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__udivsi3+0xcc>
 80002fc:	010b      	lsls	r3, r1, #4
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	08c3      	lsrs	r3, r0, #3
 8000304:	428b      	cmp	r3, r1
 8000306:	d301      	bcc.n	800030c <__udivsi3+0xd8>
 8000308:	00cb      	lsls	r3, r1, #3
 800030a:	1ac0      	subs	r0, r0, r3
 800030c:	4152      	adcs	r2, r2
 800030e:	0883      	lsrs	r3, r0, #2
 8000310:	428b      	cmp	r3, r1
 8000312:	d301      	bcc.n	8000318 <__udivsi3+0xe4>
 8000314:	008b      	lsls	r3, r1, #2
 8000316:	1ac0      	subs	r0, r0, r3
 8000318:	4152      	adcs	r2, r2
 800031a:	0843      	lsrs	r3, r0, #1
 800031c:	428b      	cmp	r3, r1
 800031e:	d301      	bcc.n	8000324 <__udivsi3+0xf0>
 8000320:	004b      	lsls	r3, r1, #1
 8000322:	1ac0      	subs	r0, r0, r3
 8000324:	4152      	adcs	r2, r2
 8000326:	1a41      	subs	r1, r0, r1
 8000328:	d200      	bcs.n	800032c <__udivsi3+0xf8>
 800032a:	4601      	mov	r1, r0
 800032c:	4152      	adcs	r2, r2
 800032e:	4610      	mov	r0, r2
 8000330:	4770      	bx	lr
 8000332:	e7ff      	b.n	8000334 <__udivsi3+0x100>
 8000334:	b501      	push	{r0, lr}
 8000336:	2000      	movs	r0, #0
 8000338:	f000 f8f0 	bl	800051c <__aeabi_idiv0>
 800033c:	bd02      	pop	{r1, pc}
 800033e:	46c0      	nop			; (mov r8, r8)

08000340 <__aeabi_uidivmod>:
 8000340:	2900      	cmp	r1, #0
 8000342:	d0f7      	beq.n	8000334 <__udivsi3+0x100>
 8000344:	e776      	b.n	8000234 <__udivsi3>
 8000346:	4770      	bx	lr

08000348 <__divsi3>:
 8000348:	4603      	mov	r3, r0
 800034a:	430b      	orrs	r3, r1
 800034c:	d47f      	bmi.n	800044e <__divsi3+0x106>
 800034e:	2200      	movs	r2, #0
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d374      	bcc.n	8000440 <__divsi3+0xf8>
 8000356:	0903      	lsrs	r3, r0, #4
 8000358:	428b      	cmp	r3, r1
 800035a:	d35f      	bcc.n	800041c <__divsi3+0xd4>
 800035c:	0a03      	lsrs	r3, r0, #8
 800035e:	428b      	cmp	r3, r1
 8000360:	d344      	bcc.n	80003ec <__divsi3+0xa4>
 8000362:	0b03      	lsrs	r3, r0, #12
 8000364:	428b      	cmp	r3, r1
 8000366:	d328      	bcc.n	80003ba <__divsi3+0x72>
 8000368:	0c03      	lsrs	r3, r0, #16
 800036a:	428b      	cmp	r3, r1
 800036c:	d30d      	bcc.n	800038a <__divsi3+0x42>
 800036e:	22ff      	movs	r2, #255	; 0xff
 8000370:	0209      	lsls	r1, r1, #8
 8000372:	ba12      	rev	r2, r2
 8000374:	0c03      	lsrs	r3, r0, #16
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__divsi3+0x38>
 800037a:	1212      	asrs	r2, r2, #8
 800037c:	0209      	lsls	r1, r1, #8
 800037e:	d065      	beq.n	800044c <__divsi3+0x104>
 8000380:	0b03      	lsrs	r3, r0, #12
 8000382:	428b      	cmp	r3, r1
 8000384:	d319      	bcc.n	80003ba <__divsi3+0x72>
 8000386:	e000      	b.n	800038a <__divsi3+0x42>
 8000388:	0a09      	lsrs	r1, r1, #8
 800038a:	0bc3      	lsrs	r3, r0, #15
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x4c>
 8000390:	03cb      	lsls	r3, r1, #15
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0b83      	lsrs	r3, r0, #14
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x58>
 800039c:	038b      	lsls	r3, r1, #14
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0b43      	lsrs	r3, r0, #13
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x64>
 80003a8:	034b      	lsls	r3, r1, #13
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0b03      	lsrs	r3, r0, #12
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x70>
 80003b4:	030b      	lsls	r3, r1, #12
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0ac3      	lsrs	r3, r0, #11
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x7c>
 80003c0:	02cb      	lsls	r3, r1, #11
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0a83      	lsrs	r3, r0, #10
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x88>
 80003cc:	028b      	lsls	r3, r1, #10
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0a43      	lsrs	r3, r0, #9
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x94>
 80003d8:	024b      	lsls	r3, r1, #9
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0a03      	lsrs	r3, r0, #8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0xa0>
 80003e4:	020b      	lsls	r3, r1, #8
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	d2cd      	bcs.n	8000388 <__divsi3+0x40>
 80003ec:	09c3      	lsrs	r3, r0, #7
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d301      	bcc.n	80003f6 <__divsi3+0xae>
 80003f2:	01cb      	lsls	r3, r1, #7
 80003f4:	1ac0      	subs	r0, r0, r3
 80003f6:	4152      	adcs	r2, r2
 80003f8:	0983      	lsrs	r3, r0, #6
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0xba>
 80003fe:	018b      	lsls	r3, r1, #6
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	0943      	lsrs	r3, r0, #5
 8000406:	428b      	cmp	r3, r1
 8000408:	d301      	bcc.n	800040e <__divsi3+0xc6>
 800040a:	014b      	lsls	r3, r1, #5
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	4152      	adcs	r2, r2
 8000410:	0903      	lsrs	r3, r0, #4
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0xd2>
 8000416:	010b      	lsls	r3, r1, #4
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	08c3      	lsrs	r3, r0, #3
 800041e:	428b      	cmp	r3, r1
 8000420:	d301      	bcc.n	8000426 <__divsi3+0xde>
 8000422:	00cb      	lsls	r3, r1, #3
 8000424:	1ac0      	subs	r0, r0, r3
 8000426:	4152      	adcs	r2, r2
 8000428:	0883      	lsrs	r3, r0, #2
 800042a:	428b      	cmp	r3, r1
 800042c:	d301      	bcc.n	8000432 <__divsi3+0xea>
 800042e:	008b      	lsls	r3, r1, #2
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	4152      	adcs	r2, r2
 8000434:	0843      	lsrs	r3, r0, #1
 8000436:	428b      	cmp	r3, r1
 8000438:	d301      	bcc.n	800043e <__divsi3+0xf6>
 800043a:	004b      	lsls	r3, r1, #1
 800043c:	1ac0      	subs	r0, r0, r3
 800043e:	4152      	adcs	r2, r2
 8000440:	1a41      	subs	r1, r0, r1
 8000442:	d200      	bcs.n	8000446 <__divsi3+0xfe>
 8000444:	4601      	mov	r1, r0
 8000446:	4152      	adcs	r2, r2
 8000448:	4610      	mov	r0, r2
 800044a:	4770      	bx	lr
 800044c:	e05d      	b.n	800050a <__divsi3+0x1c2>
 800044e:	0fca      	lsrs	r2, r1, #31
 8000450:	d000      	beq.n	8000454 <__divsi3+0x10c>
 8000452:	4249      	negs	r1, r1
 8000454:	1003      	asrs	r3, r0, #32
 8000456:	d300      	bcc.n	800045a <__divsi3+0x112>
 8000458:	4240      	negs	r0, r0
 800045a:	4053      	eors	r3, r2
 800045c:	2200      	movs	r2, #0
 800045e:	469c      	mov	ip, r3
 8000460:	0903      	lsrs	r3, r0, #4
 8000462:	428b      	cmp	r3, r1
 8000464:	d32d      	bcc.n	80004c2 <__divsi3+0x17a>
 8000466:	0a03      	lsrs	r3, r0, #8
 8000468:	428b      	cmp	r3, r1
 800046a:	d312      	bcc.n	8000492 <__divsi3+0x14a>
 800046c:	22fc      	movs	r2, #252	; 0xfc
 800046e:	0189      	lsls	r1, r1, #6
 8000470:	ba12      	rev	r2, r2
 8000472:	0a03      	lsrs	r3, r0, #8
 8000474:	428b      	cmp	r3, r1
 8000476:	d30c      	bcc.n	8000492 <__divsi3+0x14a>
 8000478:	0189      	lsls	r1, r1, #6
 800047a:	1192      	asrs	r2, r2, #6
 800047c:	428b      	cmp	r3, r1
 800047e:	d308      	bcc.n	8000492 <__divsi3+0x14a>
 8000480:	0189      	lsls	r1, r1, #6
 8000482:	1192      	asrs	r2, r2, #6
 8000484:	428b      	cmp	r3, r1
 8000486:	d304      	bcc.n	8000492 <__divsi3+0x14a>
 8000488:	0189      	lsls	r1, r1, #6
 800048a:	d03a      	beq.n	8000502 <__divsi3+0x1ba>
 800048c:	1192      	asrs	r2, r2, #6
 800048e:	e000      	b.n	8000492 <__divsi3+0x14a>
 8000490:	0989      	lsrs	r1, r1, #6
 8000492:	09c3      	lsrs	r3, r0, #7
 8000494:	428b      	cmp	r3, r1
 8000496:	d301      	bcc.n	800049c <__divsi3+0x154>
 8000498:	01cb      	lsls	r3, r1, #7
 800049a:	1ac0      	subs	r0, r0, r3
 800049c:	4152      	adcs	r2, r2
 800049e:	0983      	lsrs	r3, r0, #6
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d301      	bcc.n	80004a8 <__divsi3+0x160>
 80004a4:	018b      	lsls	r3, r1, #6
 80004a6:	1ac0      	subs	r0, r0, r3
 80004a8:	4152      	adcs	r2, r2
 80004aa:	0943      	lsrs	r3, r0, #5
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d301      	bcc.n	80004b4 <__divsi3+0x16c>
 80004b0:	014b      	lsls	r3, r1, #5
 80004b2:	1ac0      	subs	r0, r0, r3
 80004b4:	4152      	adcs	r2, r2
 80004b6:	0903      	lsrs	r3, r0, #4
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d301      	bcc.n	80004c0 <__divsi3+0x178>
 80004bc:	010b      	lsls	r3, r1, #4
 80004be:	1ac0      	subs	r0, r0, r3
 80004c0:	4152      	adcs	r2, r2
 80004c2:	08c3      	lsrs	r3, r0, #3
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d301      	bcc.n	80004cc <__divsi3+0x184>
 80004c8:	00cb      	lsls	r3, r1, #3
 80004ca:	1ac0      	subs	r0, r0, r3
 80004cc:	4152      	adcs	r2, r2
 80004ce:	0883      	lsrs	r3, r0, #2
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d301      	bcc.n	80004d8 <__divsi3+0x190>
 80004d4:	008b      	lsls	r3, r1, #2
 80004d6:	1ac0      	subs	r0, r0, r3
 80004d8:	4152      	adcs	r2, r2
 80004da:	d2d9      	bcs.n	8000490 <__divsi3+0x148>
 80004dc:	0843      	lsrs	r3, r0, #1
 80004de:	428b      	cmp	r3, r1
 80004e0:	d301      	bcc.n	80004e6 <__divsi3+0x19e>
 80004e2:	004b      	lsls	r3, r1, #1
 80004e4:	1ac0      	subs	r0, r0, r3
 80004e6:	4152      	adcs	r2, r2
 80004e8:	1a41      	subs	r1, r0, r1
 80004ea:	d200      	bcs.n	80004ee <__divsi3+0x1a6>
 80004ec:	4601      	mov	r1, r0
 80004ee:	4663      	mov	r3, ip
 80004f0:	4152      	adcs	r2, r2
 80004f2:	105b      	asrs	r3, r3, #1
 80004f4:	4610      	mov	r0, r2
 80004f6:	d301      	bcc.n	80004fc <__divsi3+0x1b4>
 80004f8:	4240      	negs	r0, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d500      	bpl.n	8000500 <__divsi3+0x1b8>
 80004fe:	4249      	negs	r1, r1
 8000500:	4770      	bx	lr
 8000502:	4663      	mov	r3, ip
 8000504:	105b      	asrs	r3, r3, #1
 8000506:	d300      	bcc.n	800050a <__divsi3+0x1c2>
 8000508:	4240      	negs	r0, r0
 800050a:	b501      	push	{r0, lr}
 800050c:	2000      	movs	r0, #0
 800050e:	f000 f805 	bl	800051c <__aeabi_idiv0>
 8000512:	bd02      	pop	{r1, pc}

08000514 <__aeabi_idivmod>:
 8000514:	2900      	cmp	r1, #0
 8000516:	d0f8      	beq.n	800050a <__divsi3+0x1c2>
 8000518:	e716      	b.n	8000348 <__divsi3>
 800051a:	4770      	bx	lr

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__libc_init_array>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	4d0c      	ldr	r5, [pc, #48]	; (8000554 <__libc_init_array+0x34>)
 8000524:	4e0c      	ldr	r6, [pc, #48]	; (8000558 <__libc_init_array+0x38>)
 8000526:	1b76      	subs	r6, r6, r5
 8000528:	10b6      	asrs	r6, r6, #2
 800052a:	d005      	beq.n	8000538 <__libc_init_array+0x18>
 800052c:	2400      	movs	r4, #0
 800052e:	cd08      	ldmia	r5!, {r3}
 8000530:	3401      	adds	r4, #1
 8000532:	4798      	blx	r3
 8000534:	42a6      	cmp	r6, r4
 8000536:	d1fa      	bne.n	800052e <__libc_init_array+0xe>
 8000538:	f002 fdfc 	bl	8003134 <_init>
 800053c:	4d07      	ldr	r5, [pc, #28]	; (800055c <__libc_init_array+0x3c>)
 800053e:	4e08      	ldr	r6, [pc, #32]	; (8000560 <__libc_init_array+0x40>)
 8000540:	1b76      	subs	r6, r6, r5
 8000542:	10b6      	asrs	r6, r6, #2
 8000544:	d005      	beq.n	8000552 <__libc_init_array+0x32>
 8000546:	2400      	movs	r4, #0
 8000548:	cd08      	ldmia	r5!, {r3}
 800054a:	3401      	adds	r4, #1
 800054c:	4798      	blx	r3
 800054e:	42a6      	cmp	r6, r4
 8000550:	d1fa      	bne.n	8000548 <__libc_init_array+0x28>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	0800328c 	.word	0x0800328c
 8000558:	0800328c 	.word	0x0800328c
 800055c:	0800328c 	.word	0x0800328c
 8000560:	08003290 	.word	0x08003290

08000564 <memset>:
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	0783      	lsls	r3, r0, #30
 800056a:	d04a      	beq.n	8000602 <memset+0x9e>
 800056c:	1e54      	subs	r4, r2, #1
 800056e:	2a00      	cmp	r2, #0
 8000570:	d044      	beq.n	80005fc <memset+0x98>
 8000572:	b2ce      	uxtb	r6, r1
 8000574:	0003      	movs	r3, r0
 8000576:	2203      	movs	r2, #3
 8000578:	e002      	b.n	8000580 <memset+0x1c>
 800057a:	3501      	adds	r5, #1
 800057c:	3c01      	subs	r4, #1
 800057e:	d33d      	bcc.n	80005fc <memset+0x98>
 8000580:	3301      	adds	r3, #1
 8000582:	702e      	strb	r6, [r5, #0]
 8000584:	4213      	tst	r3, r2
 8000586:	d1f8      	bne.n	800057a <memset+0x16>
 8000588:	2c03      	cmp	r4, #3
 800058a:	d92f      	bls.n	80005ec <memset+0x88>
 800058c:	22ff      	movs	r2, #255	; 0xff
 800058e:	400a      	ands	r2, r1
 8000590:	0215      	lsls	r5, r2, #8
 8000592:	4315      	orrs	r5, r2
 8000594:	042a      	lsls	r2, r5, #16
 8000596:	4315      	orrs	r5, r2
 8000598:	2c0f      	cmp	r4, #15
 800059a:	d935      	bls.n	8000608 <memset+0xa4>
 800059c:	0027      	movs	r7, r4
 800059e:	3f10      	subs	r7, #16
 80005a0:	093f      	lsrs	r7, r7, #4
 80005a2:	013e      	lsls	r6, r7, #4
 80005a4:	46b4      	mov	ip, r6
 80005a6:	001e      	movs	r6, r3
 80005a8:	001a      	movs	r2, r3
 80005aa:	3610      	adds	r6, #16
 80005ac:	4466      	add	r6, ip
 80005ae:	6015      	str	r5, [r2, #0]
 80005b0:	6055      	str	r5, [r2, #4]
 80005b2:	6095      	str	r5, [r2, #8]
 80005b4:	60d5      	str	r5, [r2, #12]
 80005b6:	3210      	adds	r2, #16
 80005b8:	42b2      	cmp	r2, r6
 80005ba:	d1f8      	bne.n	80005ae <memset+0x4a>
 80005bc:	260f      	movs	r6, #15
 80005be:	220c      	movs	r2, #12
 80005c0:	3701      	adds	r7, #1
 80005c2:	013f      	lsls	r7, r7, #4
 80005c4:	4026      	ands	r6, r4
 80005c6:	19db      	adds	r3, r3, r7
 80005c8:	0037      	movs	r7, r6
 80005ca:	4222      	tst	r2, r4
 80005cc:	d017      	beq.n	80005fe <memset+0x9a>
 80005ce:	1f3e      	subs	r6, r7, #4
 80005d0:	08b6      	lsrs	r6, r6, #2
 80005d2:	00b4      	lsls	r4, r6, #2
 80005d4:	46a4      	mov	ip, r4
 80005d6:	001a      	movs	r2, r3
 80005d8:	1d1c      	adds	r4, r3, #4
 80005da:	4464      	add	r4, ip
 80005dc:	c220      	stmia	r2!, {r5}
 80005de:	42a2      	cmp	r2, r4
 80005e0:	d1fc      	bne.n	80005dc <memset+0x78>
 80005e2:	2403      	movs	r4, #3
 80005e4:	3601      	adds	r6, #1
 80005e6:	00b6      	lsls	r6, r6, #2
 80005e8:	199b      	adds	r3, r3, r6
 80005ea:	403c      	ands	r4, r7
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d005      	beq.n	80005fc <memset+0x98>
 80005f0:	b2c9      	uxtb	r1, r1
 80005f2:	191c      	adds	r4, r3, r4
 80005f4:	7019      	strb	r1, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	429c      	cmp	r4, r3
 80005fa:	d1fb      	bne.n	80005f4 <memset+0x90>
 80005fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fe:	0034      	movs	r4, r6
 8000600:	e7f4      	b.n	80005ec <memset+0x88>
 8000602:	0014      	movs	r4, r2
 8000604:	0003      	movs	r3, r0
 8000606:	e7bf      	b.n	8000588 <memset+0x24>
 8000608:	0027      	movs	r7, r4
 800060a:	e7e0      	b.n	80005ce <memset+0x6a>

0800060c <srand>:
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <srand+0x48>)
 800060e:	b570      	push	{r4, r5, r6, lr}
 8000610:	681c      	ldr	r4, [r3, #0]
 8000612:	0005      	movs	r5, r0
 8000614:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000616:	2800      	cmp	r0, #0
 8000618:	d003      	beq.n	8000622 <srand+0x16>
 800061a:	2300      	movs	r3, #0
 800061c:	6105      	str	r5, [r0, #16]
 800061e:	6143      	str	r3, [r0, #20]
 8000620:	bd70      	pop	{r4, r5, r6, pc}
 8000622:	3018      	adds	r0, #24
 8000624:	f000 f8aa 	bl	800077c <malloc>
 8000628:	63a0      	str	r0, [r4, #56]	; 0x38
 800062a:	2800      	cmp	r0, #0
 800062c:	d00c      	beq.n	8000648 <srand+0x3c>
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <srand+0x4c>)
 8000630:	2201      	movs	r2, #1
 8000632:	6003      	str	r3, [r0, #0]
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <srand+0x50>)
 8000636:	6043      	str	r3, [r0, #4]
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <srand+0x54>)
 800063a:	6083      	str	r3, [r0, #8]
 800063c:	230b      	movs	r3, #11
 800063e:	8183      	strh	r3, [r0, #12]
 8000640:	2300      	movs	r3, #0
 8000642:	6102      	str	r2, [r0, #16]
 8000644:	6143      	str	r3, [r0, #20]
 8000646:	e7e8      	b.n	800061a <srand+0xe>
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <srand+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	2142      	movs	r1, #66	; 0x42
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <srand+0x5c>)
 8000650:	f000 f850 	bl	80006f4 <__assert_func>
 8000654:	20000014 	.word	0x20000014
 8000658:	abcd330e 	.word	0xabcd330e
 800065c:	e66d1234 	.word	0xe66d1234
 8000660:	0005deec 	.word	0x0005deec
 8000664:	080031c4 	.word	0x080031c4
 8000668:	080031dc 	.word	0x080031dc

0800066c <rand>:
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <rand+0x64>)
 800066e:	b570      	push	{r4, r5, r6, lr}
 8000670:	681d      	ldr	r5, [r3, #0]
 8000672:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8000674:	2c00      	cmp	r4, #0
 8000676:	d00e      	beq.n	8000696 <rand+0x2a>
 8000678:	6920      	ldr	r0, [r4, #16]
 800067a:	6961      	ldr	r1, [r4, #20]
 800067c:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <rand+0x68>)
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <rand+0x6c>)
 8000680:	f001 fd16 	bl	80020b0 <__aeabi_lmul>
 8000684:	2201      	movs	r2, #1
 8000686:	2300      	movs	r3, #0
 8000688:	1812      	adds	r2, r2, r0
 800068a:	414b      	adcs	r3, r1
 800068c:	0058      	lsls	r0, r3, #1
 800068e:	0840      	lsrs	r0, r0, #1
 8000690:	6122      	str	r2, [r4, #16]
 8000692:	6163      	str	r3, [r4, #20]
 8000694:	bd70      	pop	{r4, r5, r6, pc}
 8000696:	2018      	movs	r0, #24
 8000698:	f000 f870 	bl	800077c <malloc>
 800069c:	1e04      	subs	r4, r0, #0
 800069e:	63a8      	str	r0, [r5, #56]	; 0x38
 80006a0:	d00f      	beq.n	80006c2 <rand+0x56>
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <rand+0x70>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	6003      	str	r3, [r0, #0]
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <rand+0x74>)
 80006aa:	6043      	str	r3, [r0, #4]
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <rand+0x78>)
 80006ae:	6083      	str	r3, [r0, #8]
 80006b0:	230b      	movs	r3, #11
 80006b2:	8183      	strh	r3, [r0, #12]
 80006b4:	2300      	movs	r3, #0
 80006b6:	6102      	str	r2, [r0, #16]
 80006b8:	6143      	str	r3, [r0, #20]
 80006ba:	4807      	ldr	r0, [pc, #28]	; (80006d8 <rand+0x6c>)
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <rand+0x7c>)
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <rand+0x6c>)
 80006c0:	e7e6      	b.n	8000690 <rand+0x24>
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <rand+0x80>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	214e      	movs	r1, #78	; 0x4e
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <rand+0x84>)
 80006ca:	f000 f813 	bl	80006f4 <__assert_func>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000014 	.word	0x20000014
 80006d4:	4c957f2d 	.word	0x4c957f2d
 80006d8:	5851f42d 	.word	0x5851f42d
 80006dc:	abcd330e 	.word	0xabcd330e
 80006e0:	e66d1234 	.word	0xe66d1234
 80006e4:	0005deec 	.word	0x0005deec
 80006e8:	4c957f2e 	.word	0x4c957f2e
 80006ec:	080031c4 	.word	0x080031c4
 80006f0:	080031dc 	.word	0x080031dc

080006f4 <__assert_func>:
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	001c      	movs	r4, r3
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <__assert_func+0x30>)
 80006fa:	0005      	movs	r5, r0
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	b085      	sub	sp, #20
 8000700:	68d8      	ldr	r0, [r3, #12]
 8000702:	2a00      	cmp	r2, #0
 8000704:	d00a      	beq.n	800071c <__assert_func+0x28>
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <__assert_func+0x34>)
 8000708:	9202      	str	r2, [sp, #8]
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	9100      	str	r1, [sp, #0]
 800070e:	002b      	movs	r3, r5
 8000710:	0022      	movs	r2, r4
 8000712:	4906      	ldr	r1, [pc, #24]	; (800072c <__assert_func+0x38>)
 8000714:	f000 f820 	bl	8000758 <fiprintf>
 8000718:	f000 fdbc 	bl	8001294 <abort>
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <__assert_func+0x3c>)
 800071e:	001a      	movs	r2, r3
 8000720:	e7f2      	b.n	8000708 <__assert_func+0x14>
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000014 	.word	0x20000014
 8000728:	08003210 	.word	0x08003210
 800072c:	08003220 	.word	0x08003220
 8000730:	0800321c 	.word	0x0800321c

08000734 <__assert>:
 8000734:	0013      	movs	r3, r2
 8000736:	b510      	push	{r4, lr}
 8000738:	2200      	movs	r2, #0
 800073a:	f7ff ffdb 	bl	80006f4 <__assert_func>
 800073e:	46c0      	nop			; (mov r8, r8)

08000740 <_fiprintf_r>:
 8000740:	b40c      	push	{r2, r3}
 8000742:	b500      	push	{lr}
 8000744:	b083      	sub	sp, #12
 8000746:	ab04      	add	r3, sp, #16
 8000748:	cb04      	ldmia	r3!, {r2}
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	f000 f91e 	bl	800098c <_vfiprintf_r>
 8000750:	b003      	add	sp, #12
 8000752:	bc08      	pop	{r3}
 8000754:	b002      	add	sp, #8
 8000756:	4718      	bx	r3

08000758 <fiprintf>:
 8000758:	b40e      	push	{r1, r2, r3}
 800075a:	b500      	push	{lr}
 800075c:	b082      	sub	sp, #8
 800075e:	ab03      	add	r3, sp, #12
 8000760:	0001      	movs	r1, r0
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <fiprintf+0x20>)
 8000764:	cb04      	ldmia	r3!, {r2}
 8000766:	6800      	ldr	r0, [r0, #0]
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	f000 f90f 	bl	800098c <_vfiprintf_r>
 800076e:	b002      	add	sp, #8
 8000770:	bc08      	pop	{r3}
 8000772:	b003      	add	sp, #12
 8000774:	4718      	bx	r3
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	20000014 	.word	0x20000014

0800077c <malloc>:
 800077c:	b510      	push	{r4, lr}
 800077e:	4b03      	ldr	r3, [pc, #12]	; (800078c <malloc+0x10>)
 8000780:	0001      	movs	r1, r0
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	f000 f864 	bl	8000850 <_malloc_r>
 8000788:	bd10      	pop	{r4, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000014 	.word	0x20000014

08000790 <free>:
 8000790:	b510      	push	{r4, lr}
 8000792:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <free+0x10>)
 8000794:	0001      	movs	r1, r0
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	f000 f804 	bl	80007a4 <_free_r>
 800079c:	bd10      	pop	{r4, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000014 	.word	0x20000014

080007a4 <_free_r>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	0005      	movs	r5, r0
 80007a8:	2900      	cmp	r1, #0
 80007aa:	d015      	beq.n	80007d8 <_free_r+0x34>
 80007ac:	1f0c      	subs	r4, r1, #4
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	db27      	blt.n	8000804 <_free_r+0x60>
 80007b4:	0028      	movs	r0, r5
 80007b6:	f001 faab 	bl	8001d10 <__malloc_lock>
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <_free_r+0xa8>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d005      	beq.n	80007ce <_free_r+0x2a>
 80007c2:	42a2      	cmp	r2, r4
 80007c4:	d90c      	bls.n	80007e0 <_free_r+0x3c>
 80007c6:	6821      	ldr	r1, [r4, #0]
 80007c8:	1860      	adds	r0, r4, r1
 80007ca:	4282      	cmp	r2, r0
 80007cc:	d024      	beq.n	8000818 <_free_r+0x74>
 80007ce:	6062      	str	r2, [r4, #4]
 80007d0:	0028      	movs	r0, r5
 80007d2:	601c      	str	r4, [r3, #0]
 80007d4:	f001 fa9e 	bl	8001d14 <__malloc_unlock>
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	42a3      	cmp	r3, r4
 80007dc:	d803      	bhi.n	80007e6 <_free_r+0x42>
 80007de:	001a      	movs	r2, r3
 80007e0:	6853      	ldr	r3, [r2, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f9      	bne.n	80007da <_free_r+0x36>
 80007e6:	6811      	ldr	r1, [r2, #0]
 80007e8:	1850      	adds	r0, r2, r1
 80007ea:	42a0      	cmp	r0, r4
 80007ec:	d01b      	beq.n	8000826 <_free_r+0x82>
 80007ee:	d827      	bhi.n	8000840 <_free_r+0x9c>
 80007f0:	6821      	ldr	r1, [r4, #0]
 80007f2:	1860      	adds	r0, r4, r1
 80007f4:	4283      	cmp	r3, r0
 80007f6:	d007      	beq.n	8000808 <_free_r+0x64>
 80007f8:	6063      	str	r3, [r4, #4]
 80007fa:	6054      	str	r4, [r2, #4]
 80007fc:	0028      	movs	r0, r5
 80007fe:	f001 fa89 	bl	8001d14 <__malloc_unlock>
 8000802:	e7e9      	b.n	80007d8 <_free_r+0x34>
 8000804:	18e4      	adds	r4, r4, r3
 8000806:	e7d5      	b.n	80007b4 <_free_r+0x10>
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4684      	mov	ip, r0
 800080e:	4461      	add	r1, ip
 8000810:	6021      	str	r1, [r4, #0]
 8000812:	6063      	str	r3, [r4, #4]
 8000814:	6054      	str	r4, [r2, #4]
 8000816:	e7f1      	b.n	80007fc <_free_r+0x58>
 8000818:	6810      	ldr	r0, [r2, #0]
 800081a:	6852      	ldr	r2, [r2, #4]
 800081c:	4684      	mov	ip, r0
 800081e:	4461      	add	r1, ip
 8000820:	6021      	str	r1, [r4, #0]
 8000822:	6062      	str	r2, [r4, #4]
 8000824:	e7d4      	b.n	80007d0 <_free_r+0x2c>
 8000826:	6820      	ldr	r0, [r4, #0]
 8000828:	1809      	adds	r1, r1, r0
 800082a:	1850      	adds	r0, r2, r1
 800082c:	6011      	str	r1, [r2, #0]
 800082e:	4283      	cmp	r3, r0
 8000830:	d1e4      	bne.n	80007fc <_free_r+0x58>
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	4684      	mov	ip, r0
 8000838:	4461      	add	r1, ip
 800083a:	6011      	str	r1, [r2, #0]
 800083c:	6053      	str	r3, [r2, #4]
 800083e:	e7dd      	b.n	80007fc <_free_r+0x58>
 8000840:	230c      	movs	r3, #12
 8000842:	0028      	movs	r0, r5
 8000844:	602b      	str	r3, [r5, #0]
 8000846:	f001 fa65 	bl	8001d14 <__malloc_unlock>
 800084a:	e7c5      	b.n	80007d8 <_free_r+0x34>
 800084c:	2000019c 	.word	0x2000019c

08000850 <_malloc_r>:
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000852:	2303      	movs	r3, #3
 8000854:	1ccd      	adds	r5, r1, #3
 8000856:	439d      	bics	r5, r3
 8000858:	3508      	adds	r5, #8
 800085a:	0006      	movs	r6, r0
 800085c:	2d0c      	cmp	r5, #12
 800085e:	d22a      	bcs.n	80008b6 <_malloc_r+0x66>
 8000860:	250c      	movs	r5, #12
 8000862:	42a9      	cmp	r1, r5
 8000864:	d829      	bhi.n	80008ba <_malloc_r+0x6a>
 8000866:	0030      	movs	r0, r6
 8000868:	f001 fa52 	bl	8001d10 <__malloc_lock>
 800086c:	4f2a      	ldr	r7, [pc, #168]	; (8000918 <_malloc_r+0xc8>)
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	2a00      	cmp	r2, #0
 8000872:	d00a      	beq.n	800088a <_malloc_r+0x3a>
 8000874:	6813      	ldr	r3, [r2, #0]
 8000876:	1b5b      	subs	r3, r3, r5
 8000878:	d404      	bmi.n	8000884 <_malloc_r+0x34>
 800087a:	e041      	b.n	8000900 <_malloc_r+0xb0>
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	1b5b      	subs	r3, r3, r5
 8000880:	d51f      	bpl.n	80008c2 <_malloc_r+0x72>
 8000882:	0022      	movs	r2, r4
 8000884:	6854      	ldr	r4, [r2, #4]
 8000886:	2c00      	cmp	r4, #0
 8000888:	d1f8      	bne.n	800087c <_malloc_r+0x2c>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d03d      	beq.n	800090c <_malloc_r+0xbc>
 8000890:	0029      	movs	r1, r5
 8000892:	0030      	movs	r0, r6
 8000894:	f000 fbf0 	bl	8001078 <_sbrk_r>
 8000898:	1c43      	adds	r3, r0, #1
 800089a:	d02a      	beq.n	80008f2 <_malloc_r+0xa2>
 800089c:	2303      	movs	r3, #3
 800089e:	1cc4      	adds	r4, r0, #3
 80008a0:	439c      	bics	r4, r3
 80008a2:	42a0      	cmp	r0, r4
 80008a4:	d005      	beq.n	80008b2 <_malloc_r+0x62>
 80008a6:	1a21      	subs	r1, r4, r0
 80008a8:	0030      	movs	r0, r6
 80008aa:	f000 fbe5 	bl	8001078 <_sbrk_r>
 80008ae:	1c43      	adds	r3, r0, #1
 80008b0:	d01f      	beq.n	80008f2 <_malloc_r+0xa2>
 80008b2:	6025      	str	r5, [r4, #0]
 80008b4:	e010      	b.n	80008d8 <_malloc_r+0x88>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	dad3      	bge.n	8000862 <_malloc_r+0x12>
 80008ba:	230c      	movs	r3, #12
 80008bc:	2000      	movs	r0, #0
 80008be:	6033      	str	r3, [r6, #0]
 80008c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008c2:	2b0b      	cmp	r3, #11
 80008c4:	d805      	bhi.n	80008d2 <_malloc_r+0x82>
 80008c6:	6863      	ldr	r3, [r4, #4]
 80008c8:	42a2      	cmp	r2, r4
 80008ca:	d01d      	beq.n	8000908 <_malloc_r+0xb8>
 80008cc:	6053      	str	r3, [r2, #4]
 80008ce:	e003      	b.n	80008d8 <_malloc_r+0x88>
 80008d0:	0014      	movs	r4, r2
 80008d2:	6023      	str	r3, [r4, #0]
 80008d4:	18e4      	adds	r4, r4, r3
 80008d6:	6025      	str	r5, [r4, #0]
 80008d8:	0030      	movs	r0, r6
 80008da:	f001 fa1b 	bl	8001d14 <__malloc_unlock>
 80008de:	0020      	movs	r0, r4
 80008e0:	2207      	movs	r2, #7
 80008e2:	300b      	adds	r0, #11
 80008e4:	1d23      	adds	r3, r4, #4
 80008e6:	4390      	bics	r0, r2
 80008e8:	1ac2      	subs	r2, r0, r3
 80008ea:	d0e9      	beq.n	80008c0 <_malloc_r+0x70>
 80008ec:	1a1b      	subs	r3, r3, r0
 80008ee:	50a3      	str	r3, [r4, r2]
 80008f0:	e7e6      	b.n	80008c0 <_malloc_r+0x70>
 80008f2:	230c      	movs	r3, #12
 80008f4:	0030      	movs	r0, r6
 80008f6:	6033      	str	r3, [r6, #0]
 80008f8:	f001 fa0c 	bl	8001d14 <__malloc_unlock>
 80008fc:	2000      	movs	r0, #0
 80008fe:	e7df      	b.n	80008c0 <_malloc_r+0x70>
 8000900:	2b0b      	cmp	r3, #11
 8000902:	d8e5      	bhi.n	80008d0 <_malloc_r+0x80>
 8000904:	0014      	movs	r4, r2
 8000906:	6853      	ldr	r3, [r2, #4]
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	e7e5      	b.n	80008d8 <_malloc_r+0x88>
 800090c:	2100      	movs	r1, #0
 800090e:	0030      	movs	r0, r6
 8000910:	f000 fbb2 	bl	8001078 <_sbrk_r>
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	e7bb      	b.n	8000890 <_malloc_r+0x40>
 8000918:	2000019c 	.word	0x2000019c

0800091c <__sfputc_r>:
 800091c:	6893      	ldr	r3, [r2, #8]
 800091e:	b510      	push	{r4, lr}
 8000920:	3b01      	subs	r3, #1
 8000922:	6093      	str	r3, [r2, #8]
 8000924:	2b00      	cmp	r3, #0
 8000926:	da04      	bge.n	8000932 <__sfputc_r+0x16>
 8000928:	6994      	ldr	r4, [r2, #24]
 800092a:	42a3      	cmp	r3, r4
 800092c:	db07      	blt.n	800093e <__sfputc_r+0x22>
 800092e:	290a      	cmp	r1, #10
 8000930:	d005      	beq.n	800093e <__sfputc_r+0x22>
 8000932:	6813      	ldr	r3, [r2, #0]
 8000934:	1c58      	adds	r0, r3, #1
 8000936:	6010      	str	r0, [r2, #0]
 8000938:	0008      	movs	r0, r1
 800093a:	7019      	strb	r1, [r3, #0]
 800093c:	bd10      	pop	{r4, pc}
 800093e:	f000 fbad 	bl	800109c <__swbuf_r>
 8000942:	e7fb      	b.n	800093c <__sfputc_r+0x20>

08000944 <__sfputs_r>:
 8000944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000946:	0006      	movs	r6, r0
 8000948:	000f      	movs	r7, r1
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00d      	beq.n	800096a <__sfputs_r+0x26>
 800094e:	0014      	movs	r4, r2
 8000950:	18d5      	adds	r5, r2, r3
 8000952:	e002      	b.n	800095a <__sfputs_r+0x16>
 8000954:	3401      	adds	r4, #1
 8000956:	42ac      	cmp	r4, r5
 8000958:	d007      	beq.n	800096a <__sfputs_r+0x26>
 800095a:	7821      	ldrb	r1, [r4, #0]
 800095c:	003a      	movs	r2, r7
 800095e:	0030      	movs	r0, r6
 8000960:	f7ff ffdc 	bl	800091c <__sfputc_r>
 8000964:	1c43      	adds	r3, r0, #1
 8000966:	d1f5      	bne.n	8000954 <__sfputs_r+0x10>
 8000968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800096a:	2000      	movs	r0, #0
 800096c:	e7fc      	b.n	8000968 <__sfputs_r+0x24>
 800096e:	46c0      	nop			; (mov r8, r8)

08000970 <__sprint_r>:
 8000970:	6893      	ldr	r3, [r2, #8]
 8000972:	b510      	push	{r4, lr}
 8000974:	0014      	movs	r4, r2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d102      	bne.n	8000980 <__sprint_r+0x10>
 800097a:	2000      	movs	r0, #0
 800097c:	6053      	str	r3, [r2, #4]
 800097e:	bd10      	pop	{r4, pc}
 8000980:	f000 fe8c 	bl	800169c <__sfvwrite_r>
 8000984:	2300      	movs	r3, #0
 8000986:	60a3      	str	r3, [r4, #8]
 8000988:	6063      	str	r3, [r4, #4]
 800098a:	e7f8      	b.n	800097e <__sprint_r+0xe>

0800098c <_vfiprintf_r>:
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	464e      	mov	r6, r9
 8000990:	46de      	mov	lr, fp
 8000992:	4657      	mov	r7, sl
 8000994:	4645      	mov	r5, r8
 8000996:	b5e0      	push	{r5, r6, r7, lr}
 8000998:	b0a1      	sub	sp, #132	; 0x84
 800099a:	9004      	str	r0, [sp, #16]
 800099c:	9103      	str	r1, [sp, #12]
 800099e:	4691      	mov	r9, r2
 80009a0:	001c      	movs	r4, r3
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d004      	beq.n	80009b0 <_vfiprintf_r+0x24>
 80009a6:	6983      	ldr	r3, [r0, #24]
 80009a8:	9305      	str	r3, [sp, #20]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d100      	bne.n	80009b0 <_vfiprintf_r+0x24>
 80009ae:	e0be      	b.n	8000b2e <_vfiprintf_r+0x1a2>
 80009b0:	4bad      	ldr	r3, [pc, #692]	; (8000c68 <_vfiprintf_r+0x2dc>)
 80009b2:	9a03      	ldr	r2, [sp, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d100      	bne.n	80009ba <_vfiprintf_r+0x2e>
 80009b8:	e0c0      	b.n	8000b3c <_vfiprintf_r+0x1b0>
 80009ba:	4bac      	ldr	r3, [pc, #688]	; (8000c6c <_vfiprintf_r+0x2e0>)
 80009bc:	9a03      	ldr	r2, [sp, #12]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d100      	bne.n	80009c4 <_vfiprintf_r+0x38>
 80009c2:	e0cd      	b.n	8000b60 <_vfiprintf_r+0x1d4>
 80009c4:	4baa      	ldr	r3, [pc, #680]	; (8000c70 <_vfiprintf_r+0x2e4>)
 80009c6:	9a03      	ldr	r2, [sp, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d100      	bne.n	80009ce <_vfiprintf_r+0x42>
 80009cc:	e147      	b.n	8000c5e <_vfiprintf_r+0x2d2>
 80009ce:	9a03      	ldr	r2, [sp, #12]
 80009d0:	8993      	ldrh	r3, [r2, #12]
 80009d2:	071b      	lsls	r3, r3, #28
 80009d4:	d400      	bmi.n	80009d8 <_vfiprintf_r+0x4c>
 80009d6:	e0b9      	b.n	8000b4c <_vfiprintf_r+0x1c0>
 80009d8:	6913      	ldr	r3, [r2, #16]
 80009da:	9305      	str	r3, [sp, #20]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d100      	bne.n	80009e2 <_vfiprintf_r+0x56>
 80009e0:	e0b4      	b.n	8000b4c <_vfiprintf_r+0x1c0>
 80009e2:	2300      	movs	r3, #0
 80009e4:	ad08      	add	r5, sp, #32
 80009e6:	616b      	str	r3, [r5, #20]
 80009e8:	3320      	adds	r3, #32
 80009ea:	766b      	strb	r3, [r5, #25]
 80009ec:	3310      	adds	r3, #16
 80009ee:	76ab      	strb	r3, [r5, #26]
 80009f0:	3b2f      	subs	r3, #47	; 0x2f
 80009f2:	4698      	mov	r8, r3
 80009f4:	464b      	mov	r3, r9
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	9407      	str	r4, [sp, #28]
 80009fa:	4f9e      	ldr	r7, [pc, #632]	; (8000c74 <_vfiprintf_r+0x2e8>)
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d100      	bne.n	8000a02 <_vfiprintf_r+0x76>
 8000a00:	e089      	b.n	8000b16 <_vfiprintf_r+0x18a>
 8000a02:	2b25      	cmp	r3, #37	; 0x25
 8000a04:	d100      	bne.n	8000a08 <_vfiprintf_r+0x7c>
 8000a06:	e125      	b.n	8000c54 <_vfiprintf_r+0x2c8>
 8000a08:	464e      	mov	r6, r9
 8000a0a:	e003      	b.n	8000a14 <_vfiprintf_r+0x88>
 8000a0c:	2b25      	cmp	r3, #37	; 0x25
 8000a0e:	d100      	bne.n	8000a12 <_vfiprintf_r+0x86>
 8000a10:	e0aa      	b.n	8000b68 <_vfiprintf_r+0x1dc>
 8000a12:	0026      	movs	r6, r4
 8000a14:	7873      	ldrb	r3, [r6, #1]
 8000a16:	1c74      	adds	r4, r6, #1
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1f7      	bne.n	8000a0c <_vfiprintf_r+0x80>
 8000a1c:	464b      	mov	r3, r9
 8000a1e:	1ae3      	subs	r3, r4, r3
 8000a20:	469a      	mov	sl, r3
 8000a22:	d078      	beq.n	8000b16 <_vfiprintf_r+0x18a>
 8000a24:	4653      	mov	r3, sl
 8000a26:	464a      	mov	r2, r9
 8000a28:	9903      	ldr	r1, [sp, #12]
 8000a2a:	9804      	ldr	r0, [sp, #16]
 8000a2c:	f7ff ff8a 	bl	8000944 <__sfputs_r>
 8000a30:	1c43      	adds	r3, r0, #1
 8000a32:	d070      	beq.n	8000b16 <_vfiprintf_r+0x18a>
 8000a34:	696b      	ldr	r3, [r5, #20]
 8000a36:	4453      	add	r3, sl
 8000a38:	616b      	str	r3, [r5, #20]
 8000a3a:	7873      	ldrb	r3, [r6, #1]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d06a      	beq.n	8000b16 <_vfiprintf_r+0x18a>
 8000a40:	2201      	movs	r2, #1
 8000a42:	2300      	movs	r3, #0
 8000a44:	4252      	negs	r2, r2
 8000a46:	606a      	str	r2, [r5, #4]
 8000a48:	3244      	adds	r2, #68	; 0x44
 8000a4a:	3401      	adds	r4, #1
 8000a4c:	602b      	str	r3, [r5, #0]
 8000a4e:	60eb      	str	r3, [r5, #12]
 8000a50:	60ab      	str	r3, [r5, #8]
 8000a52:	54ab      	strb	r3, [r5, r2]
 8000a54:	65ab      	str	r3, [r5, #88]	; 0x58
 8000a56:	e006      	b.n	8000a66 <_vfiprintf_r+0xda>
 8000a58:	4643      	mov	r3, r8
 8000a5a:	1bc0      	subs	r0, r0, r7
 8000a5c:	4083      	lsls	r3, r0
 8000a5e:	0034      	movs	r4, r6
 8000a60:	682a      	ldr	r2, [r5, #0]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	602b      	str	r3, [r5, #0]
 8000a66:	7821      	ldrb	r1, [r4, #0]
 8000a68:	2205      	movs	r2, #5
 8000a6a:	0038      	movs	r0, r7
 8000a6c:	f001 f85e 	bl	8001b2c <memchr>
 8000a70:	1c66      	adds	r6, r4, #1
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d1f0      	bne.n	8000a58 <_vfiprintf_r+0xcc>
 8000a76:	682b      	ldr	r3, [r5, #0]
 8000a78:	46b2      	mov	sl, r6
 8000a7a:	06da      	lsls	r2, r3, #27
 8000a7c:	d502      	bpl.n	8000a84 <_vfiprintf_r+0xf8>
 8000a7e:	2243      	movs	r2, #67	; 0x43
 8000a80:	2120      	movs	r1, #32
 8000a82:	54a9      	strb	r1, [r5, r2]
 8000a84:	071a      	lsls	r2, r3, #28
 8000a86:	d502      	bpl.n	8000a8e <_vfiprintf_r+0x102>
 8000a88:	2243      	movs	r2, #67	; 0x43
 8000a8a:	212b      	movs	r1, #43	; 0x2b
 8000a8c:	54a9      	strb	r1, [r5, r2]
 8000a8e:	7821      	ldrb	r1, [r4, #0]
 8000a90:	292a      	cmp	r1, #42	; 0x2a
 8000a92:	d000      	beq.n	8000a96 <_vfiprintf_r+0x10a>
 8000a94:	e06e      	b.n	8000b74 <_vfiprintf_r+0x1e8>
 8000a96:	9a07      	ldr	r2, [sp, #28]
 8000a98:	1d11      	adds	r1, r2, #4
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	9107      	str	r1, [sp, #28]
 8000a9e:	2a00      	cmp	r2, #0
 8000aa0:	da00      	bge.n	8000aa4 <_vfiprintf_r+0x118>
 8000aa2:	e0ba      	b.n	8000c1a <_vfiprintf_r+0x28e>
 8000aa4:	60ea      	str	r2, [r5, #12]
 8000aa6:	7861      	ldrb	r1, [r4, #1]
 8000aa8:	1ca6      	adds	r6, r4, #2
 8000aaa:	292e      	cmp	r1, #46	; 0x2e
 8000aac:	d100      	bne.n	8000ab0 <_vfiprintf_r+0x124>
 8000aae:	e07a      	b.n	8000ba6 <_vfiprintf_r+0x21a>
 8000ab0:	4b71      	ldr	r3, [pc, #452]	; (8000c78 <_vfiprintf_r+0x2ec>)
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	4699      	mov	r9, r3
 8000ab8:	f001 f838 	bl	8001b2c <memchr>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	d100      	bne.n	8000ac2 <_vfiprintf_r+0x136>
 8000ac0:	e08f      	b.n	8000be2 <_vfiprintf_r+0x256>
 8000ac2:	464b      	mov	r3, r9
 8000ac4:	1ac0      	subs	r0, r0, r3
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	4083      	lsls	r3, r0
 8000aca:	682a      	ldr	r2, [r5, #0]
 8000acc:	7831      	ldrb	r1, [r6, #0]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	602b      	str	r3, [r5, #0]
 8000ad2:	2206      	movs	r2, #6
 8000ad4:	1c73      	adds	r3, r6, #1
 8000ad6:	4869      	ldr	r0, [pc, #420]	; (8000c7c <_vfiprintf_r+0x2f0>)
 8000ad8:	4699      	mov	r9, r3
 8000ada:	7629      	strb	r1, [r5, #24]
 8000adc:	f001 f826 	bl	8001b2c <memchr>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d100      	bne.n	8000ae6 <_vfiprintf_r+0x15a>
 8000ae4:	e088      	b.n	8000bf8 <_vfiprintf_r+0x26c>
 8000ae6:	4b66      	ldr	r3, [pc, #408]	; (8000c80 <_vfiprintf_r+0x2f4>)
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d100      	bne.n	8000aee <_vfiprintf_r+0x162>
 8000aec:	e08e      	b.n	8000c0c <_vfiprintf_r+0x280>
 8000aee:	ab07      	add	r3, sp, #28
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	9a03      	ldr	r2, [sp, #12]
 8000af4:	4b63      	ldr	r3, [pc, #396]	; (8000c84 <_vfiprintf_r+0x2f8>)
 8000af6:	0029      	movs	r1, r5
 8000af8:	9804      	ldr	r0, [sp, #16]
 8000afa:	e000      	b.n	8000afe <_vfiprintf_r+0x172>
 8000afc:	bf00      	nop
 8000afe:	4683      	mov	fp, r0
 8000b00:	465b      	mov	r3, fp
 8000b02:	3301      	adds	r3, #1
 8000b04:	d007      	beq.n	8000b16 <_vfiprintf_r+0x18a>
 8000b06:	696b      	ldr	r3, [r5, #20]
 8000b08:	445b      	add	r3, fp
 8000b0a:	616b      	str	r3, [r5, #20]
 8000b0c:	464b      	mov	r3, r9
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d000      	beq.n	8000b16 <_vfiprintf_r+0x18a>
 8000b14:	e775      	b.n	8000a02 <_vfiprintf_r+0x76>
 8000b16:	9b03      	ldr	r3, [sp, #12]
 8000b18:	899b      	ldrh	r3, [r3, #12]
 8000b1a:	065b      	lsls	r3, r3, #25
 8000b1c:	d41d      	bmi.n	8000b5a <_vfiprintf_r+0x1ce>
 8000b1e:	6968      	ldr	r0, [r5, #20]
 8000b20:	b021      	add	sp, #132	; 0x84
 8000b22:	bc3c      	pop	{r2, r3, r4, r5}
 8000b24:	4690      	mov	r8, r2
 8000b26:	4699      	mov	r9, r3
 8000b28:	46a2      	mov	sl, r4
 8000b2a:	46ab      	mov	fp, r5
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2e:	f000 fd8d 	bl	800164c <__sinit>
 8000b32:	4b4d      	ldr	r3, [pc, #308]	; (8000c68 <_vfiprintf_r+0x2dc>)
 8000b34:	9a03      	ldr	r2, [sp, #12]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d000      	beq.n	8000b3c <_vfiprintf_r+0x1b0>
 8000b3a:	e73e      	b.n	80009ba <_vfiprintf_r+0x2e>
 8000b3c:	9b04      	ldr	r3, [sp, #16]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	9303      	str	r3, [sp, #12]
 8000b42:	9a03      	ldr	r2, [sp, #12]
 8000b44:	8993      	ldrh	r3, [r2, #12]
 8000b46:	071b      	lsls	r3, r3, #28
 8000b48:	d500      	bpl.n	8000b4c <_vfiprintf_r+0x1c0>
 8000b4a:	e745      	b.n	80009d8 <_vfiprintf_r+0x4c>
 8000b4c:	9903      	ldr	r1, [sp, #12]
 8000b4e:	9804      	ldr	r0, [sp, #16]
 8000b50:	f000 fb1a 	bl	8001188 <__swsetup_r>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d100      	bne.n	8000b5a <_vfiprintf_r+0x1ce>
 8000b58:	e743      	b.n	80009e2 <_vfiprintf_r+0x56>
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4240      	negs	r0, r0
 8000b5e:	e7df      	b.n	8000b20 <_vfiprintf_r+0x194>
 8000b60:	9b04      	ldr	r3, [sp, #16]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	9303      	str	r3, [sp, #12]
 8000b66:	e732      	b.n	80009ce <_vfiprintf_r+0x42>
 8000b68:	464b      	mov	r3, r9
 8000b6a:	1ae3      	subs	r3, r4, r3
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	d100      	bne.n	8000b72 <_vfiprintf_r+0x1e6>
 8000b70:	e766      	b.n	8000a40 <_vfiprintf_r+0xb4>
 8000b72:	e757      	b.n	8000a24 <_vfiprintf_r+0x98>
 8000b74:	000a      	movs	r2, r1
 8000b76:	3a30      	subs	r2, #48	; 0x30
 8000b78:	46a2      	mov	sl, r4
 8000b7a:	2a09      	cmp	r2, #9
 8000b7c:	d895      	bhi.n	8000aaa <_vfiprintf_r+0x11e>
 8000b7e:	68eb      	ldr	r3, [r5, #12]
 8000b80:	0018      	movs	r0, r3
 8000b82:	e001      	b.n	8000b88 <_vfiprintf_r+0x1fc>
 8000b84:	0034      	movs	r4, r6
 8000b86:	3601      	adds	r6, #1
 8000b88:	0083      	lsls	r3, r0, #2
 8000b8a:	181b      	adds	r3, r3, r0
 8000b8c:	7831      	ldrb	r1, [r6, #0]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	1898      	adds	r0, r3, r2
 8000b92:	000a      	movs	r2, r1
 8000b94:	3a30      	subs	r2, #48	; 0x30
 8000b96:	2a09      	cmp	r2, #9
 8000b98:	d9f4      	bls.n	8000b84 <_vfiprintf_r+0x1f8>
 8000b9a:	46b2      	mov	sl, r6
 8000b9c:	60e8      	str	r0, [r5, #12]
 8000b9e:	1ca6      	adds	r6, r4, #2
 8000ba0:	292e      	cmp	r1, #46	; 0x2e
 8000ba2:	d000      	beq.n	8000ba6 <_vfiprintf_r+0x21a>
 8000ba4:	e784      	b.n	8000ab0 <_vfiprintf_r+0x124>
 8000ba6:	4653      	mov	r3, sl
 8000ba8:	7859      	ldrb	r1, [r3, #1]
 8000baa:	292a      	cmp	r1, #42	; 0x2a
 8000bac:	d13b      	bne.n	8000c26 <_vfiprintf_r+0x29a>
 8000bae:	9b07      	ldr	r3, [sp, #28]
 8000bb0:	1d1a      	adds	r2, r3, #4
 8000bb2:	9207      	str	r2, [sp, #28]
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	7891      	ldrb	r1, [r2, #2]
 8000bb8:	1cd6      	adds	r6, r2, #3
 8000bba:	2202      	movs	r2, #2
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	44e2      	add	sl, ip
 8000bc2:	606b      	str	r3, [r5, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db00      	blt.n	8000bca <_vfiprintf_r+0x23e>
 8000bc8:	e772      	b.n	8000ab0 <_vfiprintf_r+0x124>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	425b      	negs	r3, r3
 8000bce:	606b      	str	r3, [r5, #4]
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <_vfiprintf_r+0x2ec>)
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	4699      	mov	r9, r3
 8000bd8:	f000 ffa8 	bl	8001b2c <memchr>
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d000      	beq.n	8000be2 <_vfiprintf_r+0x256>
 8000be0:	e76f      	b.n	8000ac2 <_vfiprintf_r+0x136>
 8000be2:	46b1      	mov	r9, r6
 8000be4:	4656      	mov	r6, sl
 8000be6:	7831      	ldrb	r1, [r6, #0]
 8000be8:	2206      	movs	r2, #6
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <_vfiprintf_r+0x2f0>)
 8000bec:	7629      	strb	r1, [r5, #24]
 8000bee:	f000 ff9d 	bl	8001b2c <memchr>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d000      	beq.n	8000bf8 <_vfiprintf_r+0x26c>
 8000bf6:	e776      	b.n	8000ae6 <_vfiprintf_r+0x15a>
 8000bf8:	ab07      	add	r3, sp, #28
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	9a03      	ldr	r2, [sp, #12]
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <_vfiprintf_r+0x2f8>)
 8000c00:	0029      	movs	r1, r5
 8000c02:	9804      	ldr	r0, [sp, #16]
 8000c04:	f000 f8e4 	bl	8000dd0 <_printf_i>
 8000c08:	4683      	mov	fp, r0
 8000c0a:	e779      	b.n	8000b00 <_vfiprintf_r+0x174>
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	9b07      	ldr	r3, [sp, #28]
 8000c10:	3307      	adds	r3, #7
 8000c12:	4393      	bics	r3, r2
 8000c14:	3308      	adds	r3, #8
 8000c16:	9307      	str	r3, [sp, #28]
 8000c18:	e775      	b.n	8000b06 <_vfiprintf_r+0x17a>
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	60ea      	str	r2, [r5, #12]
 8000c1e:	2202      	movs	r2, #2
 8000c20:	4313      	orrs	r3, r2
 8000c22:	602b      	str	r3, [r5, #0]
 8000c24:	e73f      	b.n	8000aa6 <_vfiprintf_r+0x11a>
 8000c26:	000a      	movs	r2, r1
 8000c28:	2300      	movs	r3, #0
 8000c2a:	3a30      	subs	r2, #48	; 0x30
 8000c2c:	606b      	str	r3, [r5, #4]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	2a09      	cmp	r2, #9
 8000c32:	d901      	bls.n	8000c38 <_vfiprintf_r+0x2ac>
 8000c34:	e010      	b.n	8000c58 <_vfiprintf_r+0x2cc>
 8000c36:	001e      	movs	r6, r3
 8000c38:	0083      	lsls	r3, r0, #2
 8000c3a:	181b      	adds	r3, r3, r0
 8000c3c:	7871      	ldrb	r1, [r6, #1]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	1898      	adds	r0, r3, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	3a30      	subs	r2, #48	; 0x30
 8000c46:	1c73      	adds	r3, r6, #1
 8000c48:	2a09      	cmp	r2, #9
 8000c4a:	d9f4      	bls.n	8000c36 <_vfiprintf_r+0x2aa>
 8000c4c:	469a      	mov	sl, r3
 8000c4e:	3602      	adds	r6, #2
 8000c50:	6068      	str	r0, [r5, #4]
 8000c52:	e72d      	b.n	8000ab0 <_vfiprintf_r+0x124>
 8000c54:	464c      	mov	r4, r9
 8000c56:	e6f3      	b.n	8000a40 <_vfiprintf_r+0xb4>
 8000c58:	46b2      	mov	sl, r6
 8000c5a:	3601      	adds	r6, #1
 8000c5c:	e728      	b.n	8000ab0 <_vfiprintf_r+0x124>
 8000c5e:	9b04      	ldr	r3, [sp, #16]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	9303      	str	r3, [sp, #12]
 8000c64:	e6b3      	b.n	80009ce <_vfiprintf_r+0x42>
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	080031a4 	.word	0x080031a4
 8000c6c:	08003184 	.word	0x08003184
 8000c70:	08003164 	.word	0x08003164
 8000c74:	08003250 	.word	0x08003250
 8000c78:	08003258 	.word	0x08003258
 8000c7c:	0800325c 	.word	0x0800325c
 8000c80:	00000000 	.word	0x00000000
 8000c84:	08000945 	.word	0x08000945

08000c88 <vfiprintf>:
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	0004      	movs	r4, r0
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <vfiprintf+0x14>)
 8000c90:	6810      	ldr	r0, [r2, #0]
 8000c92:	000a      	movs	r2, r1
 8000c94:	0021      	movs	r1, r4
 8000c96:	f7ff fe79 	bl	800098c <_vfiprintf_r>
 8000c9a:	bd10      	pop	{r4, pc}
 8000c9c:	20000014 	.word	0x20000014

08000ca0 <_printf_common>:
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca2:	464f      	mov	r7, r9
 8000ca4:	4646      	mov	r6, r8
 8000ca6:	46d6      	mov	lr, sl
 8000ca8:	b5c0      	push	{r6, r7, lr}
 8000caa:	001f      	movs	r7, r3
 8000cac:	9b08      	ldr	r3, [sp, #32]
 8000cae:	4691      	mov	r9, r2
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	688a      	ldr	r2, [r1, #8]
 8000cb4:	690b      	ldr	r3, [r1, #16]
 8000cb6:	0006      	movs	r6, r0
 8000cb8:	000c      	movs	r4, r1
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	da00      	bge.n	8000cc0 <_printf_common+0x20>
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	2243      	movs	r2, #67	; 0x43
 8000cc6:	5ca2      	ldrb	r2, [r4, r2]
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d002      	beq.n	8000cd2 <_printf_common+0x32>
 8000ccc:	464a      	mov	r2, r9
 8000cce:	3301      	adds	r3, #1
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	069a      	lsls	r2, r3, #26
 8000cd6:	d55a      	bpl.n	8000d8e <_printf_common+0xee>
 8000cd8:	464b      	mov	r3, r9
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2006      	movs	r0, #6
 8000cde:	1c9a      	adds	r2, r3, #2
 8000ce0:	464b      	mov	r3, r9
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	4218      	tst	r0, r3
 8000cea:	d108      	bne.n	8000cfe <_printf_common+0x5e>
 8000cec:	68e1      	ldr	r1, [r4, #12]
 8000cee:	2500      	movs	r5, #0
 8000cf0:	1a8a      	subs	r2, r1, r2
 8000cf2:	2119      	movs	r1, #25
 8000cf4:	468a      	mov	sl, r1
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	44a2      	add	sl, r4
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	dc3f      	bgt.n	8000d7e <_printf_common+0xde>
 8000cfe:	2343      	movs	r3, #67	; 0x43
 8000d00:	5ce3      	ldrb	r3, [r4, r3]
 8000d02:	1e5a      	subs	r2, r3, #1
 8000d04:	4193      	sbcs	r3, r2
 8000d06:	068a      	lsls	r2, r1, #26
 8000d08:	d50a      	bpl.n	8000d20 <_printf_common+0x80>
 8000d0a:	2030      	movs	r0, #48	; 0x30
 8000d0c:	18e1      	adds	r1, r4, r3
 8000d0e:	3143      	adds	r1, #67	; 0x43
 8000d10:	7008      	strb	r0, [r1, #0]
 8000d12:	2145      	movs	r1, #69	; 0x45
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	5c61      	ldrb	r1, [r4, r1]
 8000d18:	18a2      	adds	r2, r4, r2
 8000d1a:	3243      	adds	r2, #67	; 0x43
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	7011      	strb	r1, [r2, #0]
 8000d20:	0022      	movs	r2, r4
 8000d22:	0039      	movs	r1, r7
 8000d24:	3243      	adds	r2, #67	; 0x43
 8000d26:	0030      	movs	r0, r6
 8000d28:	47c0      	blx	r8
 8000d2a:	1c43      	adds	r3, r0, #1
 8000d2c:	d019      	beq.n	8000d62 <_printf_common+0xc2>
 8000d2e:	2306      	movs	r3, #6
 8000d30:	6820      	ldr	r0, [r4, #0]
 8000d32:	68a2      	ldr	r2, [r4, #8]
 8000d34:	6921      	ldr	r1, [r4, #16]
 8000d36:	4003      	ands	r3, r0
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d030      	beq.n	8000d9e <_printf_common+0xfe>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	dd3a      	ble.n	8000db6 <_printf_common+0x116>
 8000d40:	2300      	movs	r3, #0
 8000d42:	4699      	mov	r9, r3
 8000d44:	1a52      	subs	r2, r2, r1
 8000d46:	4491      	add	r9, r2
 8000d48:	341a      	adds	r4, #26
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	e002      	b.n	8000d54 <_printf_common+0xb4>
 8000d4e:	3501      	adds	r5, #1
 8000d50:	454d      	cmp	r5, r9
 8000d52:	da30      	bge.n	8000db6 <_printf_common+0x116>
 8000d54:	2301      	movs	r3, #1
 8000d56:	0022      	movs	r2, r4
 8000d58:	0039      	movs	r1, r7
 8000d5a:	0030      	movs	r0, r6
 8000d5c:	47c0      	blx	r8
 8000d5e:	1c43      	adds	r3, r0, #1
 8000d60:	d1f5      	bne.n	8000d4e <_printf_common+0xae>
 8000d62:	2001      	movs	r0, #1
 8000d64:	4240      	negs	r0, r0
 8000d66:	bc1c      	pop	{r2, r3, r4}
 8000d68:	4690      	mov	r8, r2
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	46a2      	mov	sl, r4
 8000d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d70:	464b      	mov	r3, r9
 8000d72:	68e2      	ldr	r2, [r4, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3501      	adds	r5, #1
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	42ab      	cmp	r3, r5
 8000d7c:	dd20      	ble.n	8000dc0 <_printf_common+0x120>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4652      	mov	r2, sl
 8000d82:	0039      	movs	r1, r7
 8000d84:	0030      	movs	r0, r6
 8000d86:	47c0      	blx	r8
 8000d88:	1c43      	adds	r3, r0, #1
 8000d8a:	d1f1      	bne.n	8000d70 <_printf_common+0xd0>
 8000d8c:	e7e9      	b.n	8000d62 <_printf_common+0xc2>
 8000d8e:	2206      	movs	r2, #6
 8000d90:	421a      	tst	r2, r3
 8000d92:	d012      	beq.n	8000dba <_printf_common+0x11a>
 8000d94:	2343      	movs	r3, #67	; 0x43
 8000d96:	5ce3      	ldrb	r3, [r4, r3]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	4193      	sbcs	r3, r2
 8000d9c:	e7c0      	b.n	8000d20 <_printf_common+0x80>
 8000d9e:	464b      	mov	r3, r9
 8000da0:	68e0      	ldr	r0, [r4, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	1ac3      	subs	r3, r0, r3
 8000da6:	43d8      	mvns	r0, r3
 8000da8:	17c0      	asrs	r0, r0, #31
 8000daa:	4018      	ands	r0, r3
 8000dac:	4681      	mov	r9, r0
 8000dae:	428a      	cmp	r2, r1
 8000db0:	dcc8      	bgt.n	8000d44 <_printf_common+0xa4>
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	dcc8      	bgt.n	8000d48 <_printf_common+0xa8>
 8000db6:	2000      	movs	r0, #0
 8000db8:	e7d5      	b.n	8000d66 <_printf_common+0xc6>
 8000dba:	464a      	mov	r2, r9
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	e795      	b.n	8000cec <_printf_common+0x4c>
 8000dc0:	2343      	movs	r3, #67	; 0x43
 8000dc2:	6821      	ldr	r1, [r4, #0]
 8000dc4:	5ce3      	ldrb	r3, [r4, r3]
 8000dc6:	1e5a      	subs	r2, r3, #1
 8000dc8:	4193      	sbcs	r3, r2
 8000dca:	068a      	lsls	r2, r1, #26
 8000dcc:	d49d      	bmi.n	8000d0a <_printf_common+0x6a>
 8000dce:	e7a7      	b.n	8000d20 <_printf_common+0x80>

08000dd0 <_printf_i>:
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	4657      	mov	r7, sl
 8000dd4:	469a      	mov	sl, r3
 8000dd6:	2343      	movs	r3, #67	; 0x43
 8000dd8:	469c      	mov	ip, r3
 8000dda:	464e      	mov	r6, r9
 8000ddc:	4645      	mov	r5, r8
 8000dde:	46de      	mov	lr, fp
 8000de0:	448c      	add	ip, r1
 8000de2:	4663      	mov	r3, ip
 8000de4:	b5e0      	push	{r5, r6, r7, lr}
 8000de6:	b087      	sub	sp, #28
 8000de8:	9303      	str	r3, [sp, #12]
 8000dea:	7e0b      	ldrb	r3, [r1, #24]
 8000dec:	4691      	mov	r9, r2
 8000dee:	4680      	mov	r8, r0
 8000df0:	000c      	movs	r4, r1
 8000df2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000df4:	2b6e      	cmp	r3, #110	; 0x6e
 8000df6:	d100      	bne.n	8000dfa <_printf_i+0x2a>
 8000df8:	e0d8      	b.n	8000fac <_printf_i+0x1dc>
 8000dfa:	d800      	bhi.n	8000dfe <_printf_i+0x2e>
 8000dfc:	e071      	b.n	8000ee2 <_printf_i+0x112>
 8000dfe:	2b73      	cmp	r3, #115	; 0x73
 8000e00:	d100      	bne.n	8000e04 <_printf_i+0x34>
 8000e02:	e11a      	b.n	800103a <_printf_i+0x26a>
 8000e04:	d800      	bhi.n	8000e08 <_printf_i+0x38>
 8000e06:	e081      	b.n	8000f0c <_printf_i+0x13c>
 8000e08:	2b75      	cmp	r3, #117	; 0x75
 8000e0a:	d100      	bne.n	8000e0e <_printf_i+0x3e>
 8000e0c:	e0ff      	b.n	800100e <_printf_i+0x23e>
 8000e0e:	2b78      	cmp	r3, #120	; 0x78
 8000e10:	d000      	beq.n	8000e14 <_printf_i+0x44>
 8000e12:	e10b      	b.n	800102c <_printf_i+0x25c>
 8000e14:	680b      	ldr	r3, [r1, #0]
 8000e16:	2078      	movs	r0, #120	; 0x78
 8000e18:	2145      	movs	r1, #69	; 0x45
 8000e1a:	5460      	strb	r0, [r4, r1]
 8000e1c:	4994      	ldr	r1, [pc, #592]	; (8001070 <_printf_i+0x2a0>)
 8000e1e:	468b      	mov	fp, r1
 8000e20:	6811      	ldr	r1, [r2, #0]
 8000e22:	c940      	ldmia	r1!, {r6}
 8000e24:	6011      	str	r1, [r2, #0]
 8000e26:	0618      	lsls	r0, r3, #24
 8000e28:	d403      	bmi.n	8000e32 <_printf_i+0x62>
 8000e2a:	0658      	lsls	r0, r3, #25
 8000e2c:	d501      	bpl.n	8000e32 <_printf_i+0x62>
 8000e2e:	0436      	lsls	r6, r6, #16
 8000e30:	0c36      	lsrs	r6, r6, #16
 8000e32:	07da      	lsls	r2, r3, #31
 8000e34:	d502      	bpl.n	8000e3c <_printf_i+0x6c>
 8000e36:	2220      	movs	r2, #32
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	6023      	str	r3, [r4, #0]
 8000e3c:	2710      	movs	r7, #16
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d100      	bne.n	8000e44 <_printf_i+0x74>
 8000e42:	e0c2      	b.n	8000fca <_printf_i+0x1fa>
 8000e44:	2343      	movs	r3, #67	; 0x43
 8000e46:	2200      	movs	r2, #0
 8000e48:	54e2      	strb	r2, [r4, r3]
 8000e4a:	6863      	ldr	r3, [r4, #4]
 8000e4c:	60a3      	str	r3, [r4, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da00      	bge.n	8000e54 <_printf_i+0x84>
 8000e52:	e0c5      	b.n	8000fe0 <_printf_i+0x210>
 8000e54:	2204      	movs	r2, #4
 8000e56:	6821      	ldr	r1, [r4, #0]
 8000e58:	4391      	bics	r1, r2
 8000e5a:	6021      	str	r1, [r4, #0]
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d000      	beq.n	8000e62 <_printf_i+0x92>
 8000e60:	e083      	b.n	8000f6a <_printf_i+0x19a>
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d000      	beq.n	8000e68 <_printf_i+0x98>
 8000e66:	e0bd      	b.n	8000fe4 <_printf_i+0x214>
 8000e68:	9d03      	ldr	r5, [sp, #12]
 8000e6a:	2f08      	cmp	r7, #8
 8000e6c:	d100      	bne.n	8000e70 <_printf_i+0xa0>
 8000e6e:	e08c      	b.n	8000f8a <_printf_i+0x1ba>
 8000e70:	9b03      	ldr	r3, [sp, #12]
 8000e72:	1b5b      	subs	r3, r3, r5
 8000e74:	6123      	str	r3, [r4, #16]
 8000e76:	4653      	mov	r3, sl
 8000e78:	aa05      	add	r2, sp, #20
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	0021      	movs	r1, r4
 8000e7e:	464b      	mov	r3, r9
 8000e80:	4640      	mov	r0, r8
 8000e82:	f7ff ff0d 	bl	8000ca0 <_printf_common>
 8000e86:	1c43      	adds	r3, r0, #1
 8000e88:	d022      	beq.n	8000ed0 <_printf_i+0x100>
 8000e8a:	6923      	ldr	r3, [r4, #16]
 8000e8c:	002a      	movs	r2, r5
 8000e8e:	4649      	mov	r1, r9
 8000e90:	4640      	mov	r0, r8
 8000e92:	47d0      	blx	sl
 8000e94:	1c43      	adds	r3, r0, #1
 8000e96:	d01b      	beq.n	8000ed0 <_printf_i+0x100>
 8000e98:	6822      	ldr	r2, [r4, #0]
 8000e9a:	9805      	ldr	r0, [sp, #20]
 8000e9c:	68e3      	ldr	r3, [r4, #12]
 8000e9e:	0792      	lsls	r2, r2, #30
 8000ea0:	d400      	bmi.n	8000ea4 <_printf_i+0xd4>
 8000ea2:	e07f      	b.n	8000fa4 <_printf_i+0x1d4>
 8000ea4:	1a1a      	subs	r2, r3, r0
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	dc00      	bgt.n	8000eac <_printf_i+0xdc>
 8000eaa:	e07b      	b.n	8000fa4 <_printf_i+0x1d4>
 8000eac:	0026      	movs	r6, r4
 8000eae:	2500      	movs	r5, #0
 8000eb0:	3619      	adds	r6, #25
 8000eb2:	e006      	b.n	8000ec2 <_printf_i+0xf2>
 8000eb4:	68e3      	ldr	r3, [r4, #12]
 8000eb6:	9805      	ldr	r0, [sp, #20]
 8000eb8:	3501      	adds	r5, #1
 8000eba:	1a1a      	subs	r2, r3, r0
 8000ebc:	42aa      	cmp	r2, r5
 8000ebe:	dc00      	bgt.n	8000ec2 <_printf_i+0xf2>
 8000ec0:	e070      	b.n	8000fa4 <_printf_i+0x1d4>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	0032      	movs	r2, r6
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	4640      	mov	r0, r8
 8000eca:	47d0      	blx	sl
 8000ecc:	1c43      	adds	r3, r0, #1
 8000ece:	d1f1      	bne.n	8000eb4 <_printf_i+0xe4>
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	4240      	negs	r0, r0
 8000ed4:	b007      	add	sp, #28
 8000ed6:	bc3c      	pop	{r2, r3, r4, r5}
 8000ed8:	4690      	mov	r8, r2
 8000eda:	4699      	mov	r9, r3
 8000edc:	46a2      	mov	sl, r4
 8000ede:	46ab      	mov	fp, r5
 8000ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee2:	2b63      	cmp	r3, #99	; 0x63
 8000ee4:	d100      	bne.n	8000ee8 <_printf_i+0x118>
 8000ee6:	e084      	b.n	8000ff2 <_printf_i+0x222>
 8000ee8:	d81f      	bhi.n	8000f2a <_printf_i+0x15a>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d069      	beq.n	8000fc2 <_printf_i+0x1f2>
 8000eee:	2b58      	cmp	r3, #88	; 0x58
 8000ef0:	d000      	beq.n	8000ef4 <_printf_i+0x124>
 8000ef2:	e09b      	b.n	800102c <_printf_i+0x25c>
 8000ef4:	2145      	movs	r1, #69	; 0x45
 8000ef6:	5463      	strb	r3, [r4, r1]
 8000ef8:	495e      	ldr	r1, [pc, #376]	; (8001074 <_printf_i+0x2a4>)
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	468b      	mov	fp, r1
 8000efe:	6811      	ldr	r1, [r2, #0]
 8000f00:	c940      	ldmia	r1!, {r6}
 8000f02:	6011      	str	r1, [r2, #0]
 8000f04:	0618      	lsls	r0, r3, #24
 8000f06:	d400      	bmi.n	8000f0a <_printf_i+0x13a>
 8000f08:	e78f      	b.n	8000e2a <_printf_i+0x5a>
 8000f0a:	e792      	b.n	8000e32 <_printf_i+0x62>
 8000f0c:	2b6f      	cmp	r3, #111	; 0x6f
 8000f0e:	d07e      	beq.n	800100e <_printf_i+0x23e>
 8000f10:	2b70      	cmp	r3, #112	; 0x70
 8000f12:	d000      	beq.n	8000f16 <_printf_i+0x146>
 8000f14:	e08a      	b.n	800102c <_printf_i+0x25c>
 8000f16:	2320      	movs	r3, #32
 8000f18:	6809      	ldr	r1, [r1, #0]
 8000f1a:	2078      	movs	r0, #120	; 0x78
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	2145      	movs	r1, #69	; 0x45
 8000f20:	6023      	str	r3, [r4, #0]
 8000f22:	5460      	strb	r0, [r4, r1]
 8000f24:	4952      	ldr	r1, [pc, #328]	; (8001070 <_printf_i+0x2a0>)
 8000f26:	468b      	mov	fp, r1
 8000f28:	e77a      	b.n	8000e20 <_printf_i+0x50>
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d001      	beq.n	8000f32 <_printf_i+0x162>
 8000f2e:	2b69      	cmp	r3, #105	; 0x69
 8000f30:	d17c      	bne.n	800102c <_printf_i+0x25c>
 8000f32:	6811      	ldr	r1, [r2, #0]
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	1d08      	adds	r0, r1, #4
 8000f38:	6010      	str	r0, [r2, #0]
 8000f3a:	061d      	lsls	r5, r3, #24
 8000f3c:	d54a      	bpl.n	8000fd4 <_printf_i+0x204>
 8000f3e:	680a      	ldr	r2, [r1, #0]
 8000f40:	0016      	movs	r6, r2
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	db03      	blt.n	8000f4e <_printf_i+0x17e>
 8000f46:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <_printf_i+0x2a4>)
 8000f48:	270a      	movs	r7, #10
 8000f4a:	469b      	mov	fp, r3
 8000f4c:	e77d      	b.n	8000e4a <_printf_i+0x7a>
 8000f4e:	2243      	movs	r2, #67	; 0x43
 8000f50:	212d      	movs	r1, #45	; 0x2d
 8000f52:	54a1      	strb	r1, [r4, r2]
 8000f54:	6862      	ldr	r2, [r4, #4]
 8000f56:	4276      	negs	r6, r6
 8000f58:	60a2      	str	r2, [r4, #8]
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	db02      	blt.n	8000f64 <_printf_i+0x194>
 8000f5e:	2204      	movs	r2, #4
 8000f60:	4393      	bics	r3, r2
 8000f62:	6023      	str	r3, [r4, #0]
 8000f64:	4b43      	ldr	r3, [pc, #268]	; (8001074 <_printf_i+0x2a4>)
 8000f66:	270a      	movs	r7, #10
 8000f68:	469b      	mov	fp, r3
 8000f6a:	9d03      	ldr	r5, [sp, #12]
 8000f6c:	e000      	b.n	8000f70 <_printf_i+0x1a0>
 8000f6e:	0006      	movs	r6, r0
 8000f70:	0039      	movs	r1, r7
 8000f72:	0030      	movs	r0, r6
 8000f74:	f7ff f9e4 	bl	8000340 <__aeabi_uidivmod>
 8000f78:	465b      	mov	r3, fp
 8000f7a:	5c5b      	ldrb	r3, [r3, r1]
 8000f7c:	3d01      	subs	r5, #1
 8000f7e:	702b      	strb	r3, [r5, #0]
 8000f80:	42be      	cmp	r6, r7
 8000f82:	d2f4      	bcs.n	8000f6e <_printf_i+0x19e>
 8000f84:	2f08      	cmp	r7, #8
 8000f86:	d000      	beq.n	8000f8a <_printf_i+0x1ba>
 8000f88:	e772      	b.n	8000e70 <_printf_i+0xa0>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	07db      	lsls	r3, r3, #31
 8000f8e:	d400      	bmi.n	8000f92 <_printf_i+0x1c2>
 8000f90:	e76e      	b.n	8000e70 <_printf_i+0xa0>
 8000f92:	6863      	ldr	r3, [r4, #4]
 8000f94:	6922      	ldr	r2, [r4, #16]
 8000f96:	4293      	cmp	r3, r2
 8000f98:	dd00      	ble.n	8000f9c <_printf_i+0x1cc>
 8000f9a:	e769      	b.n	8000e70 <_printf_i+0xa0>
 8000f9c:	2330      	movs	r3, #48	; 0x30
 8000f9e:	3d01      	subs	r5, #1
 8000fa0:	702b      	strb	r3, [r5, #0]
 8000fa2:	e765      	b.n	8000e70 <_printf_i+0xa0>
 8000fa4:	4298      	cmp	r0, r3
 8000fa6:	da95      	bge.n	8000ed4 <_printf_i+0x104>
 8000fa8:	0018      	movs	r0, r3
 8000faa:	e793      	b.n	8000ed4 <_printf_i+0x104>
 8000fac:	6813      	ldr	r3, [r2, #0]
 8000fae:	6809      	ldr	r1, [r1, #0]
 8000fb0:	1d1d      	adds	r5, r3, #4
 8000fb2:	6960      	ldr	r0, [r4, #20]
 8000fb4:	6015      	str	r5, [r2, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	060e      	lsls	r6, r1, #24
 8000fba:	d401      	bmi.n	8000fc0 <_printf_i+0x1f0>
 8000fbc:	0649      	lsls	r1, r1, #25
 8000fbe:	d44b      	bmi.n	8001058 <_printf_i+0x288>
 8000fc0:	6018      	str	r0, [r3, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9d03      	ldr	r5, [sp, #12]
 8000fc6:	6123      	str	r3, [r4, #16]
 8000fc8:	e755      	b.n	8000e76 <_printf_i+0xa6>
 8000fca:	2320      	movs	r3, #32
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	439a      	bics	r2, r3
 8000fd0:	6022      	str	r2, [r4, #0]
 8000fd2:	e737      	b.n	8000e44 <_printf_i+0x74>
 8000fd4:	065d      	lsls	r5, r3, #25
 8000fd6:	d5b2      	bpl.n	8000f3e <_printf_i+0x16e>
 8000fd8:	2200      	movs	r2, #0
 8000fda:	5e8e      	ldrsh	r6, [r1, r2]
 8000fdc:	0032      	movs	r2, r6
 8000fde:	e7b0      	b.n	8000f42 <_printf_i+0x172>
 8000fe0:	2e00      	cmp	r6, #0
 8000fe2:	d1c2      	bne.n	8000f6a <_printf_i+0x19a>
 8000fe4:	465b      	mov	r3, fp
 8000fe6:	0025      	movs	r5, r4
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	2342      	movs	r3, #66	; 0x42
 8000fec:	3542      	adds	r5, #66	; 0x42
 8000fee:	54e2      	strb	r2, [r4, r3]
 8000ff0:	e73b      	b.n	8000e6a <_printf_i+0x9a>
 8000ff2:	6813      	ldr	r3, [r2, #0]
 8000ff4:	0025      	movs	r5, r4
 8000ff6:	1d19      	adds	r1, r3, #4
 8000ff8:	6011      	str	r1, [r2, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2342      	movs	r3, #66	; 0x42
 8000ffe:	54e2      	strb	r2, [r4, r3]
 8001000:	3b41      	subs	r3, #65	; 0x41
 8001002:	3542      	adds	r5, #66	; 0x42
 8001004:	6123      	str	r3, [r4, #16]
 8001006:	2343      	movs	r3, #67	; 0x43
 8001008:	2200      	movs	r2, #0
 800100a:	54e2      	strb	r2, [r4, r3]
 800100c:	e733      	b.n	8000e76 <_printf_i+0xa6>
 800100e:	6811      	ldr	r1, [r2, #0]
 8001010:	6820      	ldr	r0, [r4, #0]
 8001012:	1d0d      	adds	r5, r1, #4
 8001014:	6015      	str	r5, [r2, #0]
 8001016:	0606      	lsls	r6, r0, #24
 8001018:	d401      	bmi.n	800101e <_printf_i+0x24e>
 800101a:	0640      	lsls	r0, r0, #25
 800101c:	d41e      	bmi.n	800105c <_printf_i+0x28c>
 800101e:	680e      	ldr	r6, [r1, #0]
 8001020:	2b6f      	cmp	r3, #111	; 0x6f
 8001022:	d01d      	beq.n	8001060 <_printf_i+0x290>
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_printf_i+0x2a4>)
 8001026:	270a      	movs	r7, #10
 8001028:	469b      	mov	fp, r3
 800102a:	e70b      	b.n	8000e44 <_printf_i+0x74>
 800102c:	2242      	movs	r2, #66	; 0x42
 800102e:	0025      	movs	r5, r4
 8001030:	54a3      	strb	r3, [r4, r2]
 8001032:	2301      	movs	r3, #1
 8001034:	3542      	adds	r5, #66	; 0x42
 8001036:	6123      	str	r3, [r4, #16]
 8001038:	e7e5      	b.n	8001006 <_printf_i+0x236>
 800103a:	6813      	ldr	r3, [r2, #0]
 800103c:	1d19      	adds	r1, r3, #4
 800103e:	6011      	str	r1, [r2, #0]
 8001040:	681d      	ldr	r5, [r3, #0]
 8001042:	6862      	ldr	r2, [r4, #4]
 8001044:	2100      	movs	r1, #0
 8001046:	0028      	movs	r0, r5
 8001048:	f000 fd70 	bl	8001b2c <memchr>
 800104c:	2800      	cmp	r0, #0
 800104e:	d00b      	beq.n	8001068 <_printf_i+0x298>
 8001050:	1b40      	subs	r0, r0, r5
 8001052:	6060      	str	r0, [r4, #4]
 8001054:	6120      	str	r0, [r4, #16]
 8001056:	e7d6      	b.n	8001006 <_printf_i+0x236>
 8001058:	8018      	strh	r0, [r3, #0]
 800105a:	e7b2      	b.n	8000fc2 <_printf_i+0x1f2>
 800105c:	880e      	ldrh	r6, [r1, #0]
 800105e:	e7df      	b.n	8001020 <_printf_i+0x250>
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <_printf_i+0x2a4>)
 8001062:	2708      	movs	r7, #8
 8001064:	469b      	mov	fp, r3
 8001066:	e6ed      	b.n	8000e44 <_printf_i+0x74>
 8001068:	6860      	ldr	r0, [r4, #4]
 800106a:	6120      	str	r0, [r4, #16]
 800106c:	e7cb      	b.n	8001006 <_printf_i+0x236>
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	08003278 	.word	0x08003278
 8001074:	08003264 	.word	0x08003264

08001078 <_sbrk_r>:
 8001078:	2300      	movs	r3, #0
 800107a:	b570      	push	{r4, r5, r6, lr}
 800107c:	4c06      	ldr	r4, [pc, #24]	; (8001098 <_sbrk_r+0x20>)
 800107e:	0005      	movs	r5, r0
 8001080:	0008      	movs	r0, r1
 8001082:	6023      	str	r3, [r4, #0]
 8001084:	f001 f874 	bl	8002170 <_sbrk>
 8001088:	1c43      	adds	r3, r0, #1
 800108a:	d000      	beq.n	800108e <_sbrk_r+0x16>
 800108c:	bd70      	pop	{r4, r5, r6, pc}
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0fb      	beq.n	800108c <_sbrk_r+0x14>
 8001094:	602b      	str	r3, [r5, #0]
 8001096:	e7f9      	b.n	800108c <_sbrk_r+0x14>
 8001098:	20000218 	.word	0x20000218

0800109c <__swbuf_r>:
 800109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109e:	0005      	movs	r5, r0
 80010a0:	000e      	movs	r6, r1
 80010a2:	0014      	movs	r4, r2
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d002      	beq.n	80010ae <__swbuf_r+0x12>
 80010a8:	6983      	ldr	r3, [r0, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d029      	beq.n	8001102 <__swbuf_r+0x66>
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <__swbuf_r+0xc8>)
 80010b0:	429c      	cmp	r4, r3
 80010b2:	d02b      	beq.n	800110c <__swbuf_r+0x70>
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <__swbuf_r+0xcc>)
 80010b6:	429c      	cmp	r4, r3
 80010b8:	d046      	beq.n	8001148 <__swbuf_r+0xac>
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <__swbuf_r+0xd0>)
 80010bc:	429c      	cmp	r4, r3
 80010be:	d04e      	beq.n	800115e <__swbuf_r+0xc2>
 80010c0:	69a3      	ldr	r3, [r4, #24]
 80010c2:	60a3      	str	r3, [r4, #8]
 80010c4:	89a3      	ldrh	r3, [r4, #12]
 80010c6:	071b      	lsls	r3, r3, #28
 80010c8:	d526      	bpl.n	8001118 <__swbuf_r+0x7c>
 80010ca:	6923      	ldr	r3, [r4, #16]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d023      	beq.n	8001118 <__swbuf_r+0x7c>
 80010d0:	22ff      	movs	r2, #255	; 0xff
 80010d2:	b2f7      	uxtb	r7, r6
 80010d4:	6961      	ldr	r1, [r4, #20]
 80010d6:	4016      	ands	r6, r2
 80010d8:	6822      	ldr	r2, [r4, #0]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	4299      	cmp	r1, r3
 80010de:	dd2a      	ble.n	8001136 <__swbuf_r+0x9a>
 80010e0:	3301      	adds	r3, #1
 80010e2:	68a1      	ldr	r1, [r4, #8]
 80010e4:	3901      	subs	r1, #1
 80010e6:	60a1      	str	r1, [r4, #8]
 80010e8:	1c51      	adds	r1, r2, #1
 80010ea:	6021      	str	r1, [r4, #0]
 80010ec:	7017      	strb	r7, [r2, #0]
 80010ee:	6962      	ldr	r2, [r4, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d02b      	beq.n	800114c <__swbuf_r+0xb0>
 80010f4:	89a3      	ldrh	r3, [r4, #12]
 80010f6:	07db      	lsls	r3, r3, #31
 80010f8:	d501      	bpl.n	80010fe <__swbuf_r+0x62>
 80010fa:	2e0a      	cmp	r6, #10
 80010fc:	d026      	beq.n	800114c <__swbuf_r+0xb0>
 80010fe:	0030      	movs	r0, r6
 8001100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001102:	f000 faa3 	bl	800164c <__sinit>
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <__swbuf_r+0xc8>)
 8001108:	429c      	cmp	r4, r3
 800110a:	d1d3      	bne.n	80010b4 <__swbuf_r+0x18>
 800110c:	686c      	ldr	r4, [r5, #4]
 800110e:	69a3      	ldr	r3, [r4, #24]
 8001110:	60a3      	str	r3, [r4, #8]
 8001112:	89a3      	ldrh	r3, [r4, #12]
 8001114:	071b      	lsls	r3, r3, #28
 8001116:	d4d8      	bmi.n	80010ca <__swbuf_r+0x2e>
 8001118:	0021      	movs	r1, r4
 800111a:	0028      	movs	r0, r5
 800111c:	f000 f834 	bl	8001188 <__swsetup_r>
 8001120:	2800      	cmp	r0, #0
 8001122:	d119      	bne.n	8001158 <__swbuf_r+0xbc>
 8001124:	22ff      	movs	r2, #255	; 0xff
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	b2f7      	uxtb	r7, r6
 800112a:	6961      	ldr	r1, [r4, #20]
 800112c:	4016      	ands	r6, r2
 800112e:	6822      	ldr	r2, [r4, #0]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4299      	cmp	r1, r3
 8001134:	dcd4      	bgt.n	80010e0 <__swbuf_r+0x44>
 8001136:	0021      	movs	r1, r4
 8001138:	0028      	movs	r0, r5
 800113a:	f000 f94d 	bl	80013d8 <_fflush_r>
 800113e:	2800      	cmp	r0, #0
 8001140:	d10a      	bne.n	8001158 <__swbuf_r+0xbc>
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	e7cc      	b.n	80010e2 <__swbuf_r+0x46>
 8001148:	68ac      	ldr	r4, [r5, #8]
 800114a:	e7b9      	b.n	80010c0 <__swbuf_r+0x24>
 800114c:	0021      	movs	r1, r4
 800114e:	0028      	movs	r0, r5
 8001150:	f000 f942 	bl	80013d8 <_fflush_r>
 8001154:	2800      	cmp	r0, #0
 8001156:	d0d2      	beq.n	80010fe <__swbuf_r+0x62>
 8001158:	2601      	movs	r6, #1
 800115a:	4276      	negs	r6, r6
 800115c:	e7cf      	b.n	80010fe <__swbuf_r+0x62>
 800115e:	68ec      	ldr	r4, [r5, #12]
 8001160:	e7ae      	b.n	80010c0 <__swbuf_r+0x24>
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	080031a4 	.word	0x080031a4
 8001168:	08003184 	.word	0x08003184
 800116c:	08003164 	.word	0x08003164

08001170 <__swbuf>:
 8001170:	b510      	push	{r4, lr}
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__swbuf+0x14>)
 8001174:	000a      	movs	r2, r1
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0001      	movs	r1, r0
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff ff8e 	bl	800109c <__swbuf_r>
 8001180:	bd10      	pop	{r4, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	20000014 	.word	0x20000014

08001188 <__swsetup_r>:
 8001188:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <__swsetup_r+0xfc>)
 800118a:	b570      	push	{r4, r5, r6, lr}
 800118c:	681d      	ldr	r5, [r3, #0]
 800118e:	0006      	movs	r6, r0
 8001190:	000c      	movs	r4, r1
 8001192:	2d00      	cmp	r5, #0
 8001194:	d002      	beq.n	800119c <__swsetup_r+0x14>
 8001196:	69ab      	ldr	r3, [r5, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01b      	beq.n	80011d4 <__swsetup_r+0x4c>
 800119c:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <__swsetup_r+0x100>)
 800119e:	429c      	cmp	r4, r3
 80011a0:	d01e      	beq.n	80011e0 <__swsetup_r+0x58>
 80011a2:	4b3a      	ldr	r3, [pc, #232]	; (800128c <__swsetup_r+0x104>)
 80011a4:	429c      	cmp	r4, r3
 80011a6:	d04c      	beq.n	8001242 <__swsetup_r+0xba>
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <__swsetup_r+0x108>)
 80011aa:	429c      	cmp	r4, r3
 80011ac:	d060      	beq.n	8001270 <__swsetup_r+0xe8>
 80011ae:	230c      	movs	r3, #12
 80011b0:	5ee2      	ldrsh	r2, [r4, r3]
 80011b2:	b293      	uxth	r3, r2
 80011b4:	0719      	lsls	r1, r3, #28
 80011b6:	d519      	bpl.n	80011ec <__swsetup_r+0x64>
 80011b8:	6921      	ldr	r1, [r4, #16]
 80011ba:	2900      	cmp	r1, #0
 80011bc:	d021      	beq.n	8001202 <__swsetup_r+0x7a>
 80011be:	07da      	lsls	r2, r3, #31
 80011c0:	d52e      	bpl.n	8001220 <__swsetup_r+0x98>
 80011c2:	2300      	movs	r3, #0
 80011c4:	60a3      	str	r3, [r4, #8]
 80011c6:	6963      	ldr	r3, [r4, #20]
 80011c8:	2000      	movs	r0, #0
 80011ca:	425b      	negs	r3, r3
 80011cc:	61a3      	str	r3, [r4, #24]
 80011ce:	2900      	cmp	r1, #0
 80011d0:	d02e      	beq.n	8001230 <__swsetup_r+0xa8>
 80011d2:	bd70      	pop	{r4, r5, r6, pc}
 80011d4:	0028      	movs	r0, r5
 80011d6:	f000 fa39 	bl	800164c <__sinit>
 80011da:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <__swsetup_r+0x100>)
 80011dc:	429c      	cmp	r4, r3
 80011de:	d1e0      	bne.n	80011a2 <__swsetup_r+0x1a>
 80011e0:	686c      	ldr	r4, [r5, #4]
 80011e2:	230c      	movs	r3, #12
 80011e4:	5ee2      	ldrsh	r2, [r4, r3]
 80011e6:	b293      	uxth	r3, r2
 80011e8:	0719      	lsls	r1, r3, #28
 80011ea:	d4e5      	bmi.n	80011b8 <__swsetup_r+0x30>
 80011ec:	06d9      	lsls	r1, r3, #27
 80011ee:	d541      	bpl.n	8001274 <__swsetup_r+0xec>
 80011f0:	075b      	lsls	r3, r3, #29
 80011f2:	d428      	bmi.n	8001246 <__swsetup_r+0xbe>
 80011f4:	6921      	ldr	r1, [r4, #16]
 80011f6:	2308      	movs	r3, #8
 80011f8:	4313      	orrs	r3, r2
 80011fa:	81a3      	strh	r3, [r4, #12]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	2900      	cmp	r1, #0
 8001200:	d1dd      	bne.n	80011be <__swsetup_r+0x36>
 8001202:	22a0      	movs	r2, #160	; 0xa0
 8001204:	2080      	movs	r0, #128	; 0x80
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	0080      	lsls	r0, r0, #2
 800120a:	401a      	ands	r2, r3
 800120c:	4282      	cmp	r2, r0
 800120e:	d0d6      	beq.n	80011be <__swsetup_r+0x36>
 8001210:	0021      	movs	r1, r4
 8001212:	0030      	movs	r0, r6
 8001214:	f000 fc42 	bl	8001a9c <__smakebuf_r>
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	6921      	ldr	r1, [r4, #16]
 800121c:	07da      	lsls	r2, r3, #31
 800121e:	d4d0      	bmi.n	80011c2 <__swsetup_r+0x3a>
 8001220:	2200      	movs	r2, #0
 8001222:	079b      	lsls	r3, r3, #30
 8001224:	d400      	bmi.n	8001228 <__swsetup_r+0xa0>
 8001226:	6962      	ldr	r2, [r4, #20]
 8001228:	60a2      	str	r2, [r4, #8]
 800122a:	2000      	movs	r0, #0
 800122c:	2900      	cmp	r1, #0
 800122e:	d1d0      	bne.n	80011d2 <__swsetup_r+0x4a>
 8001230:	220c      	movs	r2, #12
 8001232:	5ea3      	ldrsh	r3, [r4, r2]
 8001234:	061a      	lsls	r2, r3, #24
 8001236:	d5cc      	bpl.n	80011d2 <__swsetup_r+0x4a>
 8001238:	2240      	movs	r2, #64	; 0x40
 800123a:	4313      	orrs	r3, r2
 800123c:	81a3      	strh	r3, [r4, #12]
 800123e:	3801      	subs	r0, #1
 8001240:	e7c7      	b.n	80011d2 <__swsetup_r+0x4a>
 8001242:	68ac      	ldr	r4, [r5, #8]
 8001244:	e7b3      	b.n	80011ae <__swsetup_r+0x26>
 8001246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001248:	2900      	cmp	r1, #0
 800124a:	d00a      	beq.n	8001262 <__swsetup_r+0xda>
 800124c:	0023      	movs	r3, r4
 800124e:	3344      	adds	r3, #68	; 0x44
 8001250:	4299      	cmp	r1, r3
 8001252:	d004      	beq.n	800125e <__swsetup_r+0xd6>
 8001254:	0030      	movs	r0, r6
 8001256:	f7ff faa5 	bl	80007a4 <_free_r>
 800125a:	230c      	movs	r3, #12
 800125c:	5ee2      	ldrsh	r2, [r4, r3]
 800125e:	2300      	movs	r3, #0
 8001260:	6363      	str	r3, [r4, #52]	; 0x34
 8001262:	2324      	movs	r3, #36	; 0x24
 8001264:	439a      	bics	r2, r3
 8001266:	2300      	movs	r3, #0
 8001268:	6921      	ldr	r1, [r4, #16]
 800126a:	6063      	str	r3, [r4, #4]
 800126c:	6021      	str	r1, [r4, #0]
 800126e:	e7c2      	b.n	80011f6 <__swsetup_r+0x6e>
 8001270:	68ec      	ldr	r4, [r5, #12]
 8001272:	e79c      	b.n	80011ae <__swsetup_r+0x26>
 8001274:	2309      	movs	r3, #9
 8001276:	6033      	str	r3, [r6, #0]
 8001278:	2340      	movs	r3, #64	; 0x40
 800127a:	2001      	movs	r0, #1
 800127c:	431a      	orrs	r2, r3
 800127e:	81a2      	strh	r2, [r4, #12]
 8001280:	4240      	negs	r0, r0
 8001282:	e7a6      	b.n	80011d2 <__swsetup_r+0x4a>
 8001284:	20000014 	.word	0x20000014
 8001288:	080031a4 	.word	0x080031a4
 800128c:	08003184 	.word	0x08003184
 8001290:	08003164 	.word	0x08003164

08001294 <abort>:
 8001294:	b510      	push	{r4, lr}
 8001296:	2006      	movs	r0, #6
 8001298:	f000 fdf4 	bl	8001e84 <raise>
 800129c:	2001      	movs	r0, #1
 800129e:	f000 ff7d 	bl	800219c <_exit>
 80012a2:	46c0      	nop			; (mov r8, r8)

080012a4 <__sflush_r>:
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	46c6      	mov	lr, r8
 80012a8:	b500      	push	{lr}
 80012aa:	898b      	ldrh	r3, [r1, #12]
 80012ac:	4680      	mov	r8, r0
 80012ae:	000c      	movs	r4, r1
 80012b0:	071a      	lsls	r2, r3, #28
 80012b2:	d445      	bmi.n	8001340 <__sflush_r+0x9c>
 80012b4:	684a      	ldr	r2, [r1, #4]
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	dd63      	ble.n	8001382 <__sflush_r+0xde>
 80012ba:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80012bc:	2d00      	cmp	r5, #0
 80012be:	d03b      	beq.n	8001338 <__sflush_r+0x94>
 80012c0:	4642      	mov	r2, r8
 80012c2:	4641      	mov	r1, r8
 80012c4:	6816      	ldr	r6, [r2, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	600a      	str	r2, [r1, #0]
 80012ca:	6a21      	ldr	r1, [r4, #32]
 80012cc:	04da      	lsls	r2, r3, #19
 80012ce:	d45c      	bmi.n	800138a <__sflush_r+0xe6>
 80012d0:	2301      	movs	r3, #1
 80012d2:	2200      	movs	r2, #0
 80012d4:	4640      	mov	r0, r8
 80012d6:	47a8      	blx	r5
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d061      	beq.n	80013a0 <__sflush_r+0xfc>
 80012dc:	89a3      	ldrh	r3, [r4, #12]
 80012de:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80012e0:	6a21      	ldr	r1, [r4, #32]
 80012e2:	075b      	lsls	r3, r3, #29
 80012e4:	d506      	bpl.n	80012f4 <__sflush_r+0x50>
 80012e6:	6863      	ldr	r3, [r4, #4]
 80012e8:	1ac0      	subs	r0, r0, r3
 80012ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <__sflush_r+0x50>
 80012f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f2:	1ac0      	subs	r0, r0, r3
 80012f4:	2300      	movs	r3, #0
 80012f6:	0002      	movs	r2, r0
 80012f8:	4640      	mov	r0, r8
 80012fa:	47a8      	blx	r5
 80012fc:	1c43      	adds	r3, r0, #1
 80012fe:	d146      	bne.n	800138e <__sflush_r+0xea>
 8001300:	4643      	mov	r3, r8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	210c      	movs	r1, #12
 8001306:	5e62      	ldrsh	r2, [r4, r1]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d056      	beq.n	80013ba <__sflush_r+0x116>
 800130c:	2b1d      	cmp	r3, #29
 800130e:	d001      	beq.n	8001314 <__sflush_r+0x70>
 8001310:	2b16      	cmp	r3, #22
 8001312:	d15d      	bne.n	80013d0 <__sflush_r+0x12c>
 8001314:	2300      	movs	r3, #0
 8001316:	6063      	str	r3, [r4, #4]
 8001318:	6923      	ldr	r3, [r4, #16]
 800131a:	6023      	str	r3, [r4, #0]
 800131c:	4643      	mov	r3, r8
 800131e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001320:	601e      	str	r6, [r3, #0]
 8001322:	2900      	cmp	r1, #0
 8001324:	d008      	beq.n	8001338 <__sflush_r+0x94>
 8001326:	0023      	movs	r3, r4
 8001328:	3344      	adds	r3, #68	; 0x44
 800132a:	4299      	cmp	r1, r3
 800132c:	d002      	beq.n	8001334 <__sflush_r+0x90>
 800132e:	4640      	mov	r0, r8
 8001330:	f7ff fa38 	bl	80007a4 <_free_r>
 8001334:	2300      	movs	r3, #0
 8001336:	6363      	str	r3, [r4, #52]	; 0x34
 8001338:	2000      	movs	r0, #0
 800133a:	bc04      	pop	{r2}
 800133c:	4690      	mov	r8, r2
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001340:	690e      	ldr	r6, [r1, #16]
 8001342:	2e00      	cmp	r6, #0
 8001344:	d0f8      	beq.n	8001338 <__sflush_r+0x94>
 8001346:	680a      	ldr	r2, [r1, #0]
 8001348:	600e      	str	r6, [r1, #0]
 800134a:	1b95      	subs	r5, r2, r6
 800134c:	2200      	movs	r2, #0
 800134e:	079b      	lsls	r3, r3, #30
 8001350:	d100      	bne.n	8001354 <__sflush_r+0xb0>
 8001352:	694a      	ldr	r2, [r1, #20]
 8001354:	60a2      	str	r2, [r4, #8]
 8001356:	2d00      	cmp	r5, #0
 8001358:	dc04      	bgt.n	8001364 <__sflush_r+0xc0>
 800135a:	e7ed      	b.n	8001338 <__sflush_r+0x94>
 800135c:	1836      	adds	r6, r6, r0
 800135e:	1a2d      	subs	r5, r5, r0
 8001360:	2d00      	cmp	r5, #0
 8001362:	dde9      	ble.n	8001338 <__sflush_r+0x94>
 8001364:	002b      	movs	r3, r5
 8001366:	0032      	movs	r2, r6
 8001368:	6a21      	ldr	r1, [r4, #32]
 800136a:	4640      	mov	r0, r8
 800136c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800136e:	47b8      	blx	r7
 8001370:	2800      	cmp	r0, #0
 8001372:	dcf3      	bgt.n	800135c <__sflush_r+0xb8>
 8001374:	2240      	movs	r2, #64	; 0x40
 8001376:	2001      	movs	r0, #1
 8001378:	89a3      	ldrh	r3, [r4, #12]
 800137a:	4240      	negs	r0, r0
 800137c:	4313      	orrs	r3, r2
 800137e:	81a3      	strh	r3, [r4, #12]
 8001380:	e7db      	b.n	800133a <__sflush_r+0x96>
 8001382:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001384:	2a00      	cmp	r2, #0
 8001386:	dc98      	bgt.n	80012ba <__sflush_r+0x16>
 8001388:	e7d6      	b.n	8001338 <__sflush_r+0x94>
 800138a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800138c:	e7a9      	b.n	80012e2 <__sflush_r+0x3e>
 800138e:	2300      	movs	r3, #0
 8001390:	6063      	str	r3, [r4, #4]
 8001392:	6923      	ldr	r3, [r4, #16]
 8001394:	6023      	str	r3, [r4, #0]
 8001396:	89a3      	ldrh	r3, [r4, #12]
 8001398:	04db      	lsls	r3, r3, #19
 800139a:	d5bf      	bpl.n	800131c <__sflush_r+0x78>
 800139c:	6560      	str	r0, [r4, #84]	; 0x54
 800139e:	e7bd      	b.n	800131c <__sflush_r+0x78>
 80013a0:	4643      	mov	r3, r8
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d099      	beq.n	80012dc <__sflush_r+0x38>
 80013a8:	2b1d      	cmp	r3, #29
 80013aa:	d00d      	beq.n	80013c8 <__sflush_r+0x124>
 80013ac:	2b16      	cmp	r3, #22
 80013ae:	d00b      	beq.n	80013c8 <__sflush_r+0x124>
 80013b0:	2240      	movs	r2, #64	; 0x40
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	81a3      	strh	r3, [r4, #12]
 80013b8:	e7bf      	b.n	800133a <__sflush_r+0x96>
 80013ba:	6063      	str	r3, [r4, #4]
 80013bc:	6923      	ldr	r3, [r4, #16]
 80013be:	6023      	str	r3, [r4, #0]
 80013c0:	04d3      	lsls	r3, r2, #19
 80013c2:	d5ab      	bpl.n	800131c <__sflush_r+0x78>
 80013c4:	6560      	str	r0, [r4, #84]	; 0x54
 80013c6:	e7a9      	b.n	800131c <__sflush_r+0x78>
 80013c8:	4643      	mov	r3, r8
 80013ca:	2000      	movs	r0, #0
 80013cc:	601e      	str	r6, [r3, #0]
 80013ce:	e7b4      	b.n	800133a <__sflush_r+0x96>
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	431a      	orrs	r2, r3
 80013d4:	81a2      	strh	r2, [r4, #12]
 80013d6:	e7b0      	b.n	800133a <__sflush_r+0x96>

080013d8 <_fflush_r>:
 80013d8:	690b      	ldr	r3, [r1, #16]
 80013da:	b570      	push	{r4, r5, r6, lr}
 80013dc:	0005      	movs	r5, r0
 80013de:	000c      	movs	r4, r1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d016      	beq.n	8001412 <_fflush_r+0x3a>
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d002      	beq.n	80013ee <_fflush_r+0x16>
 80013e8:	6983      	ldr	r3, [r0, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <_fflush_r+0x42>
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <_fflush_r+0x50>)
 80013f0:	429c      	cmp	r4, r3
 80013f2:	d010      	beq.n	8001416 <_fflush_r+0x3e>
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <_fflush_r+0x54>)
 80013f6:	429c      	cmp	r4, r3
 80013f8:	d012      	beq.n	8001420 <_fflush_r+0x48>
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <_fflush_r+0x58>)
 80013fc:	429c      	cmp	r4, r3
 80013fe:	d011      	beq.n	8001424 <_fflush_r+0x4c>
 8001400:	220c      	movs	r2, #12
 8001402:	5ea3      	ldrsh	r3, [r4, r2]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <_fflush_r+0x3a>
 8001408:	0021      	movs	r1, r4
 800140a:	0028      	movs	r0, r5
 800140c:	f7ff ff4a 	bl	80012a4 <__sflush_r>
 8001410:	e000      	b.n	8001414 <_fflush_r+0x3c>
 8001412:	2000      	movs	r0, #0
 8001414:	bd70      	pop	{r4, r5, r6, pc}
 8001416:	686c      	ldr	r4, [r5, #4]
 8001418:	e7f2      	b.n	8001400 <_fflush_r+0x28>
 800141a:	f000 f917 	bl	800164c <__sinit>
 800141e:	e7e6      	b.n	80013ee <_fflush_r+0x16>
 8001420:	68ac      	ldr	r4, [r5, #8]
 8001422:	e7ed      	b.n	8001400 <_fflush_r+0x28>
 8001424:	68ec      	ldr	r4, [r5, #12]
 8001426:	e7eb      	b.n	8001400 <_fflush_r+0x28>
 8001428:	080031a4 	.word	0x080031a4
 800142c:	08003184 	.word	0x08003184
 8001430:	08003164 	.word	0x08003164

08001434 <fflush>:
 8001434:	b510      	push	{r4, lr}
 8001436:	1e01      	subs	r1, r0, #0
 8001438:	d004      	beq.n	8001444 <fflush+0x10>
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <fflush+0x1c>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	f7ff ffcb 	bl	80013d8 <_fflush_r>
 8001442:	bd10      	pop	{r4, pc}
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <fflush+0x20>)
 8001446:	4904      	ldr	r1, [pc, #16]	; (8001458 <fflush+0x24>)
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	f000 fad9 	bl	8001a00 <_fwalk_reent>
 800144e:	e7f8      	b.n	8001442 <fflush+0xe>
 8001450:	20000014 	.word	0x20000014
 8001454:	08003160 	.word	0x08003160
 8001458:	080013d9 	.word	0x080013d9

0800145c <__fp_lock>:
 800145c:	2000      	movs	r0, #0
 800145e:	4770      	bx	lr

08001460 <_cleanup_r>:
 8001460:	b510      	push	{r4, lr}
 8001462:	4902      	ldr	r1, [pc, #8]	; (800146c <_cleanup_r+0xc>)
 8001464:	f000 facc 	bl	8001a00 <_fwalk_reent>
 8001468:	bd10      	pop	{r4, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	080013d9 	.word	0x080013d9

08001470 <__fp_unlock>:
 8001470:	2000      	movs	r0, #0
 8001472:	4770      	bx	lr

08001474 <__sfmoreglue>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	2468      	movs	r4, #104	; 0x68
 8001478:	1e4a      	subs	r2, r1, #1
 800147a:	4354      	muls	r4, r2
 800147c:	000e      	movs	r6, r1
 800147e:	0021      	movs	r1, r4
 8001480:	3174      	adds	r1, #116	; 0x74
 8001482:	f7ff f9e5 	bl	8000850 <_malloc_r>
 8001486:	1e05      	subs	r5, r0, #0
 8001488:	d009      	beq.n	800149e <__sfmoreglue+0x2a>
 800148a:	2300      	movs	r3, #0
 800148c:	0022      	movs	r2, r4
 800148e:	6003      	str	r3, [r0, #0]
 8001490:	6046      	str	r6, [r0, #4]
 8001492:	300c      	adds	r0, #12
 8001494:	60a8      	str	r0, [r5, #8]
 8001496:	3268      	adds	r2, #104	; 0x68
 8001498:	2100      	movs	r1, #0
 800149a:	f7ff f863 	bl	8000564 <memset>
 800149e:	0028      	movs	r0, r5
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)

080014a4 <__sfp>:
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <__sfp+0x7c>)
 80014a6:	b570      	push	{r4, r5, r6, lr}
 80014a8:	681d      	ldr	r5, [r3, #0]
 80014aa:	0006      	movs	r6, r0
 80014ac:	69ab      	ldr	r3, [r5, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d027      	beq.n	8001502 <__sfp+0x5e>
 80014b2:	3548      	adds	r5, #72	; 0x48
 80014b4:	686b      	ldr	r3, [r5, #4]
 80014b6:	68ac      	ldr	r4, [r5, #8]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	d503      	bpl.n	80014c4 <__sfp+0x20>
 80014bc:	e01c      	b.n	80014f8 <__sfp+0x54>
 80014be:	3468      	adds	r4, #104	; 0x68
 80014c0:	3b01      	subs	r3, #1
 80014c2:	d319      	bcc.n	80014f8 <__sfp+0x54>
 80014c4:	210c      	movs	r1, #12
 80014c6:	5e62      	ldrsh	r2, [r4, r1]
 80014c8:	2a00      	cmp	r2, #0
 80014ca:	d1f8      	bne.n	80014be <__sfp+0x1a>
 80014cc:	2500      	movs	r5, #0
 80014ce:	0020      	movs	r0, r4
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <__sfp+0x80>)
 80014d2:	6665      	str	r5, [r4, #100]	; 0x64
 80014d4:	6025      	str	r5, [r4, #0]
 80014d6:	6065      	str	r5, [r4, #4]
 80014d8:	60a5      	str	r5, [r4, #8]
 80014da:	60e3      	str	r3, [r4, #12]
 80014dc:	6125      	str	r5, [r4, #16]
 80014de:	6165      	str	r5, [r4, #20]
 80014e0:	61a5      	str	r5, [r4, #24]
 80014e2:	2208      	movs	r2, #8
 80014e4:	2100      	movs	r1, #0
 80014e6:	305c      	adds	r0, #92	; 0x5c
 80014e8:	f7ff f83c 	bl	8000564 <memset>
 80014ec:	6365      	str	r5, [r4, #52]	; 0x34
 80014ee:	63a5      	str	r5, [r4, #56]	; 0x38
 80014f0:	64a5      	str	r5, [r4, #72]	; 0x48
 80014f2:	64e5      	str	r5, [r4, #76]	; 0x4c
 80014f4:	0020      	movs	r0, r4
 80014f6:	bd70      	pop	{r4, r5, r6, pc}
 80014f8:	682c      	ldr	r4, [r5, #0]
 80014fa:	2c00      	cmp	r4, #0
 80014fc:	d005      	beq.n	800150a <__sfp+0x66>
 80014fe:	0025      	movs	r5, r4
 8001500:	e7d8      	b.n	80014b4 <__sfp+0x10>
 8001502:	0028      	movs	r0, r5
 8001504:	f000 f810 	bl	8001528 <__sinit.part.0>
 8001508:	e7d3      	b.n	80014b2 <__sfp+0xe>
 800150a:	2104      	movs	r1, #4
 800150c:	0030      	movs	r0, r6
 800150e:	f7ff ffb1 	bl	8001474 <__sfmoreglue>
 8001512:	1e04      	subs	r4, r0, #0
 8001514:	6028      	str	r0, [r5, #0]
 8001516:	d1f2      	bne.n	80014fe <__sfp+0x5a>
 8001518:	230c      	movs	r3, #12
 800151a:	6033      	str	r3, [r6, #0]
 800151c:	e7ea      	b.n	80014f4 <__sfp+0x50>
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	08003160 	.word	0x08003160
 8001524:	ffff0001 	.word	0xffff0001

08001528 <__sinit.part.0>:
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	46d6      	mov	lr, sl
 800152c:	464f      	mov	r7, r9
 800152e:	4646      	mov	r6, r8
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <__sinit.part.0+0xec>)
 8001532:	b5c0      	push	{r6, r7, lr}
 8001534:	6283      	str	r3, [r0, #40]	; 0x28
 8001536:	2300      	movs	r3, #0
 8001538:	6483      	str	r3, [r0, #72]	; 0x48
 800153a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800153c:	6503      	str	r3, [r0, #80]	; 0x50
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <__sinit.part.0+0xf0>)
 8001540:	b082      	sub	sp, #8
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0005      	movs	r5, r0
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	4298      	cmp	r0, r3
 800154a:	d060      	beq.n	800160e <__sinit.part.0+0xe6>
 800154c:	0028      	movs	r0, r5
 800154e:	f7ff ffa9 	bl	80014a4 <__sfp>
 8001552:	6068      	str	r0, [r5, #4]
 8001554:	0028      	movs	r0, r5
 8001556:	f7ff ffa5 	bl	80014a4 <__sfp>
 800155a:	60a8      	str	r0, [r5, #8]
 800155c:	0028      	movs	r0, r5
 800155e:	f7ff ffa1 	bl	80014a4 <__sfp>
 8001562:	686e      	ldr	r6, [r5, #4]
 8001564:	2400      	movs	r4, #0
 8001566:	60e8      	str	r0, [r5, #12]
 8001568:	2304      	movs	r3, #4
 800156a:	0030      	movs	r0, r6
 800156c:	6674      	str	r4, [r6, #100]	; 0x64
 800156e:	6034      	str	r4, [r6, #0]
 8001570:	6074      	str	r4, [r6, #4]
 8001572:	60b4      	str	r4, [r6, #8]
 8001574:	60f3      	str	r3, [r6, #12]
 8001576:	6134      	str	r4, [r6, #16]
 8001578:	6174      	str	r4, [r6, #20]
 800157a:	61b4      	str	r4, [r6, #24]
 800157c:	2208      	movs	r2, #8
 800157e:	2100      	movs	r1, #0
 8001580:	305c      	adds	r0, #92	; 0x5c
 8001582:	f7fe ffef 	bl	8000564 <memset>
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <__sinit.part.0+0xf4>)
 8001588:	4f25      	ldr	r7, [pc, #148]	; (8001620 <__sinit.part.0+0xf8>)
 800158a:	469a      	mov	sl, r3
 800158c:	6273      	str	r3, [r6, #36]	; 0x24
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <__sinit.part.0+0xfc>)
 8001590:	6337      	str	r7, [r6, #48]	; 0x30
 8001592:	4699      	mov	r9, r3
 8001594:	62b3      	str	r3, [r6, #40]	; 0x28
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <__sinit.part.0+0x100>)
 8001598:	6236      	str	r6, [r6, #32]
 800159a:	62f3      	str	r3, [r6, #44]	; 0x2c
 800159c:	68ae      	ldr	r6, [r5, #8]
 800159e:	4698      	mov	r8, r3
 80015a0:	0030      	movs	r0, r6
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <__sinit.part.0+0x104>)
 80015a4:	6674      	str	r4, [r6, #100]	; 0x64
 80015a6:	6034      	str	r4, [r6, #0]
 80015a8:	6074      	str	r4, [r6, #4]
 80015aa:	60b4      	str	r4, [r6, #8]
 80015ac:	60f3      	str	r3, [r6, #12]
 80015ae:	6134      	str	r4, [r6, #16]
 80015b0:	6174      	str	r4, [r6, #20]
 80015b2:	61b4      	str	r4, [r6, #24]
 80015b4:	2208      	movs	r2, #8
 80015b6:	2100      	movs	r1, #0
 80015b8:	305c      	adds	r0, #92	; 0x5c
 80015ba:	f7fe ffd3 	bl	8000564 <memset>
 80015be:	4653      	mov	r3, sl
 80015c0:	6273      	str	r3, [r6, #36]	; 0x24
 80015c2:	464b      	mov	r3, r9
 80015c4:	62b3      	str	r3, [r6, #40]	; 0x28
 80015c6:	4643      	mov	r3, r8
 80015c8:	6337      	str	r7, [r6, #48]	; 0x30
 80015ca:	62f3      	str	r3, [r6, #44]	; 0x2c
 80015cc:	6236      	str	r6, [r6, #32]
 80015ce:	68ee      	ldr	r6, [r5, #12]
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <__sinit.part.0+0x108>)
 80015d2:	0030      	movs	r0, r6
 80015d4:	60f3      	str	r3, [r6, #12]
 80015d6:	6674      	str	r4, [r6, #100]	; 0x64
 80015d8:	6034      	str	r4, [r6, #0]
 80015da:	6074      	str	r4, [r6, #4]
 80015dc:	60b4      	str	r4, [r6, #8]
 80015de:	6134      	str	r4, [r6, #16]
 80015e0:	6174      	str	r4, [r6, #20]
 80015e2:	61b4      	str	r4, [r6, #24]
 80015e4:	2208      	movs	r2, #8
 80015e6:	2100      	movs	r1, #0
 80015e8:	305c      	adds	r0, #92	; 0x5c
 80015ea:	f7fe ffbb 	bl	8000564 <memset>
 80015ee:	4653      	mov	r3, sl
 80015f0:	6273      	str	r3, [r6, #36]	; 0x24
 80015f2:	464b      	mov	r3, r9
 80015f4:	62b3      	str	r3, [r6, #40]	; 0x28
 80015f6:	4643      	mov	r3, r8
 80015f8:	62f3      	str	r3, [r6, #44]	; 0x2c
 80015fa:	2301      	movs	r3, #1
 80015fc:	6236      	str	r6, [r6, #32]
 80015fe:	6337      	str	r7, [r6, #48]	; 0x30
 8001600:	61ab      	str	r3, [r5, #24]
 8001602:	b002      	add	sp, #8
 8001604:	bc1c      	pop	{r2, r3, r4}
 8001606:	4690      	mov	r8, r2
 8001608:	4699      	mov	r9, r3
 800160a:	46a2      	mov	sl, r4
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160e:	2301      	movs	r3, #1
 8001610:	6183      	str	r3, [r0, #24]
 8001612:	e79b      	b.n	800154c <__sinit.part.0+0x24>
 8001614:	08001461 	.word	0x08001461
 8001618:	08003160 	.word	0x08003160
 800161c:	08001f11 	.word	0x08001f11
 8001620:	08001fa9 	.word	0x08001fa9
 8001624:	08001f3d 	.word	0x08001f3d
 8001628:	08001f7d 	.word	0x08001f7d
 800162c:	00010009 	.word	0x00010009
 8001630:	00020012 	.word	0x00020012

08001634 <_cleanup>:
 8001634:	b510      	push	{r4, lr}
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <_cleanup+0x10>)
 8001638:	4903      	ldr	r1, [pc, #12]	; (8001648 <_cleanup+0x14>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	f000 f9e0 	bl	8001a00 <_fwalk_reent>
 8001640:	bd10      	pop	{r4, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	08003160 	.word	0x08003160
 8001648:	080013d9 	.word	0x080013d9

0800164c <__sinit>:
 800164c:	6983      	ldr	r3, [r0, #24]
 800164e:	b510      	push	{r4, lr}
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <__sinit+0xc>
 8001654:	f7ff ff68 	bl	8001528 <__sinit.part.0>
 8001658:	bd10      	pop	{r4, pc}
 800165a:	46c0      	nop			; (mov r8, r8)

0800165c <__sfp_lock_acquire>:
 800165c:	4770      	bx	lr
 800165e:	46c0      	nop			; (mov r8, r8)

08001660 <__sfp_lock_release>:
 8001660:	4770      	bx	lr
 8001662:	46c0      	nop			; (mov r8, r8)

08001664 <__sinit_lock_acquire>:
 8001664:	4770      	bx	lr
 8001666:	46c0      	nop			; (mov r8, r8)

08001668 <__sinit_lock_release>:
 8001668:	4770      	bx	lr
 800166a:	46c0      	nop			; (mov r8, r8)

0800166c <__fp_lock_all>:
 800166c:	b510      	push	{r4, lr}
 800166e:	4b03      	ldr	r3, [pc, #12]	; (800167c <__fp_lock_all+0x10>)
 8001670:	4903      	ldr	r1, [pc, #12]	; (8001680 <__fp_lock_all+0x14>)
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	f000 f9a2 	bl	80019bc <_fwalk>
 8001678:	bd10      	pop	{r4, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	20000014 	.word	0x20000014
 8001680:	0800145d 	.word	0x0800145d

08001684 <__fp_unlock_all>:
 8001684:	b510      	push	{r4, lr}
 8001686:	4b03      	ldr	r3, [pc, #12]	; (8001694 <__fp_unlock_all+0x10>)
 8001688:	4903      	ldr	r1, [pc, #12]	; (8001698 <__fp_unlock_all+0x14>)
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	f000 f996 	bl	80019bc <_fwalk>
 8001690:	bd10      	pop	{r4, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	20000014 	.word	0x20000014
 8001698:	08001471 	.word	0x08001471

0800169c <__sfvwrite_r>:
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	4645      	mov	r5, r8
 80016a0:	46de      	mov	lr, fp
 80016a2:	4657      	mov	r7, sl
 80016a4:	464e      	mov	r6, r9
 80016a6:	b5e0      	push	{r5, r6, r7, lr}
 80016a8:	6893      	ldr	r3, [r2, #8]
 80016aa:	b083      	sub	sp, #12
 80016ac:	9000      	str	r0, [sp, #0]
 80016ae:	000c      	movs	r4, r1
 80016b0:	4690      	mov	r8, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d06d      	beq.n	8001792 <__sfvwrite_r+0xf6>
 80016b6:	898b      	ldrh	r3, [r1, #12]
 80016b8:	071a      	lsls	r2, r3, #28
 80016ba:	d400      	bmi.n	80016be <__sfvwrite_r+0x22>
 80016bc:	e071      	b.n	80017a2 <__sfvwrite_r+0x106>
 80016be:	690a      	ldr	r2, [r1, #16]
 80016c0:	2a00      	cmp	r2, #0
 80016c2:	d100      	bne.n	80016c6 <__sfvwrite_r+0x2a>
 80016c4:	e06d      	b.n	80017a2 <__sfvwrite_r+0x106>
 80016c6:	4642      	mov	r2, r8
 80016c8:	6816      	ldr	r6, [r2, #0]
 80016ca:	079a      	lsls	r2, r3, #30
 80016cc:	d400      	bmi.n	80016d0 <__sfvwrite_r+0x34>
 80016ce:	e075      	b.n	80017bc <__sfvwrite_r+0x120>
 80016d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016d2:	2700      	movs	r7, #0
 80016d4:	469a      	mov	sl, r3
 80016d6:	4bb5      	ldr	r3, [pc, #724]	; (80019ac <__sfvwrite_r+0x310>)
 80016d8:	2500      	movs	r5, #0
 80016da:	4699      	mov	r9, r3
 80016dc:	6a21      	ldr	r1, [r4, #32]
 80016de:	2d00      	cmp	r5, #0
 80016e0:	d016      	beq.n	8001710 <__sfvwrite_r+0x74>
 80016e2:	002b      	movs	r3, r5
 80016e4:	454d      	cmp	r5, r9
 80016e6:	d900      	bls.n	80016ea <__sfvwrite_r+0x4e>
 80016e8:	4bb0      	ldr	r3, [pc, #704]	; (80019ac <__sfvwrite_r+0x310>)
 80016ea:	003a      	movs	r2, r7
 80016ec:	9800      	ldr	r0, [sp, #0]
 80016ee:	47d0      	blx	sl
 80016f0:	2800      	cmp	r0, #0
 80016f2:	dc00      	bgt.n	80016f6 <__sfvwrite_r+0x5a>
 80016f4:	e0d5      	b.n	80018a2 <__sfvwrite_r+0x206>
 80016f6:	4643      	mov	r3, r8
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	183f      	adds	r7, r7, r0
 80016fc:	1a2d      	subs	r5, r5, r0
 80016fe:	1a18      	subs	r0, r3, r0
 8001700:	4643      	mov	r3, r8
 8001702:	6098      	str	r0, [r3, #8]
 8001704:	d045      	beq.n	8001792 <__sfvwrite_r+0xf6>
 8001706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001708:	6a21      	ldr	r1, [r4, #32]
 800170a:	469a      	mov	sl, r3
 800170c:	2d00      	cmp	r5, #0
 800170e:	d1e8      	bne.n	80016e2 <__sfvwrite_r+0x46>
 8001710:	6837      	ldr	r7, [r6, #0]
 8001712:	6875      	ldr	r5, [r6, #4]
 8001714:	3608      	adds	r6, #8
 8001716:	e7e2      	b.n	80016de <__sfvwrite_r+0x42>
 8001718:	464b      	mov	r3, r9
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	469a      	mov	sl, r3
 800171e:	464b      	mov	r3, r9
 8001720:	685f      	ldr	r7, [r3, #4]
 8001722:	2308      	movs	r3, #8
 8001724:	469c      	mov	ip, r3
 8001726:	44e1      	add	r9, ip
 8001728:	2f00      	cmp	r7, #0
 800172a:	d0f5      	beq.n	8001718 <__sfvwrite_r+0x7c>
 800172c:	003a      	movs	r2, r7
 800172e:	210a      	movs	r1, #10
 8001730:	4650      	mov	r0, sl
 8001732:	f000 f9fb 	bl	8001b2c <memchr>
 8001736:	2800      	cmp	r0, #0
 8001738:	d100      	bne.n	800173c <__sfvwrite_r+0xa0>
 800173a:	e0ce      	b.n	80018da <__sfvwrite_r+0x23e>
 800173c:	4653      	mov	r3, sl
 800173e:	3001      	adds	r0, #1
 8001740:	1ac6      	subs	r6, r0, r3
 8001742:	0033      	movs	r3, r6
 8001744:	46bb      	mov	fp, r7
 8001746:	429f      	cmp	r7, r3
 8001748:	d900      	bls.n	800174c <__sfvwrite_r+0xb0>
 800174a:	469b      	mov	fp, r3
 800174c:	6820      	ldr	r0, [r4, #0]
 800174e:	6922      	ldr	r2, [r4, #16]
 8001750:	6963      	ldr	r3, [r4, #20]
 8001752:	4290      	cmp	r0, r2
 8001754:	d904      	bls.n	8001760 <__sfvwrite_r+0xc4>
 8001756:	68a2      	ldr	r2, [r4, #8]
 8001758:	189d      	adds	r5, r3, r2
 800175a:	45ab      	cmp	fp, r5
 800175c:	dd00      	ble.n	8001760 <__sfvwrite_r+0xc4>
 800175e:	e092      	b.n	8001886 <__sfvwrite_r+0x1ea>
 8001760:	455b      	cmp	r3, fp
 8001762:	dd00      	ble.n	8001766 <__sfvwrite_r+0xca>
 8001764:	e0f9      	b.n	800195a <__sfvwrite_r+0x2be>
 8001766:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001768:	4652      	mov	r2, sl
 800176a:	6a21      	ldr	r1, [r4, #32]
 800176c:	9800      	ldr	r0, [sp, #0]
 800176e:	47a8      	blx	r5
 8001770:	1e05      	subs	r5, r0, #0
 8001772:	dc00      	bgt.n	8001776 <__sfvwrite_r+0xda>
 8001774:	e095      	b.n	80018a2 <__sfvwrite_r+0x206>
 8001776:	1b76      	subs	r6, r6, r5
 8001778:	2001      	movs	r0, #1
 800177a:	2e00      	cmp	r6, #0
 800177c:	d100      	bne.n	8001780 <__sfvwrite_r+0xe4>
 800177e:	e0e4      	b.n	800194a <__sfvwrite_r+0x2ae>
 8001780:	4643      	mov	r3, r8
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	44aa      	add	sl, r5
 8001786:	1b7f      	subs	r7, r7, r5
 8001788:	1b5d      	subs	r5, r3, r5
 800178a:	4643      	mov	r3, r8
 800178c:	609d      	str	r5, [r3, #8]
 800178e:	d000      	beq.n	8001792 <__sfvwrite_r+0xf6>
 8001790:	e095      	b.n	80018be <__sfvwrite_r+0x222>
 8001792:	2000      	movs	r0, #0
 8001794:	b003      	add	sp, #12
 8001796:	bc3c      	pop	{r2, r3, r4, r5}
 8001798:	4690      	mov	r8, r2
 800179a:	4699      	mov	r9, r3
 800179c:	46a2      	mov	sl, r4
 800179e:	46ab      	mov	fp, r5
 80017a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a2:	0021      	movs	r1, r4
 80017a4:	9800      	ldr	r0, [sp, #0]
 80017a6:	f7ff fcef 	bl	8001188 <__swsetup_r>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d000      	beq.n	80017b0 <__sfvwrite_r+0x114>
 80017ae:	e0f9      	b.n	80019a4 <__sfvwrite_r+0x308>
 80017b0:	4642      	mov	r2, r8
 80017b2:	89a3      	ldrh	r3, [r4, #12]
 80017b4:	6816      	ldr	r6, [r2, #0]
 80017b6:	079a      	lsls	r2, r3, #30
 80017b8:	d500      	bpl.n	80017bc <__sfvwrite_r+0x120>
 80017ba:	e789      	b.n	80016d0 <__sfvwrite_r+0x34>
 80017bc:	07da      	lsls	r2, r3, #31
 80017be:	d478      	bmi.n	80018b2 <__sfvwrite_r+0x216>
 80017c0:	2200      	movs	r2, #0
 80017c2:	4691      	mov	r9, r2
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	2700      	movs	r7, #0
 80017ca:	4693      	mov	fp, r2
 80017cc:	68a5      	ldr	r5, [r4, #8]
 80017ce:	6820      	ldr	r0, [r4, #0]
 80017d0:	2f00      	cmp	r7, #0
 80017d2:	d053      	beq.n	800187c <__sfvwrite_r+0x1e0>
 80017d4:	465a      	mov	r2, fp
 80017d6:	4213      	tst	r3, r2
 80017d8:	d100      	bne.n	80017dc <__sfvwrite_r+0x140>
 80017da:	e081      	b.n	80018e0 <__sfvwrite_r+0x244>
 80017dc:	46aa      	mov	sl, r5
 80017de:	42bd      	cmp	r5, r7
 80017e0:	d900      	bls.n	80017e4 <__sfvwrite_r+0x148>
 80017e2:	e0af      	b.n	8001944 <__sfvwrite_r+0x2a8>
 80017e4:	2290      	movs	r2, #144	; 0x90
 80017e6:	00d2      	lsls	r2, r2, #3
 80017e8:	4213      	tst	r3, r2
 80017ea:	d02e      	beq.n	800184a <__sfvwrite_r+0x1ae>
 80017ec:	6921      	ldr	r1, [r4, #16]
 80017ee:	1a45      	subs	r5, r0, r1
 80017f0:	46ac      	mov	ip, r5
 80017f2:	6960      	ldr	r0, [r4, #20]
 80017f4:	9501      	str	r5, [sp, #4]
 80017f6:	0042      	lsls	r2, r0, #1
 80017f8:	1812      	adds	r2, r2, r0
 80017fa:	0fd0      	lsrs	r0, r2, #31
 80017fc:	1882      	adds	r2, r0, r2
 80017fe:	1c78      	adds	r0, r7, #1
 8001800:	1052      	asrs	r2, r2, #1
 8001802:	4460      	add	r0, ip
 8001804:	4692      	mov	sl, r2
 8001806:	4290      	cmp	r0, r2
 8001808:	d901      	bls.n	800180e <__sfvwrite_r+0x172>
 800180a:	4682      	mov	sl, r0
 800180c:	0002      	movs	r2, r0
 800180e:	055b      	lsls	r3, r3, #21
 8001810:	d400      	bmi.n	8001814 <__sfvwrite_r+0x178>
 8001812:	e0af      	b.n	8001974 <__sfvwrite_r+0x2d8>
 8001814:	0011      	movs	r1, r2
 8001816:	9800      	ldr	r0, [sp, #0]
 8001818:	f7ff f81a 	bl	8000850 <_malloc_r>
 800181c:	1e05      	subs	r5, r0, #0
 800181e:	d100      	bne.n	8001822 <__sfvwrite_r+0x186>
 8001820:	e0ba      	b.n	8001998 <__sfvwrite_r+0x2fc>
 8001822:	9a01      	ldr	r2, [sp, #4]
 8001824:	6921      	ldr	r1, [r4, #16]
 8001826:	f000 f9c1 	bl	8001bac <memcpy>
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	4a60      	ldr	r2, [pc, #384]	; (80019b0 <__sfvwrite_r+0x314>)
 800182e:	4013      	ands	r3, r2
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	4313      	orrs	r3, r2
 8001834:	81a3      	strh	r3, [r4, #12]
 8001836:	4652      	mov	r2, sl
 8001838:	9b01      	ldr	r3, [sp, #4]
 800183a:	6125      	str	r5, [r4, #16]
 800183c:	18e8      	adds	r0, r5, r3
 800183e:	46ba      	mov	sl, r7
 8001840:	003d      	movs	r5, r7
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	6020      	str	r0, [r4, #0]
 8001846:	6162      	str	r2, [r4, #20]
 8001848:	60a3      	str	r3, [r4, #8]
 800184a:	4652      	mov	r2, sl
 800184c:	4649      	mov	r1, r9
 800184e:	f000 fa01 	bl	8001c54 <memmove>
 8001852:	68a3      	ldr	r3, [r4, #8]
 8001854:	1b5d      	subs	r5, r3, r5
 8001856:	60a5      	str	r5, [r4, #8]
 8001858:	003d      	movs	r5, r7
 800185a:	2700      	movs	r7, #0
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	4453      	add	r3, sl
 8001860:	6023      	str	r3, [r4, #0]
 8001862:	4643      	mov	r3, r8
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	44a9      	add	r9, r5
 8001868:	1b5d      	subs	r5, r3, r5
 800186a:	4643      	mov	r3, r8
 800186c:	609d      	str	r5, [r3, #8]
 800186e:	d100      	bne.n	8001872 <__sfvwrite_r+0x1d6>
 8001870:	e78f      	b.n	8001792 <__sfvwrite_r+0xf6>
 8001872:	68a5      	ldr	r5, [r4, #8]
 8001874:	6820      	ldr	r0, [r4, #0]
 8001876:	89a3      	ldrh	r3, [r4, #12]
 8001878:	2f00      	cmp	r7, #0
 800187a:	d1ab      	bne.n	80017d4 <__sfvwrite_r+0x138>
 800187c:	6832      	ldr	r2, [r6, #0]
 800187e:	6877      	ldr	r7, [r6, #4]
 8001880:	4691      	mov	r9, r2
 8001882:	3608      	adds	r6, #8
 8001884:	e7a4      	b.n	80017d0 <__sfvwrite_r+0x134>
 8001886:	4651      	mov	r1, sl
 8001888:	002a      	movs	r2, r5
 800188a:	f000 f9e3 	bl	8001c54 <memmove>
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	0021      	movs	r1, r4
 8001892:	195b      	adds	r3, r3, r5
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	9800      	ldr	r0, [sp, #0]
 8001898:	f7ff fd9e 	bl	80013d8 <_fflush_r>
 800189c:	2800      	cmp	r0, #0
 800189e:	d100      	bne.n	80018a2 <__sfvwrite_r+0x206>
 80018a0:	e769      	b.n	8001776 <__sfvwrite_r+0xda>
 80018a2:	220c      	movs	r2, #12
 80018a4:	5ea3      	ldrsh	r3, [r4, r2]
 80018a6:	2240      	movs	r2, #64	; 0x40
 80018a8:	2001      	movs	r0, #1
 80018aa:	4313      	orrs	r3, r2
 80018ac:	81a3      	strh	r3, [r4, #12]
 80018ae:	4240      	negs	r0, r0
 80018b0:	e770      	b.n	8001794 <__sfvwrite_r+0xf8>
 80018b2:	2300      	movs	r3, #0
 80018b4:	46b1      	mov	r9, r6
 80018b6:	2000      	movs	r0, #0
 80018b8:	469a      	mov	sl, r3
 80018ba:	2700      	movs	r7, #0
 80018bc:	001e      	movs	r6, r3
 80018be:	2f00      	cmp	r7, #0
 80018c0:	d100      	bne.n	80018c4 <__sfvwrite_r+0x228>
 80018c2:	e729      	b.n	8001718 <__sfvwrite_r+0x7c>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d000      	beq.n	80018ca <__sfvwrite_r+0x22e>
 80018c8:	e73b      	b.n	8001742 <__sfvwrite_r+0xa6>
 80018ca:	003a      	movs	r2, r7
 80018cc:	210a      	movs	r1, #10
 80018ce:	4650      	mov	r0, sl
 80018d0:	f000 f92c 	bl	8001b2c <memchr>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d000      	beq.n	80018da <__sfvwrite_r+0x23e>
 80018d8:	e730      	b.n	800173c <__sfvwrite_r+0xa0>
 80018da:	1c7b      	adds	r3, r7, #1
 80018dc:	001e      	movs	r6, r3
 80018de:	e731      	b.n	8001744 <__sfvwrite_r+0xa8>
 80018e0:	6923      	ldr	r3, [r4, #16]
 80018e2:	4283      	cmp	r3, r0
 80018e4:	d317      	bcc.n	8001916 <__sfvwrite_r+0x27a>
 80018e6:	6963      	ldr	r3, [r4, #20]
 80018e8:	469a      	mov	sl, r3
 80018ea:	42bb      	cmp	r3, r7
 80018ec:	d813      	bhi.n	8001916 <__sfvwrite_r+0x27a>
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <__sfvwrite_r+0x318>)
 80018f0:	0038      	movs	r0, r7
 80018f2:	429f      	cmp	r7, r3
 80018f4:	d900      	bls.n	80018f8 <__sfvwrite_r+0x25c>
 80018f6:	4830      	ldr	r0, [pc, #192]	; (80019b8 <__sfvwrite_r+0x31c>)
 80018f8:	4651      	mov	r1, sl
 80018fa:	f7fe fd25 	bl	8000348 <__divsi3>
 80018fe:	4653      	mov	r3, sl
 8001900:	464a      	mov	r2, r9
 8001902:	4343      	muls	r3, r0
 8001904:	6a21      	ldr	r1, [r4, #32]
 8001906:	9800      	ldr	r0, [sp, #0]
 8001908:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800190a:	47a8      	blx	r5
 800190c:	2800      	cmp	r0, #0
 800190e:	ddc8      	ble.n	80018a2 <__sfvwrite_r+0x206>
 8001910:	0005      	movs	r5, r0
 8001912:	1b7f      	subs	r7, r7, r5
 8001914:	e7a5      	b.n	8001862 <__sfvwrite_r+0x1c6>
 8001916:	42bd      	cmp	r5, r7
 8001918:	d900      	bls.n	800191c <__sfvwrite_r+0x280>
 800191a:	003d      	movs	r5, r7
 800191c:	002a      	movs	r2, r5
 800191e:	4649      	mov	r1, r9
 8001920:	f000 f998 	bl	8001c54 <memmove>
 8001924:	68a3      	ldr	r3, [r4, #8]
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	1b5b      	subs	r3, r3, r5
 800192a:	1952      	adds	r2, r2, r5
 800192c:	60a3      	str	r3, [r4, #8]
 800192e:	6022      	str	r2, [r4, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ee      	bne.n	8001912 <__sfvwrite_r+0x276>
 8001934:	0021      	movs	r1, r4
 8001936:	9800      	ldr	r0, [sp, #0]
 8001938:	f7ff fd4e 	bl	80013d8 <_fflush_r>
 800193c:	2800      	cmp	r0, #0
 800193e:	d1b0      	bne.n	80018a2 <__sfvwrite_r+0x206>
 8001940:	1b7f      	subs	r7, r7, r5
 8001942:	e78e      	b.n	8001862 <__sfvwrite_r+0x1c6>
 8001944:	003d      	movs	r5, r7
 8001946:	46ba      	mov	sl, r7
 8001948:	e77f      	b.n	800184a <__sfvwrite_r+0x1ae>
 800194a:	0021      	movs	r1, r4
 800194c:	9800      	ldr	r0, [sp, #0]
 800194e:	f7ff fd43 	bl	80013d8 <_fflush_r>
 8001952:	2800      	cmp	r0, #0
 8001954:	d100      	bne.n	8001958 <__sfvwrite_r+0x2bc>
 8001956:	e713      	b.n	8001780 <__sfvwrite_r+0xe4>
 8001958:	e7a3      	b.n	80018a2 <__sfvwrite_r+0x206>
 800195a:	465a      	mov	r2, fp
 800195c:	4651      	mov	r1, sl
 800195e:	f000 f979 	bl	8001c54 <memmove>
 8001962:	465a      	mov	r2, fp
 8001964:	68a3      	ldr	r3, [r4, #8]
 8001966:	465d      	mov	r5, fp
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	60a3      	str	r3, [r4, #8]
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	445b      	add	r3, fp
 8001970:	6023      	str	r3, [r4, #0]
 8001972:	e700      	b.n	8001776 <__sfvwrite_r+0xda>
 8001974:	9800      	ldr	r0, [sp, #0]
 8001976:	f000 f9cf 	bl	8001d18 <_realloc_r>
 800197a:	1e05      	subs	r5, r0, #0
 800197c:	d000      	beq.n	8001980 <__sfvwrite_r+0x2e4>
 800197e:	e75a      	b.n	8001836 <__sfvwrite_r+0x19a>
 8001980:	9d00      	ldr	r5, [sp, #0]
 8001982:	6921      	ldr	r1, [r4, #16]
 8001984:	0028      	movs	r0, r5
 8001986:	f7fe ff0d 	bl	80007a4 <_free_r>
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	89a3      	ldrh	r3, [r4, #12]
 800198e:	4393      	bics	r3, r2
 8001990:	3a74      	subs	r2, #116	; 0x74
 8001992:	b21b      	sxth	r3, r3
 8001994:	602a      	str	r2, [r5, #0]
 8001996:	e786      	b.n	80018a6 <__sfvwrite_r+0x20a>
 8001998:	230c      	movs	r3, #12
 800199a:	9a00      	ldr	r2, [sp, #0]
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	220c      	movs	r2, #12
 80019a0:	5ea3      	ldrsh	r3, [r4, r2]
 80019a2:	e780      	b.n	80018a6 <__sfvwrite_r+0x20a>
 80019a4:	2001      	movs	r0, #1
 80019a6:	4240      	negs	r0, r0
 80019a8:	e6f4      	b.n	8001794 <__sfvwrite_r+0xf8>
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	7ffffc00 	.word	0x7ffffc00
 80019b0:	fffffb7f 	.word	0xfffffb7f
 80019b4:	7ffffffe 	.word	0x7ffffffe
 80019b8:	7fffffff 	.word	0x7fffffff

080019bc <_fwalk>:
 80019bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019be:	46c6      	mov	lr, r8
 80019c0:	3048      	adds	r0, #72	; 0x48
 80019c2:	b500      	push	{lr}
 80019c4:	4688      	mov	r8, r1
 80019c6:	0007      	movs	r7, r0
 80019c8:	2600      	movs	r6, #0
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d013      	beq.n	80019f6 <_fwalk+0x3a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68bc      	ldr	r4, [r7, #8]
 80019d2:	1e5d      	subs	r5, r3, #1
 80019d4:	d40c      	bmi.n	80019f0 <_fwalk+0x34>
 80019d6:	89a3      	ldrh	r3, [r4, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d906      	bls.n	80019ea <_fwalk+0x2e>
 80019dc:	220e      	movs	r2, #14
 80019de:	5ea3      	ldrsh	r3, [r4, r2]
 80019e0:	3301      	adds	r3, #1
 80019e2:	d002      	beq.n	80019ea <_fwalk+0x2e>
 80019e4:	0020      	movs	r0, r4
 80019e6:	47c0      	blx	r8
 80019e8:	4306      	orrs	r6, r0
 80019ea:	3468      	adds	r4, #104	; 0x68
 80019ec:	3d01      	subs	r5, #1
 80019ee:	d2f2      	bcs.n	80019d6 <_fwalk+0x1a>
 80019f0:	683f      	ldr	r7, [r7, #0]
 80019f2:	2f00      	cmp	r7, #0
 80019f4:	d1eb      	bne.n	80019ce <_fwalk+0x12>
 80019f6:	0030      	movs	r0, r6
 80019f8:	bc04      	pop	{r2}
 80019fa:	4690      	mov	r8, r2
 80019fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)

08001a00 <_fwalk_reent>:
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	4647      	mov	r7, r8
 8001a04:	46ce      	mov	lr, r9
 8001a06:	b580      	push	{r7, lr}
 8001a08:	0007      	movs	r7, r0
 8001a0a:	3748      	adds	r7, #72	; 0x48
 8001a0c:	4680      	mov	r8, r0
 8001a0e:	4689      	mov	r9, r1
 8001a10:	2600      	movs	r6, #0
 8001a12:	2f00      	cmp	r7, #0
 8001a14:	d014      	beq.n	8001a40 <_fwalk_reent+0x40>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68bc      	ldr	r4, [r7, #8]
 8001a1a:	1e5d      	subs	r5, r3, #1
 8001a1c:	d40d      	bmi.n	8001a3a <_fwalk_reent+0x3a>
 8001a1e:	89a3      	ldrh	r3, [r4, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d907      	bls.n	8001a34 <_fwalk_reent+0x34>
 8001a24:	220e      	movs	r2, #14
 8001a26:	5ea3      	ldrsh	r3, [r4, r2]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	d003      	beq.n	8001a34 <_fwalk_reent+0x34>
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	4640      	mov	r0, r8
 8001a30:	47c8      	blx	r9
 8001a32:	4306      	orrs	r6, r0
 8001a34:	3468      	adds	r4, #104	; 0x68
 8001a36:	3d01      	subs	r5, #1
 8001a38:	d2f1      	bcs.n	8001a1e <_fwalk_reent+0x1e>
 8001a3a:	683f      	ldr	r7, [r7, #0]
 8001a3c:	2f00      	cmp	r7, #0
 8001a3e:	d1ea      	bne.n	8001a16 <_fwalk_reent+0x16>
 8001a40:	0030      	movs	r0, r6
 8001a42:	bc0c      	pop	{r2, r3}
 8001a44:	4690      	mov	r8, r2
 8001a46:	4699      	mov	r9, r3
 8001a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)

08001a4c <__swhatbuf_r>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	000c      	movs	r4, r1
 8001a50:	001d      	movs	r5, r3
 8001a52:	230e      	movs	r3, #14
 8001a54:	5ec9      	ldrsh	r1, [r1, r3]
 8001a56:	b096      	sub	sp, #88	; 0x58
 8001a58:	0016      	movs	r6, r2
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	db14      	blt.n	8001a88 <__swhatbuf_r+0x3c>
 8001a5e:	466a      	mov	r2, sp
 8001a60:	f000 face 	bl	8002000 <_fstat_r>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	db0f      	blt.n	8001a88 <__swhatbuf_r+0x3c>
 8001a68:	22f0      	movs	r2, #240	; 0xf0
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	0212      	lsls	r2, r2, #8
 8001a6e:	4013      	ands	r3, r2
 8001a70:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <__swhatbuf_r+0x4c>)
 8001a72:	4694      	mov	ip, r2
 8001a74:	4463      	add	r3, ip
 8001a76:	425a      	negs	r2, r3
 8001a78:	4153      	adcs	r3, r2
 8001a7a:	602b      	str	r3, [r5, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	6033      	str	r3, [r6, #0]
 8001a82:	2000      	movs	r0, #0
 8001a84:	b016      	add	sp, #88	; 0x58
 8001a86:	bd70      	pop	{r4, r5, r6, pc}
 8001a88:	2300      	movs	r3, #0
 8001a8a:	602b      	str	r3, [r5, #0]
 8001a8c:	89a3      	ldrh	r3, [r4, #12]
 8001a8e:	061b      	lsls	r3, r3, #24
 8001a90:	d5f4      	bpl.n	8001a7c <__swhatbuf_r+0x30>
 8001a92:	2340      	movs	r3, #64	; 0x40
 8001a94:	6033      	str	r3, [r6, #0]
 8001a96:	e7f4      	b.n	8001a82 <__swhatbuf_r+0x36>
 8001a98:	ffffe000 	.word	0xffffe000

08001a9c <__smakebuf_r>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	898b      	ldrh	r3, [r1, #12]
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	0006      	movs	r6, r0
 8001aa4:	000c      	movs	r4, r1
 8001aa6:	079b      	lsls	r3, r3, #30
 8001aa8:	d507      	bpl.n	8001aba <__smakebuf_r+0x1e>
 8001aaa:	0023      	movs	r3, r4
 8001aac:	3347      	adds	r3, #71	; 0x47
 8001aae:	6023      	str	r3, [r4, #0]
 8001ab0:	6123      	str	r3, [r4, #16]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	6163      	str	r3, [r4, #20]
 8001ab6:	b002      	add	sp, #8
 8001ab8:	bd70      	pop	{r4, r5, r6, pc}
 8001aba:	ab01      	add	r3, sp, #4
 8001abc:	466a      	mov	r2, sp
 8001abe:	f7ff ffc5 	bl	8001a4c <__swhatbuf_r>
 8001ac2:	9900      	ldr	r1, [sp, #0]
 8001ac4:	0005      	movs	r5, r0
 8001ac6:	0030      	movs	r0, r6
 8001ac8:	f7fe fec2 	bl	8000850 <_malloc_r>
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d010      	beq.n	8001af2 <__smakebuf_r+0x56>
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <__smakebuf_r+0x8c>)
 8001ad4:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ad6:	89a3      	ldrh	r3, [r4, #12]
 8001ad8:	6020      	str	r0, [r4, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	9a00      	ldr	r2, [sp, #0]
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	6162      	str	r2, [r4, #20]
 8001ae2:	9a01      	ldr	r2, [sp, #4]
 8001ae4:	81a3      	strh	r3, [r4, #12]
 8001ae6:	6120      	str	r0, [r4, #16]
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d10c      	bne.n	8001b06 <__smakebuf_r+0x6a>
 8001aec:	432b      	orrs	r3, r5
 8001aee:	81a3      	strh	r3, [r4, #12]
 8001af0:	e7e1      	b.n	8001ab6 <__smakebuf_r+0x1a>
 8001af2:	220c      	movs	r2, #12
 8001af4:	5ea3      	ldrsh	r3, [r4, r2]
 8001af6:	059a      	lsls	r2, r3, #22
 8001af8:	d4dd      	bmi.n	8001ab6 <__smakebuf_r+0x1a>
 8001afa:	2203      	movs	r2, #3
 8001afc:	4393      	bics	r3, r2
 8001afe:	2202      	movs	r2, #2
 8001b00:	4313      	orrs	r3, r2
 8001b02:	81a3      	strh	r3, [r4, #12]
 8001b04:	e7d1      	b.n	8001aaa <__smakebuf_r+0xe>
 8001b06:	230e      	movs	r3, #14
 8001b08:	5ee1      	ldrsh	r1, [r4, r3]
 8001b0a:	0030      	movs	r0, r6
 8001b0c:	f000 fa8c 	bl	8002028 <_isatty_r>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d102      	bne.n	8001b1a <__smakebuf_r+0x7e>
 8001b14:	220c      	movs	r2, #12
 8001b16:	5ea3      	ldrsh	r3, [r4, r2]
 8001b18:	e7e8      	b.n	8001aec <__smakebuf_r+0x50>
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	89a3      	ldrh	r3, [r4, #12]
 8001b1e:	4393      	bics	r3, r2
 8001b20:	2201      	movs	r2, #1
 8001b22:	4313      	orrs	r3, r2
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	e7e1      	b.n	8001aec <__smakebuf_r+0x50>
 8001b28:	08001461 	.word	0x08001461

08001b2c <memchr>:
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	b2cd      	uxtb	r5, r1
 8001b30:	0783      	lsls	r3, r0, #30
 8001b32:	d034      	beq.n	8001b9e <memchr+0x72>
 8001b34:	1e53      	subs	r3, r2, #1
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d01b      	beq.n	8001b72 <memchr+0x46>
 8001b3a:	7802      	ldrb	r2, [r0, #0]
 8001b3c:	42aa      	cmp	r2, r5
 8001b3e:	d019      	beq.n	8001b74 <memchr+0x48>
 8001b40:	2403      	movs	r4, #3
 8001b42:	e004      	b.n	8001b4e <memchr+0x22>
 8001b44:	3b01      	subs	r3, #1
 8001b46:	d314      	bcc.n	8001b72 <memchr+0x46>
 8001b48:	7802      	ldrb	r2, [r0, #0]
 8001b4a:	42aa      	cmp	r2, r5
 8001b4c:	d012      	beq.n	8001b74 <memchr+0x48>
 8001b4e:	3001      	adds	r0, #1
 8001b50:	4220      	tst	r0, r4
 8001b52:	d1f7      	bne.n	8001b44 <memchr+0x18>
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d80e      	bhi.n	8001b76 <memchr+0x4a>
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00a      	beq.n	8001b72 <memchr+0x46>
 8001b5c:	7802      	ldrb	r2, [r0, #0]
 8001b5e:	42aa      	cmp	r2, r5
 8001b60:	d008      	beq.n	8001b74 <memchr+0x48>
 8001b62:	18c3      	adds	r3, r0, r3
 8001b64:	e002      	b.n	8001b6c <memchr+0x40>
 8001b66:	7802      	ldrb	r2, [r0, #0]
 8001b68:	42aa      	cmp	r2, r5
 8001b6a:	d003      	beq.n	8001b74 <memchr+0x48>
 8001b6c:	3001      	adds	r0, #1
 8001b6e:	4283      	cmp	r3, r0
 8001b70:	d1f9      	bne.n	8001b66 <memchr+0x3a>
 8001b72:	2000      	movs	r0, #0
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
 8001b76:	22ff      	movs	r2, #255	; 0xff
 8001b78:	060c      	lsls	r4, r1, #24
 8001b7a:	0c24      	lsrs	r4, r4, #16
 8001b7c:	4011      	ands	r1, r2
 8001b7e:	4321      	orrs	r1, r4
 8001b80:	040c      	lsls	r4, r1, #16
 8001b82:	4e08      	ldr	r6, [pc, #32]	; (8001ba4 <memchr+0x78>)
 8001b84:	430c      	orrs	r4, r1
 8001b86:	6802      	ldr	r2, [r0, #0]
 8001b88:	4907      	ldr	r1, [pc, #28]	; (8001ba8 <memchr+0x7c>)
 8001b8a:	4062      	eors	r2, r4
 8001b8c:	1851      	adds	r1, r2, r1
 8001b8e:	4391      	bics	r1, r2
 8001b90:	4231      	tst	r1, r6
 8001b92:	d1e3      	bne.n	8001b5c <memchr+0x30>
 8001b94:	3b04      	subs	r3, #4
 8001b96:	3004      	adds	r0, #4
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d8f4      	bhi.n	8001b86 <memchr+0x5a>
 8001b9c:	e7dc      	b.n	8001b58 <memchr+0x2c>
 8001b9e:	0013      	movs	r3, r2
 8001ba0:	e7d8      	b.n	8001b54 <memchr+0x28>
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	80808080 	.word	0x80808080
 8001ba8:	fefefeff 	.word	0xfefefeff

08001bac <memcpy>:
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	46c6      	mov	lr, r8
 8001bb0:	b500      	push	{lr}
 8001bb2:	2a0f      	cmp	r2, #15
 8001bb4:	d943      	bls.n	8001c3e <memcpy+0x92>
 8001bb6:	000b      	movs	r3, r1
 8001bb8:	2603      	movs	r6, #3
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	401e      	ands	r6, r3
 8001bbe:	000c      	movs	r4, r1
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	2e00      	cmp	r6, #0
 8001bc4:	d140      	bne.n	8001c48 <memcpy+0x9c>
 8001bc6:	0015      	movs	r5, r2
 8001bc8:	3d10      	subs	r5, #16
 8001bca:	092d      	lsrs	r5, r5, #4
 8001bcc:	46ac      	mov	ip, r5
 8001bce:	012d      	lsls	r5, r5, #4
 8001bd0:	46a8      	mov	r8, r5
 8001bd2:	4480      	add	r8, r0
 8001bd4:	e000      	b.n	8001bd8 <memcpy+0x2c>
 8001bd6:	003b      	movs	r3, r7
 8001bd8:	6867      	ldr	r7, [r4, #4]
 8001bda:	6825      	ldr	r5, [r4, #0]
 8001bdc:	605f      	str	r7, [r3, #4]
 8001bde:	68e7      	ldr	r7, [r4, #12]
 8001be0:	601d      	str	r5, [r3, #0]
 8001be2:	60df      	str	r7, [r3, #12]
 8001be4:	001f      	movs	r7, r3
 8001be6:	68a5      	ldr	r5, [r4, #8]
 8001be8:	3710      	adds	r7, #16
 8001bea:	609d      	str	r5, [r3, #8]
 8001bec:	3410      	adds	r4, #16
 8001bee:	4543      	cmp	r3, r8
 8001bf0:	d1f1      	bne.n	8001bd6 <memcpy+0x2a>
 8001bf2:	4665      	mov	r5, ip
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	240c      	movs	r4, #12
 8001bf8:	3501      	adds	r5, #1
 8001bfa:	012d      	lsls	r5, r5, #4
 8001bfc:	1949      	adds	r1, r1, r5
 8001bfe:	4013      	ands	r3, r2
 8001c00:	1945      	adds	r5, r0, r5
 8001c02:	4214      	tst	r4, r2
 8001c04:	d023      	beq.n	8001c4e <memcpy+0xa2>
 8001c06:	598c      	ldr	r4, [r1, r6]
 8001c08:	51ac      	str	r4, [r5, r6]
 8001c0a:	3604      	adds	r6, #4
 8001c0c:	1b9c      	subs	r4, r3, r6
 8001c0e:	2c03      	cmp	r4, #3
 8001c10:	d8f9      	bhi.n	8001c06 <memcpy+0x5a>
 8001c12:	2403      	movs	r4, #3
 8001c14:	3b04      	subs	r3, #4
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3301      	adds	r3, #1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4022      	ands	r2, r4
 8001c1e:	18ed      	adds	r5, r5, r3
 8001c20:	18c9      	adds	r1, r1, r3
 8001c22:	1e56      	subs	r6, r2, #1
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d007      	beq.n	8001c38 <memcpy+0x8c>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <memcpy+0x82>
 8001c2c:	0023      	movs	r3, r4
 8001c2e:	5cca      	ldrb	r2, [r1, r3]
 8001c30:	1c5c      	adds	r4, r3, #1
 8001c32:	54ea      	strb	r2, [r5, r3]
 8001c34:	429e      	cmp	r6, r3
 8001c36:	d1f9      	bne.n	8001c2c <memcpy+0x80>
 8001c38:	bc04      	pop	{r2}
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3e:	0005      	movs	r5, r0
 8001c40:	1e56      	subs	r6, r2, #1
 8001c42:	2a00      	cmp	r2, #0
 8001c44:	d1f0      	bne.n	8001c28 <memcpy+0x7c>
 8001c46:	e7f7      	b.n	8001c38 <memcpy+0x8c>
 8001c48:	1e56      	subs	r6, r2, #1
 8001c4a:	0005      	movs	r5, r0
 8001c4c:	e7ec      	b.n	8001c28 <memcpy+0x7c>
 8001c4e:	001a      	movs	r2, r3
 8001c50:	e7f6      	b.n	8001c40 <memcpy+0x94>
 8001c52:	46c0      	nop			; (mov r8, r8)

08001c54 <memmove>:
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	46c6      	mov	lr, r8
 8001c58:	b500      	push	{lr}
 8001c5a:	4288      	cmp	r0, r1
 8001c5c:	d90c      	bls.n	8001c78 <memmove+0x24>
 8001c5e:	188b      	adds	r3, r1, r2
 8001c60:	4298      	cmp	r0, r3
 8001c62:	d209      	bcs.n	8001c78 <memmove+0x24>
 8001c64:	1e53      	subs	r3, r2, #1
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d003      	beq.n	8001c72 <memmove+0x1e>
 8001c6a:	5cca      	ldrb	r2, [r1, r3]
 8001c6c:	54c2      	strb	r2, [r0, r3]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	d2fb      	bcs.n	8001c6a <memmove+0x16>
 8001c72:	bc04      	pop	{r2}
 8001c74:	4690      	mov	r8, r2
 8001c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c78:	2a0f      	cmp	r2, #15
 8001c7a:	d80c      	bhi.n	8001c96 <memmove+0x42>
 8001c7c:	0005      	movs	r5, r0
 8001c7e:	1e56      	subs	r6, r2, #1
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	d0f6      	beq.n	8001c72 <memmove+0x1e>
 8001c84:	2300      	movs	r3, #0
 8001c86:	e000      	b.n	8001c8a <memmove+0x36>
 8001c88:	0023      	movs	r3, r4
 8001c8a:	5cca      	ldrb	r2, [r1, r3]
 8001c8c:	1c5c      	adds	r4, r3, #1
 8001c8e:	54ea      	strb	r2, [r5, r3]
 8001c90:	429e      	cmp	r6, r3
 8001c92:	d1f9      	bne.n	8001c88 <memmove+0x34>
 8001c94:	e7ed      	b.n	8001c72 <memmove+0x1e>
 8001c96:	000b      	movs	r3, r1
 8001c98:	2603      	movs	r6, #3
 8001c9a:	4303      	orrs	r3, r0
 8001c9c:	401e      	ands	r6, r3
 8001c9e:	000c      	movs	r4, r1
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	2e00      	cmp	r6, #0
 8001ca4:	d12e      	bne.n	8001d04 <memmove+0xb0>
 8001ca6:	0015      	movs	r5, r2
 8001ca8:	3d10      	subs	r5, #16
 8001caa:	092d      	lsrs	r5, r5, #4
 8001cac:	46ac      	mov	ip, r5
 8001cae:	012d      	lsls	r5, r5, #4
 8001cb0:	46a8      	mov	r8, r5
 8001cb2:	4480      	add	r8, r0
 8001cb4:	e000      	b.n	8001cb8 <memmove+0x64>
 8001cb6:	002b      	movs	r3, r5
 8001cb8:	001d      	movs	r5, r3
 8001cba:	6827      	ldr	r7, [r4, #0]
 8001cbc:	3510      	adds	r5, #16
 8001cbe:	601f      	str	r7, [r3, #0]
 8001cc0:	6867      	ldr	r7, [r4, #4]
 8001cc2:	605f      	str	r7, [r3, #4]
 8001cc4:	68a7      	ldr	r7, [r4, #8]
 8001cc6:	609f      	str	r7, [r3, #8]
 8001cc8:	68e7      	ldr	r7, [r4, #12]
 8001cca:	3410      	adds	r4, #16
 8001ccc:	60df      	str	r7, [r3, #12]
 8001cce:	4543      	cmp	r3, r8
 8001cd0:	d1f1      	bne.n	8001cb6 <memmove+0x62>
 8001cd2:	4665      	mov	r5, ip
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	240c      	movs	r4, #12
 8001cd8:	3501      	adds	r5, #1
 8001cda:	012d      	lsls	r5, r5, #4
 8001cdc:	1949      	adds	r1, r1, r5
 8001cde:	4013      	ands	r3, r2
 8001ce0:	1945      	adds	r5, r0, r5
 8001ce2:	4214      	tst	r4, r2
 8001ce4:	d011      	beq.n	8001d0a <memmove+0xb6>
 8001ce6:	598c      	ldr	r4, [r1, r6]
 8001ce8:	51ac      	str	r4, [r5, r6]
 8001cea:	3604      	adds	r6, #4
 8001cec:	1b9c      	subs	r4, r3, r6
 8001cee:	2c03      	cmp	r4, #3
 8001cf0:	d8f9      	bhi.n	8001ce6 <memmove+0x92>
 8001cf2:	2403      	movs	r4, #3
 8001cf4:	3b04      	subs	r3, #4
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	18ed      	adds	r5, r5, r3
 8001cfe:	18c9      	adds	r1, r1, r3
 8001d00:	4022      	ands	r2, r4
 8001d02:	e7bc      	b.n	8001c7e <memmove+0x2a>
 8001d04:	1e56      	subs	r6, r2, #1
 8001d06:	0005      	movs	r5, r0
 8001d08:	e7bc      	b.n	8001c84 <memmove+0x30>
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	e7b7      	b.n	8001c7e <memmove+0x2a>
 8001d0e:	46c0      	nop			; (mov r8, r8)

08001d10 <__malloc_lock>:
 8001d10:	4770      	bx	lr
 8001d12:	46c0      	nop			; (mov r8, r8)

08001d14 <__malloc_unlock>:
 8001d14:	4770      	bx	lr
 8001d16:	46c0      	nop			; (mov r8, r8)

08001d18 <_realloc_r>:
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	0007      	movs	r7, r0
 8001d1c:	000c      	movs	r4, r1
 8001d1e:	0015      	movs	r5, r2
 8001d20:	2900      	cmp	r1, #0
 8001d22:	d01b      	beq.n	8001d5c <_realloc_r+0x44>
 8001d24:	2a00      	cmp	r2, #0
 8001d26:	d015      	beq.n	8001d54 <_realloc_r+0x3c>
 8001d28:	f000 f9a4 	bl	8002074 <_malloc_usable_size_r>
 8001d2c:	0026      	movs	r6, r4
 8001d2e:	42a8      	cmp	r0, r5
 8001d30:	d301      	bcc.n	8001d36 <_realloc_r+0x1e>
 8001d32:	0030      	movs	r0, r6
 8001d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d36:	0029      	movs	r1, r5
 8001d38:	0038      	movs	r0, r7
 8001d3a:	f7fe fd89 	bl	8000850 <_malloc_r>
 8001d3e:	1e06      	subs	r6, r0, #0
 8001d40:	d0f7      	beq.n	8001d32 <_realloc_r+0x1a>
 8001d42:	0021      	movs	r1, r4
 8001d44:	002a      	movs	r2, r5
 8001d46:	f7ff ff31 	bl	8001bac <memcpy>
 8001d4a:	0021      	movs	r1, r4
 8001d4c:	0038      	movs	r0, r7
 8001d4e:	f7fe fd29 	bl	80007a4 <_free_r>
 8001d52:	e7ee      	b.n	8001d32 <_realloc_r+0x1a>
 8001d54:	f7fe fd26 	bl	80007a4 <_free_r>
 8001d58:	2600      	movs	r6, #0
 8001d5a:	e7ea      	b.n	8001d32 <_realloc_r+0x1a>
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	f7fe fd77 	bl	8000850 <_malloc_r>
 8001d62:	0006      	movs	r6, r0
 8001d64:	e7e5      	b.n	8001d32 <_realloc_r+0x1a>
 8001d66:	46c0      	nop			; (mov r8, r8)

08001d68 <_init_signal_r.part.0>:
 8001d68:	b510      	push	{r4, lr}
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0004      	movs	r4, r0
 8001d6e:	f7fe fd6f 	bl	8000850 <_malloc_r>
 8001d72:	6460      	str	r0, [r4, #68]	; 0x44
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d007      	beq.n	8001d88 <_init_signal_r.part.0+0x20>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	3280      	adds	r2, #128	; 0x80
 8001d7e:	c008      	stmia	r0!, {r3}
 8001d80:	4290      	cmp	r0, r2
 8001d82:	d1fc      	bne.n	8001d7e <_init_signal_r.part.0+0x16>
 8001d84:	2000      	movs	r0, #0
 8001d86:	bd10      	pop	{r4, pc}
 8001d88:	2001      	movs	r0, #1
 8001d8a:	4240      	negs	r0, r0
 8001d8c:	e7fb      	b.n	8001d86 <_init_signal_r.part.0+0x1e>
 8001d8e:	46c0      	nop			; (mov r8, r8)

08001d90 <_init_signal_r>:
 8001d90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001d92:	b510      	push	{r4, lr}
 8001d94:	2300      	movs	r3, #0
 8001d96:	2a00      	cmp	r2, #0
 8001d98:	d001      	beq.n	8001d9e <_init_signal_r+0xe>
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	bd10      	pop	{r4, pc}
 8001d9e:	f7ff ffe3 	bl	8001d68 <_init_signal_r.part.0>
 8001da2:	0003      	movs	r3, r0
 8001da4:	e7f9      	b.n	8001d9a <_init_signal_r+0xa>
 8001da6:	46c0      	nop			; (mov r8, r8)

08001da8 <_signal_r>:
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	0005      	movs	r5, r0
 8001dac:	000c      	movs	r4, r1
 8001dae:	0016      	movs	r6, r2
 8001db0:	291f      	cmp	r1, #31
 8001db2:	d807      	bhi.n	8001dc4 <_signal_r+0x1c>
 8001db4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <_signal_r+0x26>
 8001dba:	00a4      	lsls	r4, r4, #2
 8001dbc:	191b      	adds	r3, r3, r4
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	601e      	str	r6, [r3, #0]
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}
 8001dc4:	2316      	movs	r3, #22
 8001dc6:	6003      	str	r3, [r0, #0]
 8001dc8:	2001      	movs	r0, #1
 8001dca:	4240      	negs	r0, r0
 8001dcc:	e7f9      	b.n	8001dc2 <_signal_r+0x1a>
 8001dce:	f7ff ffcb 	bl	8001d68 <_init_signal_r.part.0>
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	d101      	bne.n	8001dda <_signal_r+0x32>
 8001dd6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001dd8:	e7ef      	b.n	8001dba <_signal_r+0x12>
 8001dda:	2001      	movs	r0, #1
 8001ddc:	4240      	negs	r0, r0
 8001dde:	e7f0      	b.n	8001dc2 <_signal_r+0x1a>

08001de0 <_raise_r>:
 8001de0:	b570      	push	{r4, r5, r6, lr}
 8001de2:	0005      	movs	r5, r0
 8001de4:	000c      	movs	r4, r1
 8001de6:	291f      	cmp	r1, #31
 8001de8:	d820      	bhi.n	8001e2c <_raise_r+0x4c>
 8001dea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00e      	beq.n	8001e0e <_raise_r+0x2e>
 8001df0:	008a      	lsls	r2, r1, #2
 8001df2:	189b      	adds	r3, r3, r2
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2a00      	cmp	r2, #0
 8001df8:	d009      	beq.n	8001e0e <_raise_r+0x2e>
 8001dfa:	2a01      	cmp	r2, #1
 8001dfc:	d014      	beq.n	8001e28 <_raise_r+0x48>
 8001dfe:	1c51      	adds	r1, r2, #1
 8001e00:	d00e      	beq.n	8001e20 <_raise_r+0x40>
 8001e02:	2100      	movs	r1, #0
 8001e04:	0020      	movs	r0, r4
 8001e06:	6019      	str	r1, [r3, #0]
 8001e08:	4790      	blx	r2
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
 8001e0e:	0028      	movs	r0, r5
 8001e10:	f000 f87a 	bl	8001f08 <_getpid_r>
 8001e14:	0022      	movs	r2, r4
 8001e16:	0001      	movs	r1, r0
 8001e18:	0028      	movs	r0, r5
 8001e1a:	f000 f861 	bl	8001ee0 <_kill_r>
 8001e1e:	e7f5      	b.n	8001e0c <_raise_r+0x2c>
 8001e20:	2316      	movs	r3, #22
 8001e22:	6003      	str	r3, [r0, #0]
 8001e24:	2001      	movs	r0, #1
 8001e26:	e7f1      	b.n	8001e0c <_raise_r+0x2c>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	e7ef      	b.n	8001e0c <_raise_r+0x2c>
 8001e2c:	2316      	movs	r3, #22
 8001e2e:	6003      	str	r3, [r0, #0]
 8001e30:	2001      	movs	r0, #1
 8001e32:	4240      	negs	r0, r0
 8001e34:	e7ea      	b.n	8001e0c <_raise_r+0x2c>
 8001e36:	46c0      	nop			; (mov r8, r8)

08001e38 <__sigtramp_r>:
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	0005      	movs	r5, r0
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	291f      	cmp	r1, #31
 8001e40:	d81d      	bhi.n	8001e7e <__sigtramp_r+0x46>
 8001e42:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <__sigtramp_r+0x32>
 8001e48:	00a2      	lsls	r2, r4, #2
 8001e4a:	189b      	adds	r3, r3, r2
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2a00      	cmp	r2, #0
 8001e50:	d009      	beq.n	8001e66 <__sigtramp_r+0x2e>
 8001e52:	1c51      	adds	r1, r2, #1
 8001e54:	d011      	beq.n	8001e7a <__sigtramp_r+0x42>
 8001e56:	2a01      	cmp	r2, #1
 8001e58:	d00d      	beq.n	8001e76 <__sigtramp_r+0x3e>
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	0020      	movs	r0, r4
 8001e5e:	6019      	str	r1, [r3, #0]
 8001e60:	4790      	blx	r2
 8001e62:	2000      	movs	r0, #0
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
 8001e66:	2001      	movs	r0, #1
 8001e68:	e7fc      	b.n	8001e64 <__sigtramp_r+0x2c>
 8001e6a:	f7ff ff7d 	bl	8001d68 <_init_signal_r.part.0>
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d105      	bne.n	8001e7e <__sigtramp_r+0x46>
 8001e72:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001e74:	e7e8      	b.n	8001e48 <__sigtramp_r+0x10>
 8001e76:	2003      	movs	r0, #3
 8001e78:	e7f4      	b.n	8001e64 <__sigtramp_r+0x2c>
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	e7f2      	b.n	8001e64 <__sigtramp_r+0x2c>
 8001e7e:	2001      	movs	r0, #1
 8001e80:	4240      	negs	r0, r0
 8001e82:	e7ef      	b.n	8001e64 <__sigtramp_r+0x2c>

08001e84 <raise>:
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <raise+0x10>)
 8001e88:	0001      	movs	r1, r0
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	f7ff ffa8 	bl	8001de0 <_raise_r>
 8001e90:	bd10      	pop	{r4, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	20000014 	.word	0x20000014

08001e98 <signal>:
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <signal+0x14>)
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0001      	movs	r1, r0
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff ff80 	bl	8001da8 <_signal_r>
 8001ea8:	bd10      	pop	{r4, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	20000014 	.word	0x20000014

08001eb0 <_init_signal>:
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <_init_signal+0x18>)
 8001eb2:	b510      	push	{r4, lr}
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eba:	2a00      	cmp	r2, #0
 8001ebc:	d000      	beq.n	8001ec0 <_init_signal+0x10>
 8001ebe:	bd10      	pop	{r4, pc}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff ff51 	bl	8001d68 <_init_signal_r.part.0>
 8001ec6:	e7fa      	b.n	8001ebe <_init_signal+0xe>
 8001ec8:	20000014 	.word	0x20000014

08001ecc <__sigtramp>:
 8001ecc:	b510      	push	{r4, lr}
 8001ece:	4b03      	ldr	r3, [pc, #12]	; (8001edc <__sigtramp+0x10>)
 8001ed0:	0001      	movs	r1, r0
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	f7ff ffb0 	bl	8001e38 <__sigtramp_r>
 8001ed8:	bd10      	pop	{r4, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	20000014 	.word	0x20000014

08001ee0 <_kill_r>:
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	b570      	push	{r4, r5, r6, lr}
 8001ee4:	4c07      	ldr	r4, [pc, #28]	; (8001f04 <_kill_r+0x24>)
 8001ee6:	0005      	movs	r5, r0
 8001ee8:	0008      	movs	r0, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	6023      	str	r3, [r4, #0]
 8001eee:	f000 f927 	bl	8002140 <_kill>
 8001ef2:	1c43      	adds	r3, r0, #1
 8001ef4:	d000      	beq.n	8001ef8 <_kill_r+0x18>
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0fb      	beq.n	8001ef6 <_kill_r+0x16>
 8001efe:	602b      	str	r3, [r5, #0]
 8001f00:	e7f9      	b.n	8001ef6 <_kill_r+0x16>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	20000218 	.word	0x20000218

08001f08 <_getpid_r>:
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	f000 f909 	bl	8002120 <_getpid>
 8001f0e:	bd10      	pop	{r4, pc}

08001f10 <__sread>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	000c      	movs	r4, r1
 8001f14:	250e      	movs	r5, #14
 8001f16:	5f49      	ldrsh	r1, [r1, r5]
 8001f18:	f000 f8b6 	bl	8002088 <_read_r>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	db03      	blt.n	8001f28 <__sread+0x18>
 8001f20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f22:	181b      	adds	r3, r3, r0
 8001f24:	6563      	str	r3, [r4, #84]	; 0x54
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	89a3      	ldrh	r3, [r4, #12]
 8001f2a:	4a02      	ldr	r2, [pc, #8]	; (8001f34 <__sread+0x24>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	81a3      	strh	r3, [r4, #12]
 8001f30:	e7f9      	b.n	8001f26 <__sread+0x16>
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	ffffefff 	.word	0xffffefff

08001f38 <__seofread>:
 8001f38:	2000      	movs	r0, #0
 8001f3a:	4770      	bx	lr

08001f3c <__swrite>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	0016      	movs	r6, r2
 8001f40:	001f      	movs	r7, r3
 8001f42:	220c      	movs	r2, #12
 8001f44:	5e8b      	ldrsh	r3, [r1, r2]
 8001f46:	000c      	movs	r4, r1
 8001f48:	0005      	movs	r5, r0
 8001f4a:	220e      	movs	r2, #14
 8001f4c:	5e89      	ldrsh	r1, [r1, r2]
 8001f4e:	05da      	lsls	r2, r3, #23
 8001f50:	d408      	bmi.n	8001f64 <__swrite+0x28>
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <__swrite+0x3c>)
 8001f54:	0028      	movs	r0, r5
 8001f56:	4013      	ands	r3, r2
 8001f58:	81a3      	strh	r3, [r4, #12]
 8001f5a:	0032      	movs	r2, r6
 8001f5c:	003b      	movs	r3, r7
 8001f5e:	f000 f829 	bl	8001fb4 <_write_r>
 8001f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f64:	2200      	movs	r2, #0
 8001f66:	2302      	movs	r3, #2
 8001f68:	f000 f870 	bl	800204c <_lseek_r>
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	5ea3      	ldrsh	r3, [r4, r2]
 8001f70:	220e      	movs	r2, #14
 8001f72:	5ea1      	ldrsh	r1, [r4, r2]
 8001f74:	e7ed      	b.n	8001f52 <__swrite+0x16>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	ffffefff 	.word	0xffffefff

08001f7c <__sseek>:
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	000c      	movs	r4, r1
 8001f80:	250e      	movs	r5, #14
 8001f82:	5f49      	ldrsh	r1, [r1, r5]
 8001f84:	f000 f862 	bl	800204c <_lseek_r>
 8001f88:	1c43      	adds	r3, r0, #1
 8001f8a:	d006      	beq.n	8001f9a <__sseek+0x1e>
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	89a2      	ldrh	r2, [r4, #12]
 8001f90:	015b      	lsls	r3, r3, #5
 8001f92:	4313      	orrs	r3, r2
 8001f94:	81a3      	strh	r3, [r4, #12]
 8001f96:	6560      	str	r0, [r4, #84]	; 0x54
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
 8001f9a:	89a3      	ldrh	r3, [r4, #12]
 8001f9c:	4a01      	ldr	r2, [pc, #4]	; (8001fa4 <__sseek+0x28>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	81a3      	strh	r3, [r4, #12]
 8001fa2:	e7f9      	b.n	8001f98 <__sseek+0x1c>
 8001fa4:	ffffefff 	.word	0xffffefff

08001fa8 <__sclose>:
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	230e      	movs	r3, #14
 8001fac:	5ec9      	ldrsh	r1, [r1, r3]
 8001fae:	f000 f815 	bl	8001fdc <_close_r>
 8001fb2:	bd10      	pop	{r4, pc}

08001fb4 <_write_r>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	0005      	movs	r5, r0
 8001fb8:	0008      	movs	r0, r1
 8001fba:	0011      	movs	r1, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4c06      	ldr	r4, [pc, #24]	; (8001fd8 <_write_r+0x24>)
 8001fc0:	6022      	str	r2, [r4, #0]
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	f000 f8e2 	bl	800218c <_write>
 8001fc8:	1c43      	adds	r3, r0, #1
 8001fca:	d000      	beq.n	8001fce <_write_r+0x1a>
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0fb      	beq.n	8001fcc <_write_r+0x18>
 8001fd4:	602b      	str	r3, [r5, #0]
 8001fd6:	e7f9      	b.n	8001fcc <_write_r+0x18>
 8001fd8:	20000218 	.word	0x20000218

08001fdc <_close_r>:
 8001fdc:	2300      	movs	r3, #0
 8001fde:	b570      	push	{r4, r5, r6, lr}
 8001fe0:	4c06      	ldr	r4, [pc, #24]	; (8001ffc <_close_r+0x20>)
 8001fe2:	0005      	movs	r5, r0
 8001fe4:	0008      	movs	r0, r1
 8001fe6:	6023      	str	r3, [r4, #0]
 8001fe8:	f000 f88a 	bl	8002100 <_close>
 8001fec:	1c43      	adds	r3, r0, #1
 8001fee:	d000      	beq.n	8001ff2 <_close_r+0x16>
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0fb      	beq.n	8001ff0 <_close_r+0x14>
 8001ff8:	602b      	str	r3, [r5, #0]
 8001ffa:	e7f9      	b.n	8001ff0 <_close_r+0x14>
 8001ffc:	20000218 	.word	0x20000218

08002000 <_fstat_r>:
 8002000:	2300      	movs	r3, #0
 8002002:	b570      	push	{r4, r5, r6, lr}
 8002004:	4c07      	ldr	r4, [pc, #28]	; (8002024 <_fstat_r+0x24>)
 8002006:	0005      	movs	r5, r0
 8002008:	0008      	movs	r0, r1
 800200a:	0011      	movs	r1, r2
 800200c:	6023      	str	r3, [r4, #0]
 800200e:	f000 f87f 	bl	8002110 <_fstat>
 8002012:	1c43      	adds	r3, r0, #1
 8002014:	d000      	beq.n	8002018 <_fstat_r+0x18>
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0fb      	beq.n	8002016 <_fstat_r+0x16>
 800201e:	602b      	str	r3, [r5, #0]
 8002020:	e7f9      	b.n	8002016 <_fstat_r+0x16>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	20000218 	.word	0x20000218

08002028 <_isatty_r>:
 8002028:	2300      	movs	r3, #0
 800202a:	b570      	push	{r4, r5, r6, lr}
 800202c:	4c06      	ldr	r4, [pc, #24]	; (8002048 <_isatty_r+0x20>)
 800202e:	0005      	movs	r5, r0
 8002030:	0008      	movs	r0, r1
 8002032:	6023      	str	r3, [r4, #0]
 8002034:	f000 f87c 	bl	8002130 <_isatty>
 8002038:	1c43      	adds	r3, r0, #1
 800203a:	d000      	beq.n	800203e <_isatty_r+0x16>
 800203c:	bd70      	pop	{r4, r5, r6, pc}
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0fb      	beq.n	800203c <_isatty_r+0x14>
 8002044:	602b      	str	r3, [r5, #0]
 8002046:	e7f9      	b.n	800203c <_isatty_r+0x14>
 8002048:	20000218 	.word	0x20000218

0800204c <_lseek_r>:
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	0005      	movs	r5, r0
 8002050:	0008      	movs	r0, r1
 8002052:	0011      	movs	r1, r2
 8002054:	2200      	movs	r2, #0
 8002056:	4c06      	ldr	r4, [pc, #24]	; (8002070 <_lseek_r+0x24>)
 8002058:	6022      	str	r2, [r4, #0]
 800205a:	001a      	movs	r2, r3
 800205c:	f000 f878 	bl	8002150 <_lseek>
 8002060:	1c43      	adds	r3, r0, #1
 8002062:	d000      	beq.n	8002066 <_lseek_r+0x1a>
 8002064:	bd70      	pop	{r4, r5, r6, pc}
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0fb      	beq.n	8002064 <_lseek_r+0x18>
 800206c:	602b      	str	r3, [r5, #0]
 800206e:	e7f9      	b.n	8002064 <_lseek_r+0x18>
 8002070:	20000218 	.word	0x20000218

08002074 <_malloc_usable_size_r>:
 8002074:	1f0b      	subs	r3, r1, #4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	1f18      	subs	r0, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	db00      	blt.n	8002080 <_malloc_usable_size_r+0xc>
 800207e:	4770      	bx	lr
 8002080:	580b      	ldr	r3, [r1, r0]
 8002082:	18c0      	adds	r0, r0, r3
 8002084:	e7fb      	b.n	800207e <_malloc_usable_size_r+0xa>
 8002086:	46c0      	nop			; (mov r8, r8)

08002088 <_read_r>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	0005      	movs	r5, r0
 800208c:	0008      	movs	r0, r1
 800208e:	0011      	movs	r1, r2
 8002090:	2200      	movs	r2, #0
 8002092:	4c06      	ldr	r4, [pc, #24]	; (80020ac <_read_r+0x24>)
 8002094:	6022      	str	r2, [r4, #0]
 8002096:	001a      	movs	r2, r3
 8002098:	f000 f862 	bl	8002160 <_read>
 800209c:	1c43      	adds	r3, r0, #1
 800209e:	d000      	beq.n	80020a2 <_read_r+0x1a>
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0fb      	beq.n	80020a0 <_read_r+0x18>
 80020a8:	602b      	str	r3, [r5, #0]
 80020aa:	e7f9      	b.n	80020a0 <_read_r+0x18>
 80020ac:	20000218 	.word	0x20000218

080020b0 <__aeabi_lmul>:
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	0415      	lsls	r5, r2, #16
 80020b4:	0c2d      	lsrs	r5, r5, #16
 80020b6:	000f      	movs	r7, r1
 80020b8:	0001      	movs	r1, r0
 80020ba:	002e      	movs	r6, r5
 80020bc:	46c6      	mov	lr, r8
 80020be:	4684      	mov	ip, r0
 80020c0:	0400      	lsls	r0, r0, #16
 80020c2:	0c14      	lsrs	r4, r2, #16
 80020c4:	0c00      	lsrs	r0, r0, #16
 80020c6:	0c09      	lsrs	r1, r1, #16
 80020c8:	4346      	muls	r6, r0
 80020ca:	434d      	muls	r5, r1
 80020cc:	4360      	muls	r0, r4
 80020ce:	4361      	muls	r1, r4
 80020d0:	1940      	adds	r0, r0, r5
 80020d2:	0c34      	lsrs	r4, r6, #16
 80020d4:	1824      	adds	r4, r4, r0
 80020d6:	b500      	push	{lr}
 80020d8:	42a5      	cmp	r5, r4
 80020da:	d903      	bls.n	80020e4 <__aeabi_lmul+0x34>
 80020dc:	2080      	movs	r0, #128	; 0x80
 80020de:	0240      	lsls	r0, r0, #9
 80020e0:	4680      	mov	r8, r0
 80020e2:	4441      	add	r1, r8
 80020e4:	0c25      	lsrs	r5, r4, #16
 80020e6:	186d      	adds	r5, r5, r1
 80020e8:	4661      	mov	r1, ip
 80020ea:	4359      	muls	r1, r3
 80020ec:	437a      	muls	r2, r7
 80020ee:	0430      	lsls	r0, r6, #16
 80020f0:	1949      	adds	r1, r1, r5
 80020f2:	0424      	lsls	r4, r4, #16
 80020f4:	0c00      	lsrs	r0, r0, #16
 80020f6:	1820      	adds	r0, r4, r0
 80020f8:	1889      	adds	r1, r1, r2
 80020fa:	bc04      	pop	{r2}
 80020fc:	4690      	mov	r8, r2
 80020fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002100 <_close>:
 8002100:	2258      	movs	r2, #88	; 0x58
 8002102:	2001      	movs	r0, #1
 8002104:	4b01      	ldr	r3, [pc, #4]	; (800210c <_close+0xc>)
 8002106:	4240      	negs	r0, r0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	4770      	bx	lr
 800210c:	20000218 	.word	0x20000218

08002110 <_fstat>:
 8002110:	2258      	movs	r2, #88	; 0x58
 8002112:	2001      	movs	r0, #1
 8002114:	4b01      	ldr	r3, [pc, #4]	; (800211c <_fstat+0xc>)
 8002116:	4240      	negs	r0, r0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	4770      	bx	lr
 800211c:	20000218 	.word	0x20000218

08002120 <_getpid>:
 8002120:	2258      	movs	r2, #88	; 0x58
 8002122:	2001      	movs	r0, #1
 8002124:	4b01      	ldr	r3, [pc, #4]	; (800212c <_getpid+0xc>)
 8002126:	4240      	negs	r0, r0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	4770      	bx	lr
 800212c:	20000218 	.word	0x20000218

08002130 <_isatty>:
 8002130:	2258      	movs	r2, #88	; 0x58
 8002132:	4b02      	ldr	r3, [pc, #8]	; (800213c <_isatty+0xc>)
 8002134:	2000      	movs	r0, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	4770      	bx	lr
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	20000218 	.word	0x20000218

08002140 <_kill>:
 8002140:	2258      	movs	r2, #88	; 0x58
 8002142:	2001      	movs	r0, #1
 8002144:	4b01      	ldr	r3, [pc, #4]	; (800214c <_kill+0xc>)
 8002146:	4240      	negs	r0, r0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	4770      	bx	lr
 800214c:	20000218 	.word	0x20000218

08002150 <_lseek>:
 8002150:	2258      	movs	r2, #88	; 0x58
 8002152:	2001      	movs	r0, #1
 8002154:	4b01      	ldr	r3, [pc, #4]	; (800215c <_lseek+0xc>)
 8002156:	4240      	negs	r0, r0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	4770      	bx	lr
 800215c:	20000218 	.word	0x20000218

08002160 <_read>:
 8002160:	2258      	movs	r2, #88	; 0x58
 8002162:	2001      	movs	r0, #1
 8002164:	4b01      	ldr	r3, [pc, #4]	; (800216c <_read+0xc>)
 8002166:	4240      	negs	r0, r0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	4770      	bx	lr
 800216c:	20000218 	.word	0x20000218

08002170 <_sbrk>:
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <_sbrk+0x14>)
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <_sbrk+0x10>
 8002178:	1818      	adds	r0, r3, r0
 800217a:	6010      	str	r0, [r2, #0]
 800217c:	0018      	movs	r0, r3
 800217e:	4770      	bx	lr
 8002180:	4b01      	ldr	r3, [pc, #4]	; (8002188 <_sbrk+0x18>)
 8002182:	e7f9      	b.n	8002178 <_sbrk+0x8>
 8002184:	200001a4 	.word	0x200001a4
 8002188:	20000220 	.word	0x20000220

0800218c <_write>:
 800218c:	2258      	movs	r2, #88	; 0x58
 800218e:	2001      	movs	r0, #1
 8002190:	4b01      	ldr	r3, [pc, #4]	; (8002198 <_write+0xc>)
 8002192:	4240      	negs	r0, r0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	4770      	bx	lr
 8002198:	20000218 	.word	0x20000218

0800219c <_exit>:
 800219c:	e7fe      	b.n	800219c <_exit>
 800219e:	46c0      	nop			; (mov r8, r8)

080021a0 <verify>:
#include "../simpleserial/simpleserial.h"

// Correct values but random permutation.
uint8_t arr[] = {10,20,30,40,50,60,70,80,90,100,110,120,130,140,150};

uint8_t verify(uint8_t* data, uint8_t dlen) {
 80021a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021a2:	2301      	movs	r3, #1
  uint8_t result = 1;
  for (int i = 0; i < 15; i++) {
 80021a4:	2200      	movs	r2, #0
    result *= (arr[i] == data[i]);
 80021a6:	4d0a      	ldr	r5, [pc, #40]	; (80021d0 <verify+0x30>)
 80021a8:	5c84      	ldrb	r4, [r0, r2]
 80021aa:	5d51      	ldrb	r1, [r2, r5]
  for (int i = 0; i < 15; i++) {
 80021ac:	3201      	adds	r2, #1
    result *= (arr[i] == data[i]);
 80021ae:	1b09      	subs	r1, r1, r4
 80021b0:	424c      	negs	r4, r1
 80021b2:	4161      	adcs	r1, r4
 80021b4:	434b      	muls	r3, r1
 80021b6:	b2db      	uxtb	r3, r3
  for (int i = 0; i < 15; i++) {
 80021b8:	2a0f      	cmp	r2, #15
 80021ba:	d1f5      	bne.n	80021a8 <verify+0x8>
 80021bc:	466a      	mov	r2, sp
  }
  simpleserial_put('r', 1, &result); // GOAL is to output 1
 80021be:	2101      	movs	r1, #1
 80021c0:	71d3      	strb	r3, [r2, #7]
 80021c2:	2072      	movs	r0, #114	; 0x72
 80021c4:	3207      	adds	r2, #7
 80021c6:	f000 f91f 	bl	8002408 <simpleserial_put>
  return result;
 80021ca:	466b      	mov	r3, sp
 80021cc:	79d8      	ldrb	r0, [r3, #7]
}
 80021ce:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80021d0:	20000000 	.word	0x20000000

080021d4 <verify1>:

uint8_t verify1(uint8_t* data, uint8_t dlen,uint8_t val) {
  uint8_t is_present = 0x0;
  for (int i = 0; i < dlen; i++) {
 80021d4:	2300      	movs	r3, #0
uint8_t verify1(uint8_t* data, uint8_t dlen,uint8_t val) {
 80021d6:	b570      	push	{r4, r5, r6, lr}
  uint8_t is_present = 0x0;
 80021d8:	001d      	movs	r5, r3
  for (int i = 0; i < dlen; i++) {
 80021da:	4299      	cmp	r1, r3
 80021dc:	dc02      	bgt.n	80021e4 <verify1+0x10>
      is_present |= (data[i]==val);
  }
  return !is_present;
 80021de:	2001      	movs	r0, #1
 80021e0:	4068      	eors	r0, r5
}
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
      is_present |= (data[i]==val);
 80021e4:	5cc4      	ldrb	r4, [r0, r3]
  for (int i = 0; i < dlen; i++) {
 80021e6:	3301      	adds	r3, #1
      is_present |= (data[i]==val);
 80021e8:	1aa4      	subs	r4, r4, r2
 80021ea:	4266      	negs	r6, r4
 80021ec:	4174      	adcs	r4, r6
 80021ee:	4325      	orrs	r5, r4
  for (int i = 0; i < dlen; i++) {
 80021f0:	e7f3      	b.n	80021da <verify1+0x6>

080021f2 <permute>:

uint8_t permute(uint8_t* array,int n){
 80021f2:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80021f4:	b0ff      	sub	sp, #508	; 0x1fc
 80021f6:	000c      	movs	r4, r1
 80021f8:	0007      	movs	r7, r0
    srand(HAL_GetTick());
 80021fa:	f000 fa83 	bl	8002704 <HAL_GetTick>
 80021fe:	f7fe fa05 	bl	800060c <srand>
    uint8_t perm[256];
    for (int i = 0; i<n ; i++ )
 8002202:	2300      	movs	r3, #0
 8002204:	42a3      	cmp	r3, r4
 8002206:	db0d      	blt.n	8002224 <permute+0x32>
        perm[i] = n;
        
    int k = 0;
 8002208:	2600      	movs	r6, #0
    while(k<n){
 800220a:	42a6      	cmp	r6, r4
 800220c:	db0e      	blt.n	800222c <permute+0x3a>
        uint8_t isok = verify1(perm,n,j);
        perm[k] = perm[k]*(1-isok) + j*isok;
        k = k + isok;
    }
    uint8_t temp[256];
    for(int i=0;i<n;i++){
 800220e:	2300      	movs	r3, #0
        temp[i] = array[i];
 8002210:	aa40      	add	r2, sp, #256	; 0x100
    for(int i=0;i<n;i++){
 8002212:	42a3      	cmp	r3, r4
 8002214:	db20      	blt.n	8002258 <permute+0x66>
    }
    for(int i=0;i<n;i++){
 8002216:	2300      	movs	r3, #0
        array[i]=temp[perm[i]];
 8002218:	aa40      	add	r2, sp, #256	; 0x100
    for(int i=0;i<n;i++){
 800221a:	42a3      	cmp	r3, r4
 800221c:	db20      	blt.n	8002260 <permute+0x6e>
    }
    return 0;
}
 800221e:	2000      	movs	r0, #0
 8002220:	b07f      	add	sp, #508	; 0x1fc
 8002222:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
        perm[i] = n;
 8002224:	466a      	mov	r2, sp
 8002226:	549c      	strb	r4, [r3, r2]
    for (int i = 0; i<n ; i++ )
 8002228:	3301      	adds	r3, #1
 800222a:	e7eb      	b.n	8002204 <permute+0x12>
        int m = rand();
 800222c:	f7fe fa1e 	bl	800066c <rand>
        uint8_t j = m%n;
 8002230:	0021      	movs	r1, r4
 8002232:	f7fe f96f 	bl	8000514 <__aeabi_idivmod>
 8002236:	b2cd      	uxtb	r5, r1
        uint8_t isok = verify1(perm,n,j);
 8002238:	002a      	movs	r2, r5
 800223a:	b2e1      	uxtb	r1, r4
 800223c:	4668      	mov	r0, sp
 800223e:	f7ff ffc9 	bl	80021d4 <verify1>
        perm[k] = perm[k]*(1-isok) + j*isok;
 8002242:	2301      	movs	r3, #1
 8002244:	1a19      	subs	r1, r3, r0
 8002246:	466b      	mov	r3, sp
 8002248:	5d9b      	ldrb	r3, [r3, r6]
 800224a:	4345      	muls	r5, r0
 800224c:	434b      	muls	r3, r1
 800224e:	195d      	adds	r5, r3, r5
 8002250:	466b      	mov	r3, sp
 8002252:	559d      	strb	r5, [r3, r6]
        k = k + isok;
 8002254:	1836      	adds	r6, r6, r0
 8002256:	e7d8      	b.n	800220a <permute+0x18>
        temp[i] = array[i];
 8002258:	5cf9      	ldrb	r1, [r7, r3]
 800225a:	5499      	strb	r1, [r3, r2]
    for(int i=0;i<n;i++){
 800225c:	3301      	adds	r3, #1
 800225e:	e7d8      	b.n	8002212 <permute+0x20>
        array[i]=temp[perm[i]];
 8002260:	4669      	mov	r1, sp
 8002262:	5c59      	ldrb	r1, [r3, r1]
 8002264:	5c51      	ldrb	r1, [r2, r1]
 8002266:	54f9      	strb	r1, [r7, r3]
    for(int i=0;i<n;i++){
 8002268:	3301      	adds	r3, #1
 800226a:	e7d6      	b.n	800221a <permute+0x28>

0800226c <draw>:

void draw(uint8_t* arr, int n) {
 800226c:	b570      	push	{r4, r5, r6, lr}
  volatile int x = 1234;
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <draw+0x58>)
void draw(uint8_t* arr, int n) {
 8002270:	b0c2      	sub	sp, #264	; 0x108
  volatile int x = 1234;
 8002272:	9300      	str	r3, [sp, #0]
void draw(uint8_t* arr, int n) {
 8002274:	0005      	movs	r5, r0
 8002276:	000c      	movs	r4, r1
  // countermeasure
  // store a random permutation in arr_i
  // use that to index into arr
  uint8_t arr_i[256];
  for(int i=0;i<n;i++){
 8002278:	2300      	movs	r3, #0
 800227a:	42a3      	cmp	r3, r4
 800227c:	db09      	blt.n	8002292 <draw+0x26>
    arr_i[i] = i;
  }
  permute(arr_i,n);
 800227e:	0021      	movs	r1, r4
 8002280:	a802      	add	r0, sp, #8
 8002282:	f7ff ffb6 	bl	80021f2 <permute>
  for (int i = 0; i < n; i++) {
 8002286:	2300      	movs	r3, #0
    int i_ = arr_i[i];
    for (volatile int j = 0; j < arr[i_]; j++) {
 8002288:	0019      	movs	r1, r3
  for (int i = 0; i < n; i++) {
 800228a:	42a3      	cmp	r3, r4
 800228c:	db07      	blt.n	800229e <draw+0x32>
      x = x * j;
    }
  }
}
 800228e:	b042      	add	sp, #264	; 0x108
 8002290:	bd70      	pop	{r4, r5, r6, pc}
    arr_i[i] = i;
 8002292:	466a      	mov	r2, sp
 8002294:	2108      	movs	r1, #8
 8002296:	1852      	adds	r2, r2, r1
 8002298:	54d3      	strb	r3, [r2, r3]
  for(int i=0;i<n;i++){
 800229a:	3301      	adds	r3, #1
 800229c:	e7ed      	b.n	800227a <draw+0xe>
    int i_ = arr_i[i];
 800229e:	2008      	movs	r0, #8
 80022a0:	466a      	mov	r2, sp
 80022a2:	1812      	adds	r2, r2, r0
 80022a4:	5cd2      	ldrb	r2, [r2, r3]
    for (volatile int j = 0; j < arr[i_]; j++) {
 80022a6:	9101      	str	r1, [sp, #4]
 80022a8:	5ca8      	ldrb	r0, [r5, r2]
 80022aa:	9a01      	ldr	r2, [sp, #4]
 80022ac:	4290      	cmp	r0, r2
 80022ae:	dc01      	bgt.n	80022b4 <draw+0x48>
  for (int i = 0; i < n; i++) {
 80022b0:	3301      	adds	r3, #1
 80022b2:	e7ea      	b.n	800228a <draw+0x1e>
      x = x * j;
 80022b4:	9e00      	ldr	r6, [sp, #0]
 80022b6:	9a01      	ldr	r2, [sp, #4]
 80022b8:	4372      	muls	r2, r6
 80022ba:	9200      	str	r2, [sp, #0]
    for (volatile int j = 0; j < arr[i_]; j++) {
 80022bc:	9a01      	ldr	r2, [sp, #4]
 80022be:	3201      	adds	r2, #1
 80022c0:	9201      	str	r2, [sp, #4]
 80022c2:	e7f2      	b.n	80022aa <draw+0x3e>
 80022c4:	000004d2 	.word	0x000004d2

080022c8 <casino>:
//       x = x * j;
//     }
//   }
// }

uint8_t casino(uint8_t* data, uint8_t dlen) {
 80022c8:	b510      	push	{r4, lr}
  trigger_high();
 80022ca:	f000 f9e5 	bl	8002698 <trigger_high>
  int n = sizeof(arr)/sizeof(arr[0]);
  draw(arr, n);
 80022ce:	4c07      	ldr	r4, [pc, #28]	; (80022ec <casino+0x24>)
 80022d0:	210f      	movs	r1, #15
 80022d2:	0020      	movs	r0, r4
 80022d4:	f7ff ffca 	bl	800226c <draw>
  simpleserial_put('r', n, arr);
 80022d8:	0022      	movs	r2, r4
 80022da:	210f      	movs	r1, #15
 80022dc:	2072      	movs	r0, #114	; 0x72
 80022de:	f000 f893 	bl	8002408 <simpleserial_put>
  trigger_low();
 80022e2:	f000 f9e1 	bl	80026a8 <trigger_low>
  return 0;
}
 80022e6:	2000      	movs	r0, #0
 80022e8:	bd10      	pop	{r4, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	20000000 	.word	0x20000000

080022f0 <main>:

int main(void) {
 80022f0:	b510      	push	{r4, lr}

  // WARNING: Do not call verify and casino from the same python process
  // Just call one at a time

  platform_init();
 80022f2:	f000 f941 	bl	8002578 <platform_init>
  init_uart();
 80022f6:	f000 f96b 	bl	80025d0 <init_uart>
  trigger_setup();
 80022fa:	f000 f9a9 	bl	8002650 <trigger_setup>
  simpleserial_init();
 80022fe:	f000 f86b 	bl	80023d8 <simpleserial_init>
  simpleserial_addcmd('a', 16, verify);
 8002302:	2110      	movs	r1, #16
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <main+0x2c>)
 8002306:	2061      	movs	r0, #97	; 0x61
 8002308:	f000 f860 	bl	80023cc <simpleserial_addcmd>
  simpleserial_addcmd('s', 0, casino);
 800230c:	2100      	movs	r1, #0
 800230e:	2073      	movs	r0, #115	; 0x73
 8002310:	4a03      	ldr	r2, [pc, #12]	; (8002320 <main+0x30>)
 8002312:	f000 f85b 	bl	80023cc <simpleserial_addcmd>
  while(1) {
		simpleserial_get();
 8002316:	f000 f8c9 	bl	80024ac <simpleserial_get>
  while(1) {
 800231a:	e7fc      	b.n	8002316 <main+0x26>
 800231c:	080021a1 	.word	0x080021a1
 8002320:	080022c9 	.word	0x080022c9

08002324 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 8002324:	2001      	movs	r0, #1
 8002326:	4770      	bx	lr

08002328 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8002328:	b570      	push	{r4, r5, r6, lr}
	for(int i = 0; i < len; i++)
 800232a:	2400      	movs	r4, #0
 800232c:	4284      	cmp	r4, r0
 800232e:	db01      	blt.n	8002334 <hex_decode+0xc>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 8002330:	2000      	movs	r0, #0
 8002332:	e01f      	b.n	8002374 <hex_decode+0x4c>
		char n_lo = ascii_buf[2*i+1];
 8002334:	784d      	ldrb	r5, [r1, #1]
		char n_hi = ascii_buf[2*i];
 8002336:	780b      	ldrb	r3, [r1, #0]
		if(n_lo >= '0' && n_lo <= '9')
 8002338:	002e      	movs	r6, r5
 800233a:	3e30      	subs	r6, #48	; 0x30
 800233c:	b2f6      	uxtb	r6, r6
 800233e:	2e09      	cmp	r6, #9
 8002340:	d80c      	bhi.n	800235c <hex_decode+0x34>
			data_buf[i] = n_lo - '0';
 8002342:	5516      	strb	r6, [r2, r4]
		if(n_hi >= '0' && n_hi <= '9')
 8002344:	001d      	movs	r5, r3
 8002346:	3d30      	subs	r5, #48	; 0x30
 8002348:	b2ee      	uxtb	r6, r5
 800234a:	2e09      	cmp	r6, #9
 800234c:	d815      	bhi.n	800237a <hex_decode+0x52>
			data_buf[i] |= (n_hi - '0') << 4;
 800234e:	5d13      	ldrb	r3, [r2, r4]
 8002350:	012d      	lsls	r5, r5, #4
 8002352:	431d      	orrs	r5, r3
 8002354:	5515      	strb	r5, [r2, r4]
	for(int i = 0; i < len; i++)
 8002356:	3401      	adds	r4, #1
 8002358:	3102      	adds	r1, #2
 800235a:	e7e7      	b.n	800232c <hex_decode+0x4>
		else if(n_lo >= 'A' && n_lo <= 'F')
 800235c:	002e      	movs	r6, r5
 800235e:	3e41      	subs	r6, #65	; 0x41
 8002360:	2e05      	cmp	r6, #5
 8002362:	d802      	bhi.n	800236a <hex_decode+0x42>
			data_buf[i] = n_lo - 'A' + 10;
 8002364:	3d37      	subs	r5, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8002366:	5515      	strb	r5, [r2, r4]
 8002368:	e7ec      	b.n	8002344 <hex_decode+0x1c>
		else if(n_lo >= 'a' && n_lo <= 'f')
 800236a:	002e      	movs	r6, r5
 800236c:	3e61      	subs	r6, #97	; 0x61
 800236e:	2e05      	cmp	r6, #5
 8002370:	d901      	bls.n	8002376 <hex_decode+0x4e>
			return 1;
 8002372:	2001      	movs	r0, #1
}
 8002374:	bd70      	pop	{r4, r5, r6, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8002376:	3d57      	subs	r5, #87	; 0x57
 8002378:	e7f5      	b.n	8002366 <hex_decode+0x3e>
		else if(n_hi >= 'A' && n_hi <= 'F')
 800237a:	001d      	movs	r5, r3
 800237c:	3d41      	subs	r5, #65	; 0x41
 800237e:	2d05      	cmp	r5, #5
 8002380:	d805      	bhi.n	800238e <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8002382:	3b37      	subs	r3, #55	; 0x37
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8002384:	5d15      	ldrb	r5, [r2, r4]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	432b      	orrs	r3, r5
 800238a:	5513      	strb	r3, [r2, r4]
 800238c:	e7e3      	b.n	8002356 <hex_decode+0x2e>
		else if(n_hi >= 'a' && n_hi <= 'f')
 800238e:	001d      	movs	r5, r3
 8002390:	3d61      	subs	r5, #97	; 0x61
 8002392:	2d05      	cmp	r5, #5
 8002394:	d8ed      	bhi.n	8002372 <hex_decode+0x4a>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8002396:	3b57      	subs	r3, #87	; 0x57
 8002398:	e7f4      	b.n	8002384 <hex_decode+0x5c>
 800239a:	0000      	movs	r0, r0

0800239c <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(num_commands >= MAX_SS_CMDS)
 800239e:	4e09      	ldr	r6, [pc, #36]	; (80023c4 <simpleserial_addcmd_flags+0x28>)
{
 80023a0:	0005      	movs	r5, r0
	if(num_commands >= MAX_SS_CMDS)
 80023a2:	6834      	ldr	r4, [r6, #0]
		return 1;
 80023a4:	2001      	movs	r0, #1
	if(num_commands >= MAX_SS_CMDS)
 80023a6:	2c0f      	cmp	r4, #15
 80023a8:	dc0b      	bgt.n	80023c2 <simpleserial_addcmd_flags+0x26>

	if(len >= MAX_SS_LEN)
 80023aa:	29bf      	cmp	r1, #191	; 0xbf
 80023ac:	d809      	bhi.n	80023c2 <simpleserial_addcmd_flags+0x26>
		return 1;

	commands[num_commands].c   = c;
 80023ae:	4806      	ldr	r0, [pc, #24]	; (80023c8 <simpleserial_addcmd_flags+0x2c>)
 80023b0:	0127      	lsls	r7, r4, #4
 80023b2:	543d      	strb	r5, [r7, r0]
	commands[num_commands].len = len;
 80023b4:	19c0      	adds	r0, r0, r7
 80023b6:	6041      	str	r1, [r0, #4]
	commands[num_commands].fp  = fp;
 80023b8:	6082      	str	r2, [r0, #8]
	commands[num_commands].flags = fl;
 80023ba:	7303      	strb	r3, [r0, #12]
	num_commands++;

	return 0;
 80023bc:	2000      	movs	r0, #0
	num_commands++;
 80023be:	3401      	adds	r4, #1
 80023c0:	6034      	str	r4, [r6, #0]
}
 80023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c4:	20000094 	.word	0x20000094
 80023c8:	20000098 	.word	0x20000098

080023cc <simpleserial_addcmd>:
{
 80023cc:	b510      	push	{r4, lr}
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 80023ce:	2300      	movs	r3, #0
 80023d0:	f7ff ffe4 	bl	800239c <simpleserial_addcmd_flags>
}
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0000      	movs	r0, r0

080023d8 <simpleserial_init>:
{
 80023d8:	b510      	push	{r4, lr}
	simpleserial_addcmd('v', 0, check_version);
 80023da:	2100      	movs	r1, #0
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <simpleserial_init+0x24>)
 80023de:	2076      	movs	r0, #118	; 0x76
 80023e0:	f7ff fff4 	bl	80023cc <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80023e4:	2100      	movs	r1, #0
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <simpleserial_init+0x28>)
 80023e8:	2077      	movs	r0, #119	; 0x77
 80023ea:	f7ff ffef 	bl	80023cc <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 80023ee:	2100      	movs	r1, #0
 80023f0:	2079      	movs	r0, #121	; 0x79
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <simpleserial_init+0x2c>)
 80023f4:	f7ff ffea 	bl	80023cc <simpleserial_addcmd>
}
 80023f8:	bd10      	pop	{r4, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	08002325 	.word	0x08002325
 8002400:	0800245d 	.word	0x0800245d
 8002404:	08002441 	.word	0x08002441

08002408 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	000d      	movs	r5, r1
 800240c:	0014      	movs	r4, r2

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
 800240e:	270f      	movs	r7, #15
	putch(c);
 8002410:	f000 f96a 	bl	80026e8 <putch>
	for(int i = 0; i < size; i++)
 8002414:	1965      	adds	r5, r4, r5
 8002416:	42ac      	cmp	r4, r5
 8002418:	d103      	bne.n	8002422 <simpleserial_put+0x1a>
	}

	// Write trailing '\n'
	putch('\n');
 800241a:	200a      	movs	r0, #10
 800241c:	f000 f964 	bl	80026e8 <putch>
}
 8002420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		putch(hex_lookup[output[i] >> 4 ]);
 8002422:	7823      	ldrb	r3, [r4, #0]
 8002424:	4e05      	ldr	r6, [pc, #20]	; (800243c <simpleserial_put+0x34>)
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	5cf0      	ldrb	r0, [r6, r3]
 800242a:	f000 f95d 	bl	80026e8 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 800242e:	7823      	ldrb	r3, [r4, #0]
 8002430:	3401      	adds	r4, #1
 8002432:	403b      	ands	r3, r7
 8002434:	5cf0      	ldrb	r0, [r6, r3]
 8002436:	f000 f957 	bl	80026e8 <putch>
	for(int i = 0; i < size; i++)
 800243a:	e7ec      	b.n	8002416 <simpleserial_put+0xe>
 800243c:	0800314c 	.word	0x0800314c

08002440 <ss_num_commands>:
{
 8002440:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 8002442:	466b      	mov	r3, sp
 8002444:	1dda      	adds	r2, r3, #7
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <ss_num_commands+0x18>)
    simpleserial_put('r', 0x01, &ncmds);
 8002448:	2072      	movs	r0, #114	; 0x72
    uint8_t ncmds = num_commands & 0xFF;
 800244a:	681b      	ldr	r3, [r3, #0]
    simpleserial_put('r', 0x01, &ncmds);
 800244c:	2101      	movs	r1, #1
    uint8_t ncmds = num_commands & 0xFF;
 800244e:	7013      	strb	r3, [r2, #0]
    simpleserial_put('r', 0x01, &ncmds);
 8002450:	f7ff ffda 	bl	8002408 <simpleserial_put>
}
 8002454:	2000      	movs	r0, #0
 8002456:	bd0e      	pop	{r1, r2, r3, pc}
 8002458:	20000094 	.word	0x20000094

0800245c <ss_get_commands>:
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800245c:	2203      	movs	r2, #3
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <ss_get_commands+0x48>)
{
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	4694      	mov	ip, r2
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002464:	681c      	ldr	r4, [r3, #0]
 8002466:	2300      	movs	r3, #0
        repr_cmd_buf[i].c = commands[i].c;
 8002468:	4d0f      	ldr	r5, [pc, #60]	; (80024a8 <ss_get_commands+0x4c>)
{
 800246a:	b08d      	sub	sp, #52	; 0x34
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800246c:	b2e6      	uxtb	r6, r4
 800246e:	42b3      	cmp	r3, r6
 8002470:	db09      	blt.n	8002486 <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8002472:	4661      	mov	r1, ip
 8002474:	4361      	muls	r1, r4
 8002476:	466a      	mov	r2, sp
 8002478:	2072      	movs	r0, #114	; 0x72
 800247a:	b2c9      	uxtb	r1, r1
 800247c:	f7ff ffc4 	bl	8002408 <simpleserial_put>
}
 8002480:	2000      	movs	r0, #0
 8002482:	b00d      	add	sp, #52	; 0x34
 8002484:	bdf0      	pop	{r4, r5, r6, r7, pc}
        repr_cmd_buf[i].c = commands[i].c;
 8002486:	4662      	mov	r2, ip
 8002488:	4669      	mov	r1, sp
 800248a:	435a      	muls	r2, r3
 800248c:	0118      	lsls	r0, r3, #4
 800248e:	5d47      	ldrb	r7, [r0, r5]
        repr_cmd_buf[i].len = commands[i].len;
 8002490:	1828      	adds	r0, r5, r0
        repr_cmd_buf[i].c = commands[i].c;
 8002492:	548f      	strb	r7, [r1, r2]
        repr_cmd_buf[i].len = commands[i].len;
 8002494:	6841      	ldr	r1, [r0, #4]
        repr_cmd_buf[i].flags = commands[i].flags;
 8002496:	7b00      	ldrb	r0, [r0, #12]
        repr_cmd_buf[i].len = commands[i].len;
 8002498:	446a      	add	r2, sp
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800249a:	3301      	adds	r3, #1
        repr_cmd_buf[i].len = commands[i].len;
 800249c:	7051      	strb	r1, [r2, #1]
        repr_cmd_buf[i].flags = commands[i].flags;
 800249e:	7090      	strb	r0, [r2, #2]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e7e4      	b.n	800246e <ss_get_commands+0x12>
 80024a4:	20000094 	.word	0x20000094
 80024a8:	20000098 	.word	0x20000098

080024ac <simpleserial_get>:
{
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	4c2f      	ldr	r4, [pc, #188]	; (800256c <simpleserial_get+0xc0>)
 80024b0:	44a5      	add	sp, r4
	c = getch();
 80024b2:	f000 f901 	bl	80026b8 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 80024b6:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <simpleserial_get+0xc4>)
		if(commands[cmd].c == c)
 80024b8:	492e      	ldr	r1, [pc, #184]	; (8002574 <simpleserial_get+0xc8>)
	for(cmd = 0; cmd < num_commands; cmd++)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	429a      	cmp	r2, r3
 80024c0:	dc04      	bgt.n	80024cc <simpleserial_get+0x20>
	if(cmd == num_commands)
 80024c2:	d107      	bne.n	80024d4 <simpleserial_get+0x28>
}
 80024c4:	2393      	movs	r3, #147	; 0x93
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	449d      	add	sp, r3
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(commands[cmd].c == c)
 80024cc:	011c      	lsls	r4, r3, #4
 80024ce:	5d0c      	ldrb	r4, [r1, r4]
 80024d0:	4284      	cmp	r4, r0
 80024d2:	d13f      	bne.n	8002554 <simpleserial_get+0xa8>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 80024d4:	2701      	movs	r7, #1
 80024d6:	4d27      	ldr	r5, [pc, #156]	; (8002574 <simpleserial_get+0xc8>)
 80024d8:	011c      	lsls	r4, r3, #4
 80024da:	192e      	adds	r6, r5, r4
 80024dc:	7b33      	ldrb	r3, [r6, #12]
 80024de:	423b      	tst	r3, r7
 80024e0:	d018      	beq.n	8002514 <simpleserial_get+0x68>
		uint8_t l = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	466a      	mov	r2, sp
 80024e6:	7213      	strb	r3, [r2, #8]
		buff[0] = getch();
 80024e8:	f000 f8e6 	bl	80026b8 <getch>
 80024ec:	22c8      	movs	r2, #200	; 0xc8
 80024ee:	466b      	mov	r3, sp
 80024f0:	189b      	adds	r3, r3, r2
 80024f2:	7018      	strb	r0, [r3, #0]
		buff[1] = getch();
 80024f4:	f000 f8e0 	bl	80026b8 <getch>
 80024f8:	22c9      	movs	r2, #201	; 0xc9
 80024fa:	466b      	mov	r3, sp
 80024fc:	189b      	adds	r3, r3, r2
 80024fe:	7018      	strb	r0, [r3, #0]
		if (hex_decode(1, buff, &l))
 8002500:	aa02      	add	r2, sp, #8
 8002502:	0038      	movs	r0, r7
 8002504:	a932      	add	r1, sp, #200	; 0xc8
 8002506:	f7ff ff0f 	bl	8002328 <hex_decode>
 800250a:	2800      	cmp	r0, #0
 800250c:	d1da      	bne.n	80024c4 <simpleserial_get+0x18>
		commands[cmd].len = l;
 800250e:	466b      	mov	r3, sp
 8002510:	7a1b      	ldrb	r3, [r3, #8]
 8002512:	6073      	str	r3, [r6, #4]
	for(cmd = 0; cmd < num_commands; cmd++)
 8002514:	2600      	movs	r6, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8002516:	192b      	adds	r3, r5, r4
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	42b3      	cmp	r3, r6
 800251e:	d81b      	bhi.n	8002558 <simpleserial_get+0xac>
	c = getch();
 8002520:	f000 f8ca 	bl	80026b8 <getch>
	if(c != '\n' && c != '\r')
 8002524:	280a      	cmp	r0, #10
 8002526:	d001      	beq.n	800252c <simpleserial_get+0x80>
 8002528:	280d      	cmp	r0, #13
 800252a:	d1cb      	bne.n	80024c4 <simpleserial_get+0x18>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 800252c:	192c      	adds	r4, r5, r4
 800252e:	6865      	ldr	r5, [r4, #4]
 8002530:	aa02      	add	r2, sp, #8
 8002532:	0028      	movs	r0, r5
 8002534:	a932      	add	r1, sp, #200	; 0xc8
 8002536:	f7ff fef7 	bl	8002328 <hex_decode>
 800253a:	2800      	cmp	r0, #0
 800253c:	d1c2      	bne.n	80024c4 <simpleserial_get+0x18>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800253e:	b2e9      	uxtb	r1, r5
 8002540:	68a3      	ldr	r3, [r4, #8]
 8002542:	a802      	add	r0, sp, #8
 8002544:	4798      	blx	r3
 8002546:	aa01      	add	r2, sp, #4
 8002548:	7010      	strb	r0, [r2, #0]
	simpleserial_put('z', 1, ret);
 800254a:	2101      	movs	r1, #1
 800254c:	207a      	movs	r0, #122	; 0x7a
 800254e:	f7ff ff5b 	bl	8002408 <simpleserial_put>
 8002552:	e7b7      	b.n	80024c4 <simpleserial_get+0x18>
	for(cmd = 0; cmd < num_commands; cmd++)
 8002554:	3301      	adds	r3, #1
 8002556:	e7b2      	b.n	80024be <simpleserial_get+0x12>
		c = getch();
 8002558:	f000 f8ae 	bl	80026b8 <getch>
		if(c == '\n' || c == '\r')
 800255c:	280a      	cmp	r0, #10
 800255e:	d0b1      	beq.n	80024c4 <simpleserial_get+0x18>
 8002560:	280d      	cmp	r0, #13
 8002562:	d0af      	beq.n	80024c4 <simpleserial_get+0x18>
		ascii_buf[i] = c;
 8002564:	ab32      	add	r3, sp, #200	; 0xc8
 8002566:	54f0      	strb	r0, [r6, r3]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8002568:	3601      	adds	r6, #1
 800256a:	e7d4      	b.n	8002516 <simpleserial_get+0x6a>
 800256c:	fffffdb4 	.word	0xfffffdb4
 8002570:	20000094 	.word	0x20000094
 8002574:	20000098 	.word	0x20000098

08002578 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800257a:	2790      	movs	r7, #144	; 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 800257c:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800257e:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002580:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_2;
 8002582:	2304      	movs	r3, #4
{
 8002584:	b097      	sub	sp, #92	; 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002586:	05ff      	lsls	r7, r7, #23
 8002588:	0038      	movs	r0, r7
 800258a:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 800258c:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800258e:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8002590:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002592:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002594:	f000 fb2a 	bl	8002bec <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 8002598:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800259a:	a905      	add	r1, sp, #20
 800259c:	0038      	movs	r0, r7
	GpioInit.Pin       = GPIO_PIN_4;
 800259e:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80025a0:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 80025a2:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80025a4:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80025a6:	f000 fb21 	bl	8002bec <HAL_GPIO_Init>
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80025aa:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80025ac:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80025ae:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80025b0:	960a      	str	r6, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80025b2:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80025b4:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80025b6:	f000 f8ad 	bl	8002714 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80025ba:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80025bc:	0021      	movs	r1, r4
 80025be:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80025c0:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80025c2:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80025c4:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025c6:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80025c8:	f000 fa86 	bl	8002ad8 <HAL_RCC_ClockConfig>
#endif
}
 80025cc:	b017      	add	sp, #92	; 0x5c
 80025ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025d0 <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	2180      	movs	r1, #128	; 0x80
{
 80025d2:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	4c1b      	ldr	r4, [pc, #108]	; (8002644 <init_uart+0x74>)
 80025d6:	0289      	lsls	r1, r1, #10
 80025d8:	6962      	ldr	r2, [r4, #20]
{
 80025da:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025dc:	430a      	orrs	r2, r1
 80025de:	6162      	str	r2, [r4, #20]
 80025e0:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80025e2:	2090      	movs	r0, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025e4:	400b      	ands	r3, r1
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80025ea:	23c0      	movs	r3, #192	; 0xc0
 80025ec:	00db      	lsls	r3, r3, #3
	GpioInit.Pull      = GPIO_PULLUP;
 80025ee:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80025f0:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80025f2:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80025f6:	a903      	add	r1, sp, #12
 80025f8:	05c0      	lsls	r0, r0, #23
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80025fa:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 80025fc:	9505      	str	r5, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 80025fe:	9507      	str	r5, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002600:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002602:	f000 faf3 	bl	8002bec <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	69a2      	ldr	r2, [r4, #24]
 800260a:	01c9      	lsls	r1, r1, #7
 800260c:	430a      	orrs	r2, r1
 800260e:	61a2      	str	r2, [r4, #24]
 8002610:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 8002612:	480d      	ldr	r0, [pc, #52]	; (8002648 <init_uart+0x78>)
	__HAL_RCC_USART1_CLK_ENABLE();
 8002614:	400b      	ands	r3, r1
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 800261a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800261c:	43b3      	bics	r3, r6
 800261e:	431d      	orrs	r5, r3
	UartHandle.Instance        = USART1;
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <init_uart+0x7c>)
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 8002622:	6325      	str	r5, [r4, #48]	; 0x30
	UartHandle.Instance        = USART1;
 8002624:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8002626:	2396      	movs	r3, #150	; 0x96
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	6043      	str	r3, [r0, #4]
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800262c:	2300      	movs	r3, #0
 800262e:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002630:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002632:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002634:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002636:	330c      	adds	r3, #12
 8002638:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 800263a:	f000 fc41 	bl	8002ec0 <HAL_UART_Init>
}
 800263e:	b008      	add	sp, #32
 8002640:	bd70      	pop	{r4, r5, r6, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	40021000 	.word	0x40021000
 8002648:	200001a8 	.word	0x200001a8
 800264c:	40013800 	.word	0x40013800

08002650 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002650:	2080      	movs	r0, #128	; 0x80
 8002652:	4a10      	ldr	r2, [pc, #64]	; (8002694 <trigger_setup+0x44>)
{
 8002654:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	6951      	ldr	r1, [r2, #20]
 8002658:	0280      	lsls	r0, r0, #10
 800265a:	4301      	orrs	r1, r0
 800265c:	6151      	str	r1, [r2, #20]
 800265e:	6953      	ldr	r3, [r2, #20]
{
 8002660:	b086      	sub	sp, #24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	4003      	ands	r3, r0
 8002664:	9300      	str	r3, [sp, #0]
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002666:	2490      	movs	r4, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002668:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800266a:	2301      	movs	r3, #1
	GpioInit.Pin       = GPIO_PIN_7;
 800266c:	2580      	movs	r5, #128	; 0x80
	GpioInit.Pull      = GPIO_NOPULL;
 800266e:	2600      	movs	r6, #0
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002670:	05e4      	lsls	r4, r4, #23
 8002672:	0020      	movs	r0, r4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002674:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002676:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002678:	3302      	adds	r3, #2
 800267a:	9304      	str	r3, [sp, #16]
	GpioInit.Pin       = GPIO_PIN_7;
 800267c:	9501      	str	r5, [sp, #4]
	GpioInit.Pull      = GPIO_NOPULL;
 800267e:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002680:	f000 fab4 	bl	8002bec <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8002684:	0032      	movs	r2, r6
 8002686:	0029      	movs	r1, r5
 8002688:	0020      	movs	r0, r4
 800268a:	f000 fb61 	bl	8002d50 <HAL_GPIO_WritePin>
}
 800268e:	b006      	add	sp, #24
 8002690:	bd70      	pop	{r4, r5, r6, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000

08002698 <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8002698:	2090      	movs	r0, #144	; 0x90
{
 800269a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800269c:	2201      	movs	r2, #1
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	05c0      	lsls	r0, r0, #23
 80026a2:	f000 fb55 	bl	8002d50 <HAL_GPIO_WritePin>
}
 80026a6:	bd10      	pop	{r4, pc}

080026a8 <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80026a8:	2090      	movs	r0, #144	; 0x90
{
 80026aa:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	05c0      	lsls	r0, r0, #23
 80026b2:	f000 fb4d 	bl	8002d50 <HAL_GPIO_WritePin>
}   
 80026b6:	bd10      	pop	{r4, pc}

080026b8 <getch>:

char getch(void)
{
 80026b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80026ba:	2508      	movs	r5, #8
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 80026bc:	466b      	mov	r3, sp
 80026be:	1ddc      	adds	r4, r3, #7
 80026c0:	2201      	movs	r2, #1
 80026c2:	2332      	movs	r3, #50	; 0x32
 80026c4:	0021      	movs	r1, r4
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <getch+0x28>)
 80026c8:	f000 fc2c 	bl	8002f24 <HAL_UART_Receive>
 80026cc:	2800      	cmp	r0, #0
 80026ce:	d101      	bne.n	80026d4 <getch+0x1c>
	return d;
 80026d0:	7820      	ldrb	r0, [r4, #0]
}
 80026d2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80026d4:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <getch+0x2c>)
 80026d6:	6a13      	ldr	r3, [r2, #32]
 80026d8:	432b      	orrs	r3, r5
 80026da:	6213      	str	r3, [r2, #32]
 80026dc:	e7ee      	b.n	80026bc <getch+0x4>
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	200001a8 	.word	0x200001a8
 80026e4:	40013800 	.word	0x40013800

080026e8 <putch>:

void putch(char c)
{
 80026e8:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
 80026ea:	466b      	mov	r3, sp
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80026ec:	2201      	movs	r2, #1
	uint8_t d  = c;
 80026ee:	1dd9      	adds	r1, r3, #7
 80026f0:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80026f2:	4b02      	ldr	r3, [pc, #8]	; (80026fc <putch+0x14>)
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <putch+0x18>)
 80026f6:	f000 fc8d 	bl	8003014 <HAL_UART_Transmit>
}
 80026fa:	bd07      	pop	{r0, r1, r2, pc}
 80026fc:	00001388 	.word	0x00001388
 8002700:	200001a8 	.word	0x200001a8

08002704 <HAL_GetTick>:
#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <HAL_GetTick+0xc>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	1c42      	adds	r2, r0, #1
 800270a:	601a      	str	r2, [r3, #0]
}
 800270c:	4770      	bx	lr
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	20000198 	.word	0x20000198

08002714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002714:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002716:	6803      	ldr	r3, [r0, #0]
{
 8002718:	0005      	movs	r5, r0
 800271a:	b085      	sub	sp, #20
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271c:	07db      	lsls	r3, r3, #31
 800271e:	d42f      	bmi.n	8002780 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	079b      	lsls	r3, r3, #30
 8002724:	d500      	bpl.n	8002728 <HAL_RCC_OscConfig+0x14>
 8002726:	e081      	b.n	800282c <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	071b      	lsls	r3, r3, #28
 800272c:	d500      	bpl.n	8002730 <HAL_RCC_OscConfig+0x1c>
 800272e:	e0bc      	b.n	80028aa <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	682b      	ldr	r3, [r5, #0]
 8002732:	075b      	lsls	r3, r3, #29
 8002734:	d500      	bpl.n	8002738 <HAL_RCC_OscConfig+0x24>
 8002736:	e0df      	b.n	80028f8 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002738:	682b      	ldr	r3, [r5, #0]
 800273a:	06db      	lsls	r3, r3, #27
 800273c:	d51a      	bpl.n	8002774 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800273e:	696a      	ldr	r2, [r5, #20]
 8002740:	2304      	movs	r3, #4
 8002742:	4cb5      	ldr	r4, [pc, #724]	; (8002a18 <HAL_RCC_OscConfig+0x304>)
 8002744:	2a01      	cmp	r2, #1
 8002746:	d000      	beq.n	800274a <HAL_RCC_OscConfig+0x36>
 8002748:	e14a      	b.n	80029e0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800274a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800274c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800274e:	430b      	orrs	r3, r1
 8002750:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002754:	431a      	orrs	r2, r3
 8002756:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002758:	f7ff ffd4 	bl	8002704 <HAL_GetTick>
 800275c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800275e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002760:	423b      	tst	r3, r7
 8002762:	d100      	bne.n	8002766 <HAL_RCC_OscConfig+0x52>
 8002764:	e135      	b.n	80029d2 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002766:	21f8      	movs	r1, #248	; 0xf8
 8002768:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800276a:	69ab      	ldr	r3, [r5, #24]
 800276c:	438a      	bics	r2, r1
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4313      	orrs	r3, r2
 8002772:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002774:	6a29      	ldr	r1, [r5, #32]
 8002776:	2900      	cmp	r1, #0
 8002778:	d000      	beq.n	800277c <HAL_RCC_OscConfig+0x68>
 800277a:	e159      	b.n	8002a30 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800277c:	2000      	movs	r0, #0
 800277e:	e013      	b.n	80027a8 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002780:	210c      	movs	r1, #12
 8002782:	4ca5      	ldr	r4, [pc, #660]	; (8002a18 <HAL_RCC_OscConfig+0x304>)
 8002784:	6862      	ldr	r2, [r4, #4]
 8002786:	400a      	ands	r2, r1
 8002788:	2a04      	cmp	r2, #4
 800278a:	d006      	beq.n	800279a <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800278c:	6863      	ldr	r3, [r4, #4]
 800278e:	400b      	ands	r3, r1
 8002790:	2b08      	cmp	r3, #8
 8002792:	d10b      	bne.n	80027ac <HAL_RCC_OscConfig+0x98>
 8002794:	6863      	ldr	r3, [r4, #4]
 8002796:	03db      	lsls	r3, r3, #15
 8002798:	d508      	bpl.n	80027ac <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	039b      	lsls	r3, r3, #14
 800279e:	d5bf      	bpl.n	8002720 <HAL_RCC_OscConfig+0xc>
 80027a0:	686b      	ldr	r3, [r5, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1bc      	bne.n	8002720 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
}
 80027a8:	b005      	add	sp, #20
 80027aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ac:	686b      	ldr	r3, [r5, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d113      	bne.n	80027da <HAL_RCC_OscConfig+0xc6>
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	025b      	lsls	r3, r3, #9
 80027b8:	4313      	orrs	r3, r2
 80027ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027bc:	f7ff ffa2 	bl	8002704 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80027c2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c4:	02bf      	lsls	r7, r7, #10
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	423b      	tst	r3, r7
 80027ca:	d1a9      	bne.n	8002720 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff ff9a 	bl	8002704 <HAL_GetTick>
 80027d0:	1b80      	subs	r0, r0, r6
 80027d2:	2864      	cmp	r0, #100	; 0x64
 80027d4:	d9f7      	bls.n	80027c6 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80027d6:	2003      	movs	r0, #3
 80027d8:	e7e6      	b.n	80027a8 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d116      	bne.n	800280c <HAL_RCC_OscConfig+0xf8>
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	4a8e      	ldr	r2, [pc, #568]	; (8002a1c <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e4:	4013      	ands	r3, r2
 80027e6:	6023      	str	r3, [r4, #0]
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	4a8d      	ldr	r2, [pc, #564]	; (8002a20 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ec:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ee:	4013      	ands	r3, r2
 80027f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027f2:	f7ff ff87 	bl	8002704 <HAL_GetTick>
 80027f6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	423b      	tst	r3, r7
 80027fc:	d100      	bne.n	8002800 <HAL_RCC_OscConfig+0xec>
 80027fe:	e78f      	b.n	8002720 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7ff ff80 	bl	8002704 <HAL_GetTick>
 8002804:	1b80      	subs	r0, r0, r6
 8002806:	2864      	cmp	r0, #100	; 0x64
 8002808:	d9f6      	bls.n	80027f8 <HAL_RCC_OscConfig+0xe4>
 800280a:	e7e4      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280c:	2b05      	cmp	r3, #5
 800280e:	d105      	bne.n	800281c <HAL_RCC_OscConfig+0x108>
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	6822      	ldr	r2, [r4, #0]
 8002814:	02db      	lsls	r3, r3, #11
 8002816:	4313      	orrs	r3, r2
 8002818:	6023      	str	r3, [r4, #0]
 800281a:	e7ca      	b.n	80027b2 <HAL_RCC_OscConfig+0x9e>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	4a7f      	ldr	r2, [pc, #508]	; (8002a1c <HAL_RCC_OscConfig+0x308>)
 8002820:	4013      	ands	r3, r2
 8002822:	6023      	str	r3, [r4, #0]
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	4a7e      	ldr	r2, [pc, #504]	; (8002a20 <HAL_RCC_OscConfig+0x30c>)
 8002828:	4013      	ands	r3, r2
 800282a:	e7c6      	b.n	80027ba <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800282c:	220c      	movs	r2, #12
 800282e:	4c7a      	ldr	r4, [pc, #488]	; (8002a18 <HAL_RCC_OscConfig+0x304>)
 8002830:	6863      	ldr	r3, [r4, #4]
 8002832:	4213      	tst	r3, r2
 8002834:	d006      	beq.n	8002844 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002836:	6863      	ldr	r3, [r4, #4]
 8002838:	4013      	ands	r3, r2
 800283a:	2b08      	cmp	r3, #8
 800283c:	d110      	bne.n	8002860 <HAL_RCC_OscConfig+0x14c>
 800283e:	6863      	ldr	r3, [r4, #4]
 8002840:	03db      	lsls	r3, r3, #15
 8002842:	d40d      	bmi.n	8002860 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	079b      	lsls	r3, r3, #30
 8002848:	d502      	bpl.n	8002850 <HAL_RCC_OscConfig+0x13c>
 800284a:	68eb      	ldr	r3, [r5, #12]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d1aa      	bne.n	80027a6 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	21f8      	movs	r1, #248	; 0xf8
 8002852:	6822      	ldr	r2, [r4, #0]
 8002854:	692b      	ldr	r3, [r5, #16]
 8002856:	438a      	bics	r2, r1
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4313      	orrs	r3, r2
 800285c:	6023      	str	r3, [r4, #0]
 800285e:	e763      	b.n	8002728 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002860:	68ea      	ldr	r2, [r5, #12]
 8002862:	2301      	movs	r3, #1
 8002864:	2a00      	cmp	r2, #0
 8002866:	d00f      	beq.n	8002888 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8002868:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800286c:	4313      	orrs	r3, r2
 800286e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002870:	f7ff ff48 	bl	8002704 <HAL_GetTick>
 8002874:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	423b      	tst	r3, r7
 800287a:	d1e9      	bne.n	8002850 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287c:	f7ff ff42 	bl	8002704 <HAL_GetTick>
 8002880:	1b80      	subs	r0, r0, r6
 8002882:	2802      	cmp	r0, #2
 8002884:	d9f7      	bls.n	8002876 <HAL_RCC_OscConfig+0x162>
 8002886:	e7a6      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8002888:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800288c:	439a      	bics	r2, r3
 800288e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8002890:	f7ff ff38 	bl	8002704 <HAL_GetTick>
 8002894:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	423b      	tst	r3, r7
 800289a:	d100      	bne.n	800289e <HAL_RCC_OscConfig+0x18a>
 800289c:	e744      	b.n	8002728 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289e:	f7ff ff31 	bl	8002704 <HAL_GetTick>
 80028a2:	1b80      	subs	r0, r0, r6
 80028a4:	2802      	cmp	r0, #2
 80028a6:	d9f6      	bls.n	8002896 <HAL_RCC_OscConfig+0x182>
 80028a8:	e795      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028aa:	69ea      	ldr	r2, [r5, #28]
 80028ac:	2301      	movs	r3, #1
 80028ae:	4c5a      	ldr	r4, [pc, #360]	; (8002a18 <HAL_RCC_OscConfig+0x304>)
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d010      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80028b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80028b8:	4313      	orrs	r3, r2
 80028ba:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80028bc:	f7ff ff22 	bl	8002704 <HAL_GetTick>
 80028c0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028c4:	423b      	tst	r3, r7
 80028c6:	d000      	beq.n	80028ca <HAL_RCC_OscConfig+0x1b6>
 80028c8:	e732      	b.n	8002730 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ca:	f7ff ff1b 	bl	8002704 <HAL_GetTick>
 80028ce:	1b80      	subs	r0, r0, r6
 80028d0:	2802      	cmp	r0, #2
 80028d2:	d9f6      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1ae>
 80028d4:	e77f      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80028d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80028da:	439a      	bics	r2, r3
 80028dc:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80028de:	f7ff ff11 	bl	8002704 <HAL_GetTick>
 80028e2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028e6:	423b      	tst	r3, r7
 80028e8:	d100      	bne.n	80028ec <HAL_RCC_OscConfig+0x1d8>
 80028ea:	e721      	b.n	8002730 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ec:	f7ff ff0a 	bl	8002704 <HAL_GetTick>
 80028f0:	1b80      	subs	r0, r0, r6
 80028f2:	2802      	cmp	r0, #2
 80028f4:	d9f6      	bls.n	80028e4 <HAL_RCC_OscConfig+0x1d0>
 80028f6:	e76e      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fc:	4c46      	ldr	r4, [pc, #280]	; (8002a18 <HAL_RCC_OscConfig+0x304>)
 80028fe:	0552      	lsls	r2, r2, #21
 8002900:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002902:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002904:	4213      	tst	r3, r2
 8002906:	d108      	bne.n	800291a <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	69e3      	ldr	r3, [r4, #28]
 800290a:	4313      	orrs	r3, r2
 800290c:	61e3      	str	r3, [r4, #28]
 800290e:	69e3      	ldr	r3, [r4, #28]
 8002910:	4013      	ands	r3, r2
 8002912:	9303      	str	r3, [sp, #12]
 8002914:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	2780      	movs	r7, #128	; 0x80
 800291c:	4e41      	ldr	r6, [pc, #260]	; (8002a24 <HAL_RCC_OscConfig+0x310>)
 800291e:	007f      	lsls	r7, r7, #1
 8002920:	6833      	ldr	r3, [r6, #0]
 8002922:	423b      	tst	r3, r7
 8002924:	d006      	beq.n	8002934 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002926:	68ab      	ldr	r3, [r5, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d113      	bne.n	8002954 <HAL_RCC_OscConfig+0x240>
 800292c:	6a22      	ldr	r2, [r4, #32]
 800292e:	4313      	orrs	r3, r2
 8002930:	6223      	str	r3, [r4, #32]
 8002932:	e030      	b.n	8002996 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002934:	6833      	ldr	r3, [r6, #0]
 8002936:	433b      	orrs	r3, r7
 8002938:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800293a:	f7ff fee3 	bl	8002704 <HAL_GetTick>
 800293e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	6833      	ldr	r3, [r6, #0]
 8002942:	423b      	tst	r3, r7
 8002944:	d1ef      	bne.n	8002926 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7ff fedd 	bl	8002704 <HAL_GetTick>
 800294a:	9b01      	ldr	r3, [sp, #4]
 800294c:	1ac0      	subs	r0, r0, r3
 800294e:	2864      	cmp	r0, #100	; 0x64
 8002950:	d9f6      	bls.n	8002940 <HAL_RCC_OscConfig+0x22c>
 8002952:	e740      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	2201      	movs	r2, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d114      	bne.n	8002984 <HAL_RCC_OscConfig+0x270>
 800295a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295e:	4393      	bics	r3, r2
 8002960:	6223      	str	r3, [r4, #32]
 8002962:	6a23      	ldr	r3, [r4, #32]
 8002964:	3203      	adds	r2, #3
 8002966:	4393      	bics	r3, r2
 8002968:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800296a:	f7ff fecb 	bl	8002704 <HAL_GetTick>
 800296e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002970:	6a23      	ldr	r3, [r4, #32]
 8002972:	423b      	tst	r3, r7
 8002974:	d016      	beq.n	80029a4 <HAL_RCC_OscConfig+0x290>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7ff fec5 	bl	8002704 <HAL_GetTick>
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCC_OscConfig+0x314>)
 800297c:	1b80      	subs	r0, r0, r6
 800297e:	4298      	cmp	r0, r3
 8002980:	d9f6      	bls.n	8002970 <HAL_RCC_OscConfig+0x25c>
 8002982:	e728      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002984:	2b05      	cmp	r3, #5
 8002986:	d116      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2a2>
 8002988:	6a21      	ldr	r1, [r4, #32]
 800298a:	3b01      	subs	r3, #1
 800298c:	430b      	orrs	r3, r1
 800298e:	6223      	str	r3, [r4, #32]
 8002990:	6a23      	ldr	r3, [r4, #32]
 8002992:	431a      	orrs	r2, r3
 8002994:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8002996:	f7ff feb5 	bl	8002704 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800299c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	6a23      	ldr	r3, [r4, #32]
 80029a0:	423b      	tst	r3, r7
 80029a2:	d00f      	beq.n	80029c4 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 80029a4:	9b00      	ldr	r3, [sp, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d000      	beq.n	80029ac <HAL_RCC_OscConfig+0x298>
 80029aa:	e6c5      	b.n	8002738 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	69e3      	ldr	r3, [r4, #28]
 80029ae:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_RCC_OscConfig+0x318>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	61e3      	str	r3, [r4, #28]
 80029b4:	e6c0      	b.n	8002738 <HAL_RCC_OscConfig+0x24>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b6:	6a23      	ldr	r3, [r4, #32]
 80029b8:	4393      	bics	r3, r2
 80029ba:	2204      	movs	r2, #4
 80029bc:	6223      	str	r3, [r4, #32]
 80029be:	6a23      	ldr	r3, [r4, #32]
 80029c0:	4393      	bics	r3, r2
 80029c2:	e7b5      	b.n	8002930 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7ff fe9e 	bl	8002704 <HAL_GetTick>
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_RCC_OscConfig+0x314>)
 80029ca:	1b80      	subs	r0, r0, r6
 80029cc:	4298      	cmp	r0, r3
 80029ce:	d9e6      	bls.n	800299e <HAL_RCC_OscConfig+0x28a>
 80029d0:	e701      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029d2:	f7ff fe97 	bl	8002704 <HAL_GetTick>
 80029d6:	1b80      	subs	r0, r0, r6
 80029d8:	2802      	cmp	r0, #2
 80029da:	d800      	bhi.n	80029de <HAL_RCC_OscConfig+0x2ca>
 80029dc:	e6bf      	b.n	800275e <HAL_RCC_OscConfig+0x4a>
 80029de:	e6fa      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80029e0:	3205      	adds	r2, #5
 80029e2:	d103      	bne.n	80029ec <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80029e4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80029e6:	439a      	bics	r2, r3
 80029e8:	6362      	str	r2, [r4, #52]	; 0x34
 80029ea:	e6bc      	b.n	8002766 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80029ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029ee:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80029f0:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80029f2:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80029f4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80029f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029f8:	4393      	bics	r3, r2
 80029fa:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80029fc:	f7ff fe82 	bl	8002704 <HAL_GetTick>
 8002a00:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a04:	423b      	tst	r3, r7
 8002a06:	d100      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2f6>
 8002a08:	e6b4      	b.n	8002774 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a0a:	f7ff fe7b 	bl	8002704 <HAL_GetTick>
 8002a0e:	1b80      	subs	r0, r0, r6
 8002a10:	2802      	cmp	r0, #2
 8002a12:	d9f6      	bls.n	8002a02 <HAL_RCC_OscConfig+0x2ee>
 8002a14:	e6df      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	fffeffff 	.word	0xfffeffff
 8002a20:	fffbffff 	.word	0xfffbffff
 8002a24:	40007000 	.word	0x40007000
 8002a28:	00001388 	.word	0x00001388
 8002a2c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a30:	220c      	movs	r2, #12
 8002a32:	4c26      	ldr	r4, [pc, #152]	; (8002acc <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a36:	6863      	ldr	r3, [r4, #4]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d100      	bne.n	8002a40 <HAL_RCC_OscConfig+0x32c>
 8002a3e:	e6b3      	b.n	80027a8 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <HAL_RCC_OscConfig+0x3bc>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a48:	2902      	cmp	r1, #2
 8002a4a:	d12f      	bne.n	8002aac <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8002a4c:	f7ff fe5a 	bl	8002704 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a50:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002a52:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	04bf      	lsls	r7, r7, #18
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	423b      	tst	r3, r7
 8002a5a:	d121      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a60:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a62:	4393      	bics	r3, r2
 8002a64:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a66:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a6c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002a6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002a70:	6862      	ldr	r2, [r4, #4]
 8002a72:	430b      	orrs	r3, r1
 8002a74:	4917      	ldr	r1, [pc, #92]	; (8002ad4 <HAL_RCC_OscConfig+0x3c0>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	6822      	ldr	r2, [r4, #0]
 8002a80:	045b      	lsls	r3, r3, #17
 8002a82:	4313      	orrs	r3, r2
 8002a84:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002a86:	f7ff fe3d 	bl	8002704 <HAL_GetTick>
 8002a8a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	4233      	tst	r3, r6
 8002a90:	d000      	beq.n	8002a94 <HAL_RCC_OscConfig+0x380>
 8002a92:	e673      	b.n	800277c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a94:	f7ff fe36 	bl	8002704 <HAL_GetTick>
 8002a98:	1b40      	subs	r0, r0, r5
 8002a9a:	2802      	cmp	r0, #2
 8002a9c:	d9f6      	bls.n	8002a8c <HAL_RCC_OscConfig+0x378>
 8002a9e:	e69a      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7ff fe30 	bl	8002704 <HAL_GetTick>
 8002aa4:	1b80      	subs	r0, r0, r6
 8002aa6:	2802      	cmp	r0, #2
 8002aa8:	d9d5      	bls.n	8002a56 <HAL_RCC_OscConfig+0x342>
 8002aaa:	e694      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002aac:	f7ff fe2a 	bl	8002704 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002ab2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	04b6      	lsls	r6, r6, #18
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	4233      	tst	r3, r6
 8002aba:	d100      	bne.n	8002abe <HAL_RCC_OscConfig+0x3aa>
 8002abc:	e65e      	b.n	800277c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abe:	f7ff fe21 	bl	8002704 <HAL_GetTick>
 8002ac2:	1b40      	subs	r0, r0, r5
 8002ac4:	2802      	cmp	r0, #2
 8002ac6:	d9f6      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3a2>
 8002ac8:	e685      	b.n	80027d6 <HAL_RCC_OscConfig+0xc2>
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	feffffff 	.word	0xfeffffff
 8002ad4:	ffc2ffff 	.word	0xffc2ffff

08002ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ada:	2201      	movs	r2, #1
 8002adc:	4c3e      	ldr	r4, [pc, #248]	; (8002bd8 <HAL_RCC_ClockConfig+0x100>)
{
 8002ade:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ae0:	6823      	ldr	r3, [r4, #0]
{
 8002ae2:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	428b      	cmp	r3, r1
 8002ae8:	d312      	bcc.n	8002b10 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aea:	682a      	ldr	r2, [r5, #0]
 8002aec:	0793      	lsls	r3, r2, #30
 8002aee:	d419      	bmi.n	8002b24 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af0:	07d3      	lsls	r3, r2, #31
 8002af2:	d41f      	bmi.n	8002b34 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002af4:	2301      	movs	r3, #1
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	401a      	ands	r2, r3
 8002afa:	42ba      	cmp	r2, r7
 8002afc:	d85d      	bhi.n	8002bba <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afe:	682b      	ldr	r3, [r5, #0]
 8002b00:	075b      	lsls	r3, r3, #29
 8002b02:	d461      	bmi.n	8002bc8 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 8002b04:	22e1      	movs	r2, #225	; 0xe1
 8002b06:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <HAL_RCC_ClockConfig+0x104>)
 8002b08:	03d2      	lsls	r2, r2, #15
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8002b0a:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 8002b0c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	4393      	bics	r3, r2
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	d0e4      	beq.n	8002aea <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8002b20:	2001      	movs	r0, #1
}
 8002b22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	20f0      	movs	r0, #240	; 0xf0
 8002b26:	492e      	ldr	r1, [pc, #184]	; (8002be0 <HAL_RCC_ClockConfig+0x108>)
 8002b28:	684b      	ldr	r3, [r1, #4]
 8002b2a:	4383      	bics	r3, r0
 8002b2c:	68a8      	ldr	r0, [r5, #8]
 8002b2e:	4303      	orrs	r3, r0
 8002b30:	604b      	str	r3, [r1, #4]
 8002b32:	e7dd      	b.n	8002af0 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	4e2a      	ldr	r6, [pc, #168]	; (8002be0 <HAL_RCC_ClockConfig+0x108>)
 8002b36:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b38:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3a:	2a01      	cmp	r2, #1
 8002b3c:	d11a      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	039b      	lsls	r3, r3, #14
 8002b40:	d5ee      	bpl.n	8002b20 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b42:	2103      	movs	r1, #3
 8002b44:	6873      	ldr	r3, [r6, #4]
 8002b46:	438b      	bics	r3, r1
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002b4c:	f7ff fdda 	bl	8002704 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b50:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002b52:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d115      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b58:	220c      	movs	r2, #12
 8002b5a:	6873      	ldr	r3, [r6, #4]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d0c8      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b62:	f7ff fdcf 	bl	8002704 <HAL_GetTick>
 8002b66:	9b01      	ldr	r3, [sp, #4]
 8002b68:	1ac0      	subs	r0, r0, r3
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_RCC_ClockConfig+0x10c>)
 8002b6c:	4298      	cmp	r0, r3
 8002b6e:	d9f3      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x80>
          return HAL_TIMEOUT;
 8002b70:	2003      	movs	r0, #3
 8002b72:	e7d6      	b.n	8002b22 <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b74:	2a02      	cmp	r2, #2
 8002b76:	d102      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	d4e2      	bmi.n	8002b42 <HAL_RCC_ClockConfig+0x6a>
 8002b7c:	e7d0      	b.n	8002b20 <HAL_RCC_ClockConfig+0x48>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7e:	079b      	lsls	r3, r3, #30
 8002b80:	d4df      	bmi.n	8002b42 <HAL_RCC_ClockConfig+0x6a>
 8002b82:	e7cd      	b.n	8002b20 <HAL_RCC_ClockConfig+0x48>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d012      	beq.n	8002bae <HAL_RCC_ClockConfig+0xd6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b88:	220c      	movs	r2, #12
 8002b8a:	6873      	ldr	r3, [r6, #4]
 8002b8c:	4213      	tst	r3, r2
 8002b8e:	d0b1      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7ff fdb8 	bl	8002704 <HAL_GetTick>
 8002b94:	9b01      	ldr	r3, [sp, #4]
 8002b96:	1ac0      	subs	r0, r0, r3
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_ClockConfig+0x10c>)
 8002b9a:	4298      	cmp	r0, r3
 8002b9c:	d9f4      	bls.n	8002b88 <HAL_RCC_ClockConfig+0xb0>
 8002b9e:	e7e7      	b.n	8002b70 <HAL_RCC_ClockConfig+0x98>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba0:	f7ff fdb0 	bl	8002704 <HAL_GetTick>
 8002ba4:	9b01      	ldr	r3, [sp, #4]
 8002ba6:	1ac0      	subs	r0, r0, r3
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_RCC_ClockConfig+0x10c>)
 8002baa:	4298      	cmp	r0, r3
 8002bac:	d8e0      	bhi.n	8002b70 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bae:	220c      	movs	r2, #12
 8002bb0:	6873      	ldr	r3, [r6, #4]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d1f3      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xc8>
 8002bb8:	e79c      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	439a      	bics	r2, r3
 8002bbe:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bc0:	6822      	ldr	r2, [r4, #0]
 8002bc2:	421a      	tst	r2, r3
 8002bc4:	d09b      	beq.n	8002afe <HAL_RCC_ClockConfig+0x26>
 8002bc6:	e7ab      	b.n	8002b20 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc8:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_RCC_ClockConfig+0x108>)
 8002bca:	4907      	ldr	r1, [pc, #28]	; (8002be8 <HAL_RCC_ClockConfig+0x110>)
 8002bcc:	6853      	ldr	r3, [r2, #4]
 8002bce:	400b      	ands	r3, r1
 8002bd0:	68e9      	ldr	r1, [r5, #12]
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	6053      	str	r3, [r2, #4]
 8002bd6:	e795      	b.n	8002b04 <HAL_RCC_ClockConfig+0x2c>
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	20000010 	.word	0x20000010
 8002be0:	40021000 	.word	0x40021000
 8002be4:	00001388 	.word	0x00001388
 8002be8:	fffff8ff 	.word	0xfffff8ff

08002bec <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00U;
 8002bec:	2300      	movs	r3, #0
{ 
 8002bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002bf2:	680a      	ldr	r2, [r1, #0]
 8002bf4:	0014      	movs	r4, r2
 8002bf6:	40dc      	lsrs	r4, r3
 8002bf8:	d101      	bne.n	8002bfe <HAL_GPIO_Init+0x12>
      }
    }
    
    position++;
  } 
}
 8002bfa:	b007      	add	sp, #28
 8002bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002bfe:	2601      	movs	r6, #1
 8002c00:	0014      	movs	r4, r2
 8002c02:	409e      	lsls	r6, r3
 8002c04:	4034      	ands	r4, r6
 8002c06:	9402      	str	r4, [sp, #8]
    if(iocurrent)
 8002c08:	4232      	tst	r2, r6
 8002c0a:	d100      	bne.n	8002c0e <HAL_GPIO_Init+0x22>
 8002c0c:	e092      	b.n	8002d34 <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002c0e:	684a      	ldr	r2, [r1, #4]
 8002c10:	0015      	movs	r5, r2
 8002c12:	9201      	str	r2, [sp, #4]
 8002c14:	2210      	movs	r2, #16
 8002c16:	4395      	bics	r5, r2
 8002c18:	9503      	str	r5, [sp, #12]
 8002c1a:	2d02      	cmp	r5, #2
 8002c1c:	d10d      	bne.n	8002c3a <HAL_GPIO_Init+0x4e>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002c1e:	2407      	movs	r4, #7
 8002c20:	250f      	movs	r5, #15
 8002c22:	401c      	ands	r4, r3
 8002c24:	00a4      	lsls	r4, r4, #2
 8002c26:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3];
 8002c28:	08da      	lsrs	r2, r3, #3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	1882      	adds	r2, r0, r2
 8002c2e:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002c30:	43af      	bics	r7, r5
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002c32:	690d      	ldr	r5, [r1, #16]
 8002c34:	40a5      	lsls	r5, r4
 8002c36:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8002c38:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	005c      	lsls	r4, r3, #1
 8002c3e:	40a2      	lsls	r2, r4
 8002c40:	43d5      	mvns	r5, r2
 8002c42:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002c46:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002c48:	4397      	bics	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c4a:	9a01      	ldr	r2, [sp, #4]
 8002c4c:	402a      	ands	r2, r5
 8002c4e:	40a2      	lsls	r2, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c50:	9d03      	ldr	r5, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c52:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c54:	3d01      	subs	r5, #1
      GPIOx->MODER = temp;
 8002c56:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c58:	2d01      	cmp	r5, #1
 8002c5a:	d80f      	bhi.n	8002c7c <HAL_GPIO_Init+0x90>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c5c:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR; 
 8002c5e:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c60:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002c62:	68ca      	ldr	r2, [r1, #12]
 8002c64:	40a2      	lsls	r2, r4
 8002c66:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8002c68:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8002c6a:	6845      	ldr	r5, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c6c:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002c6e:	43b5      	bics	r5, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c70:	2601      	movs	r6, #1
 8002c72:	0912      	lsrs	r2, r2, #4
 8002c74:	4032      	ands	r2, r6
 8002c76:	409a      	lsls	r2, r3
 8002c78:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8002c7a:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c7c:	4665      	mov	r5, ip
      temp = GPIOx->PUPDR;
 8002c7e:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c80:	402a      	ands	r2, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002c82:	688d      	ldr	r5, [r1, #8]
 8002c84:	40a5      	lsls	r5, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002c86:	2480      	movs	r4, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002c88:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8002c8a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002c8c:	9a01      	ldr	r2, [sp, #4]
 8002c8e:	0564      	lsls	r4, r4, #21
 8002c90:	4222      	tst	r2, r4
 8002c92:	d04f      	beq.n	8002d34 <HAL_GPIO_Init+0x148>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c94:	2501      	movs	r5, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002c96:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c98:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_GPIO_Init+0x14c>)
 8002c9a:	6994      	ldr	r4, [r2, #24]
 8002c9c:	432c      	orrs	r4, r5
 8002c9e:	6194      	str	r4, [r2, #24]
 8002ca0:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8002ca2:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca4:	402a      	ands	r2, r5
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002ca6:	3502      	adds	r5, #2
 8002ca8:	401d      	ands	r5, r3
 8002caa:	00ad      	lsls	r5, r5, #2
 8002cac:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cae:	9205      	str	r2, [sp, #20]
 8002cb0:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8002cb2:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <HAL_GPIO_Init+0x150>)
 8002cb4:	00a4      	lsls	r4, r4, #2
 8002cb6:	18a4      	adds	r4, r4, r2
 8002cb8:	68a6      	ldr	r6, [r4, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cba:	2200      	movs	r2, #0
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002cbc:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cbe:	2790      	movs	r7, #144	; 0x90
 8002cc0:	05ff      	lsls	r7, r7, #23
 8002cc2:	42b8      	cmp	r0, r7
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_GPIO_Init+0xf4>
 8002cc6:	4f1e      	ldr	r7, [pc, #120]	; (8002d40 <HAL_GPIO_Init+0x154>)
 8002cc8:	3201      	adds	r2, #1
 8002cca:	42b8      	cmp	r0, r7
 8002ccc:	d008      	beq.n	8002ce0 <HAL_GPIO_Init+0xf4>
 8002cce:	4f1d      	ldr	r7, [pc, #116]	; (8002d44 <HAL_GPIO_Init+0x158>)
 8002cd0:	3201      	adds	r2, #1
 8002cd2:	42b8      	cmp	r0, r7
 8002cd4:	d004      	beq.n	8002ce0 <HAL_GPIO_Init+0xf4>
 8002cd6:	4f1c      	ldr	r7, [pc, #112]	; (8002d48 <HAL_GPIO_Init+0x15c>)
 8002cd8:	3201      	adds	r2, #1
 8002cda:	42b8      	cmp	r0, r7
 8002cdc:	d000      	beq.n	8002ce0 <HAL_GPIO_Init+0xf4>
 8002cde:	3202      	adds	r2, #2
 8002ce0:	40aa      	lsls	r2, r5
 8002ce2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ce4:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8002ce6:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ce8:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8002cea:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8002cec:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cee:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cf0:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 8002cf2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf4:	03ff      	lsls	r7, r7, #15
 8002cf6:	d401      	bmi.n	8002cfc <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cf8:	0035      	movs	r5, r6
 8002cfa:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8002cfc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002cfe:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8002d00:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d02:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8002d04:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d06:	03bf      	lsls	r7, r7, #14
 8002d08:	d401      	bmi.n	8002d0e <HAL_GPIO_Init+0x122>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002d0a:	0035      	movs	r5, r6
 8002d0c:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8002d0e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002d10:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8002d12:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d14:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8002d16:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d18:	02ff      	lsls	r7, r7, #11
 8002d1a:	d401      	bmi.n	8002d20 <HAL_GPIO_Init+0x134>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002d1c:	0035      	movs	r5, r6
 8002d1e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002d20:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002d22:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8002d24:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d26:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8002d28:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d2a:	02bf      	lsls	r7, r7, #10
 8002d2c:	d401      	bmi.n	8002d32 <HAL_GPIO_Init+0x146>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002d2e:	4025      	ands	r5, r4
 8002d30:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002d32:	60d6      	str	r6, [r2, #12]
    position++;
 8002d34:	3301      	adds	r3, #1
 8002d36:	e75c      	b.n	8002bf2 <HAL_GPIO_Init+0x6>
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	48000400 	.word	0x48000400
 8002d44:	48000800 	.word	0x48000800
 8002d48:	48000c00 	.word	0x48000c00
 8002d4c:	40010400 	.word	0x40010400

08002d50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d54:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8002d56:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d58:	6281      	str	r1, [r0, #40]	; 0x28
}										  
 8002d5a:	e7fc      	b.n	8002d56 <HAL_GPIO_WritePin+0x6>

08002d5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5e:	0004      	movs	r4, r0
 8002d60:	000d      	movs	r5, r1
 8002d62:	0017      	movs	r7, r2
 8002d64:	001e      	movs	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	69d3      	ldr	r3, [r2, #28]
 8002d6a:	402b      	ands	r3, r5
 8002d6c:	1b5b      	subs	r3, r3, r5
 8002d6e:	4259      	negs	r1, r3
 8002d70:	414b      	adcs	r3, r1
 8002d72:	42bb      	cmp	r3, r7
 8002d74:	d001      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d76:	2000      	movs	r0, #0
 8002d78:	e018      	b.n	8002dac <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8002d7a:	9b06      	ldr	r3, [sp, #24]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	d0f3      	beq.n	8002d68 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d80:	9b06      	ldr	r3, [sp, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d113      	bne.n	8002dae <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	490c      	ldr	r1, [pc, #48]	; (8002dbc <UART_WaitOnFlagUntilTimeout+0x60>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8002d8c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d8e:	400a      	ands	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	31a3      	adds	r1, #163	; 0xa3
 8002d96:	31ff      	adds	r1, #255	; 0xff
 8002d98:	438a      	bics	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002d9c:	0022      	movs	r2, r4
 8002d9e:	2320      	movs	r3, #32
 8002da0:	3269      	adds	r2, #105	; 0x69
 8002da2:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8002da4:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8002da6:	2300      	movs	r3, #0
 8002da8:	3468      	adds	r4, #104	; 0x68
 8002daa:	7023      	strb	r3, [r4, #0]
}
 8002dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002dae:	f7ff fca9 	bl	8002704 <HAL_GetTick>
 8002db2:	9b06      	ldr	r3, [sp, #24]
 8002db4:	1b80      	subs	r0, r0, r6
 8002db6:	4298      	cmp	r0, r3
 8002db8:	d9d5      	bls.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xa>
 8002dba:	e7e4      	b.n	8002d86 <UART_WaitOnFlagUntilTimeout+0x2a>
 8002dbc:	fffffe5f 	.word	0xfffffe5f

08002dc0 <UART_SetConfig>:

  return HAL_OK;
}

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	b570      	push	{r4, r5, r6, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	691d      	ldr	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002dc8:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dca:	432a      	orrs	r2, r5
 8002dcc:	695d      	ldr	r5, [r3, #20]
 8002dce:	69c1      	ldr	r1, [r0, #28]
 8002dd0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002dd2:	6820      	ldr	r0, [r4, #0]
 8002dd4:	4d33      	ldr	r5, [pc, #204]	; (8002ea4 <UART_SetConfig+0xe4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002dd8:	4028      	ands	r0, r5
 8002dda:	4302      	orrs	r2, r0
 8002ddc:	6022      	str	r2, [r4, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dde:	6862      	ldr	r2, [r4, #4]
 8002de0:	4831      	ldr	r0, [pc, #196]	; (8002ea8 <UART_SetConfig+0xe8>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002de2:	6a1d      	ldr	r5, [r3, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de4:	4002      	ands	r2, r0
 8002de6:	68d8      	ldr	r0, [r3, #12]
 8002de8:	4302      	orrs	r2, r0
 8002dea:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002dec:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002dee:	68a0      	ldr	r0, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002df0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002df2:	4d2e      	ldr	r5, [pc, #184]	; (8002eac <UART_SetConfig+0xec>)
 8002df4:	4028      	ands	r0, r5
 8002df6:	4302      	orrs	r2, r0

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002df8:	2003      	movs	r0, #3
 8002dfa:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002dfc:	60a2      	str	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfe:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <UART_SetConfig+0xf0>)
 8002e00:	022d      	lsls	r5, r5, #8
 8002e02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e04:	4002      	ands	r2, r0
 8002e06:	3a01      	subs	r2, #1
 8002e08:	2a02      	cmp	r2, #2
 8002e0a:	d843      	bhi.n	8002e94 <UART_SetConfig+0xd4>
 8002e0c:	4829      	ldr	r0, [pc, #164]	; (8002eb4 <UART_SetConfig+0xf4>)
 8002e0e:	5c80      	ldrb	r0, [r0, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e10:	42a9      	cmp	r1, r5
 8002e12:	d120      	bne.n	8002e56 <UART_SetConfig+0x96>
  {
    switch (clocksource)
 8002e14:	2808      	cmp	r0, #8
 8002e16:	d81b      	bhi.n	8002e50 <UART_SetConfig+0x90>
 8002e18:	f7fd fa02 	bl	8000220 <__gnu_thumb1_case_uqi>
 8002e1c:	1a051a3e 	.word	0x1a051a3e
 8002e20:	1a1a1a3e 	.word	0x1a1a1a3e
 8002e24:	15          	.byte	0x15
 8002e25:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <UART_SetConfig+0xf8>)
 8002e2a:	0848      	lsrs	r0, r1, #1
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e2c:	18c0      	adds	r0, r0, r3
 8002e2e:	f7fd fa01 	bl	8000234 <__udivsi3>
 8002e32:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e34:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002e36:	0019      	movs	r1, r3
 8002e38:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e3a:	071b      	lsls	r3, r3, #28
    brrtemp = usartdiv & 0xFFF0U;
 8002e3c:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e3e:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8002e40:	430b      	orrs	r3, r1
 8002e42:	60e3      	str	r3, [r4, #12]
    }
  }

  return ret;

}
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	0848      	lsrs	r0, r1, #1
 8002e4c:	025b      	lsls	r3, r3, #9
 8002e4e:	e7ed      	b.n	8002e2c <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e50:	2001      	movs	r0, #1
 8002e52:	2300      	movs	r3, #0
 8002e54:	e7ef      	b.n	8002e36 <UART_SetConfig+0x76>
    switch (clocksource)
 8002e56:	2808      	cmp	r0, #8
 8002e58:	d81a      	bhi.n	8002e90 <UART_SetConfig+0xd0>
 8002e5a:	f7fd f9e1 	bl	8000220 <__gnu_thumb1_case_uqi>
 8002e5e:	190f      	.short	0x190f
 8002e60:	190f1905 	.word	0x190f1905
 8002e64:	1919      	.short	0x1919
 8002e66:	14          	.byte	0x14
 8002e67:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <UART_SetConfig+0xfc>)
 8002e6c:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e6e:	18c0      	adds	r0, r0, r3
 8002e70:	f7fd f9e0 	bl	8000234 <__udivsi3>
 8002e74:	b280      	uxth	r0, r0
 8002e76:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e78:	2000      	movs	r0, #0
        break;
 8002e7a:	e7e3      	b.n	8002e44 <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	23e1      	movs	r3, #225	; 0xe1
 8002e80:	0848      	lsrs	r0, r1, #1
 8002e82:	03db      	lsls	r3, r3, #15
 8002e84:	e7f3      	b.n	8002e6e <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	0848      	lsrs	r0, r1, #1
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	e7ee      	b.n	8002e6e <UART_SetConfig+0xae>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e90:	2001      	movs	r0, #1
  return ret;
 8002e92:	e7d7      	b.n	8002e44 <UART_SetConfig+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e94:	42a9      	cmp	r1, r5
 8002e96:	d1f1      	bne.n	8002e7c <UART_SetConfig+0xbc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	23e1      	movs	r3, #225	; 0xe1
 8002e9c:	0848      	lsrs	r0, r1, #1
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	e7c4      	b.n	8002e2c <UART_SetConfig+0x6c>
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	ffff69f3 	.word	0xffff69f3
 8002ea8:	ffffcfff 	.word	0xffffcfff
 8002eac:	fffff4ff 	.word	0xfffff4ff
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	0800315c 	.word	0x0800315c
 8002eb8:	01e84800 	.word	0x01e84800
 8002ebc:	00f42400 	.word	0x00f42400

08002ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0xa>
  {
    return HAL_ERROR;
 8002ec6:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8002eca:	0005      	movs	r5, r0
 8002ecc:	3569      	adds	r5, #105	; 0x69
 8002ece:	782b      	ldrb	r3, [r5, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	3368      	adds	r3, #104	; 0x68
 8002eda:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002edc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002ede:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002ee0:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8002ee2:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002ee6:	6813      	ldr	r3, [r2, #0]
 8002ee8:	43b3      	bics	r3, r6
 8002eea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eec:	f7ff ff68 	bl	8002dc0 <UART_SetConfig>
 8002ef0:	42b0      	cmp	r0, r6
 8002ef2:	d0e8      	beq.n	8002ec6 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	490a      	ldr	r1, [pc, #40]	; (8002f20 <HAL_UART_Init+0x60>)
 8002ef8:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efa:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002efc:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002efe:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002f00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	438a      	bics	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4316      	orrs	r6, r2
  huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	0022      	movs	r2, r4
  __HAL_UART_ENABLE(huart);
 8002f0e:	601e      	str	r6, [r3, #0]
  huart->gState  = HAL_UART_STATE_READY;
 8002f10:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f12:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8002f14:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8002f16:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8002f18:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8002f1c:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002f1e:	e7d3      	b.n	8002ec8 <HAL_UART_Init+0x8>
 8002f20:	fffff7ff 	.word	0xfffff7ff

08002f24 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f26:	b085      	sub	sp, #20
 8002f28:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	336a      	adds	r3, #106	; 0x6a
{
 8002f2e:	0017      	movs	r7, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002f30:	781a      	ldrb	r2, [r3, #0]
{
 8002f32:	0004      	movs	r4, r0
 8002f34:	000d      	movs	r5, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002f38:	2a20      	cmp	r2, #32
 8002f3a:	d139      	bne.n	8002fb0 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 8002f3c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002f3e:	2900      	cmp	r1, #0
 8002f40:	d036      	beq.n	8002fb0 <HAL_UART_Receive+0x8c>
 8002f42:	2f00      	cmp	r7, #0
 8002f44:	d034      	beq.n	8002fb0 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	68a1      	ldr	r1, [r4, #8]
 8002f4a:	0152      	lsls	r2, r2, #5
 8002f4c:	4291      	cmp	r1, r2
 8002f4e:	d104      	bne.n	8002f5a <HAL_UART_Receive+0x36>
 8002f50:	6922      	ldr	r2, [r4, #16]
 8002f52:	2a00      	cmp	r2, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8002f56:	4205      	tst	r5, r0
 8002f58:	d12a      	bne.n	8002fb0 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 8002f5a:	0022      	movs	r2, r4
 8002f5c:	3268      	adds	r2, #104	; 0x68
 8002f5e:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 8002f60:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002f62:	2901      	cmp	r1, #1
 8002f64:	d024      	beq.n	8002fb0 <HAL_UART_Receive+0x8c>
 8002f66:	2101      	movs	r1, #1
 8002f68:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f6e:	3222      	adds	r2, #34	; 0x22
 8002f70:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002f72:	f7ff fbc7 	bl	8002704 <HAL_GetTick>
    huart->RxXferSize = Size;
 8002f76:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8002f7c:	3358      	adds	r3, #88	; 0x58
 8002f7e:	801f      	strh	r7, [r3, #0]
    huart->RxXferCount = Size;
 8002f80:	805f      	strh	r7, [r3, #2]
    tickstart = HAL_GetTick();
 8002f82:	0006      	movs	r6, r0
    UART_MASK_COMPUTATION(huart);
 8002f84:	0149      	lsls	r1, r1, #5
 8002f86:	3304      	adds	r3, #4
 8002f88:	428a      	cmp	r2, r1
 8002f8a:	d115      	bne.n	8002fb8 <HAL_UART_Receive+0x94>
 8002f8c:	6922      	ldr	r2, [r4, #16]
 8002f8e:	2a00      	cmp	r2, #0
 8002f90:	d110      	bne.n	8002fb4 <HAL_UART_Receive+0x90>
 8002f92:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <HAL_UART_Receive+0xec>)
 8002f94:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 8002f96:	881f      	ldrh	r7, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002f98:	0022      	movs	r2, r4
 8002f9a:	325a      	adds	r2, #90	; 0x5a
 8002f9c:	8813      	ldrh	r3, [r2, #0]
 8002f9e:	b298      	uxth	r0, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d110      	bne.n	8002fc6 <HAL_UART_Receive+0xa2>
    huart->RxState = HAL_UART_STATE_READY;
 8002fa4:	0023      	movs	r3, r4
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 8002faa:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8002fac:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002fae:	7020      	strb	r0, [r4, #0]
  }
}
 8002fb0:	b005      	add	sp, #20
 8002fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8002fb4:	22ff      	movs	r2, #255	; 0xff
 8002fb6:	e7ed      	b.n	8002f94 <HAL_UART_Receive+0x70>
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	d1ec      	bne.n	8002f96 <HAL_UART_Receive+0x72>
 8002fbc:	6922      	ldr	r2, [r4, #16]
 8002fbe:	2a00      	cmp	r2, #0
 8002fc0:	d0f8      	beq.n	8002fb4 <HAL_UART_Receive+0x90>
 8002fc2:	227f      	movs	r2, #127	; 0x7f
 8002fc4:	e7e6      	b.n	8002f94 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 8002fc6:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc8:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd0:	9b03      	ldr	r3, [sp, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	0020      	movs	r0, r4
 8002fd8:	0033      	movs	r3, r6
 8002fda:	f7ff febf 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d113      	bne.n	800300a <HAL_UART_Receive+0xe6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe2:	68a2      	ldr	r2, [r4, #8]
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	0152      	lsls	r2, r2, #5
 8002fec:	4291      	cmp	r1, r2
 8002fee:	d107      	bne.n	8003000 <HAL_UART_Receive+0xdc>
 8002ff0:	6922      	ldr	r2, [r4, #16]
 8002ff2:	2a00      	cmp	r2, #0
 8002ff4:	d104      	bne.n	8003000 <HAL_UART_Receive+0xdc>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002ff6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ff8:	403b      	ands	r3, r7
 8002ffa:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 8002ffc:	3502      	adds	r5, #2
 8002ffe:	e7cb      	b.n	8002f98 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003000:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003002:	403b      	ands	r3, r7
 8003004:	702b      	strb	r3, [r5, #0]
 8003006:	3501      	adds	r5, #1
 8003008:	e7c6      	b.n	8002f98 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800300a:	2003      	movs	r0, #3
 800300c:	e7d0      	b.n	8002fb0 <HAL_UART_Receive+0x8c>
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	000001ff 	.word	0x000001ff

08003014 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003016:	b085      	sub	sp, #20
 8003018:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800301a:	0003      	movs	r3, r0
 800301c:	3369      	adds	r3, #105	; 0x69
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
{
 8003022:	0004      	movs	r4, r0
 8003024:	000d      	movs	r5, r1
 8003026:	0016      	movs	r6, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003028:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 800302a:	2b20      	cmp	r3, #32
 800302c:	d148      	bne.n	80030c0 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800302e:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8003030:	2900      	cmp	r1, #0
 8003032:	d045      	beq.n	80030c0 <HAL_UART_Transmit+0xac>
 8003034:	2a00      	cmp	r2, #0
 8003036:	d043      	beq.n	80030c0 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	68a2      	ldr	r2, [r4, #8]
 800303c:	015b      	lsls	r3, r3, #5
 800303e:	429a      	cmp	r2, r3
 8003040:	d104      	bne.n	800304c <HAL_UART_Transmit+0x38>
 8003042:	6923      	ldr	r3, [r4, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_UART_Transmit+0x38>
      if((((uint32_t)pData)&1U) != 0U)
 8003048:	4201      	tst	r1, r0
 800304a:	d139      	bne.n	80030c0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800304c:	0023      	movs	r3, r4
 800304e:	3368      	adds	r3, #104	; 0x68
 8003050:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8003052:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003054:	2a01      	cmp	r2, #1
 8003056:	d033      	beq.n	80030c0 <HAL_UART_Transmit+0xac>
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305e:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003060:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003062:	3321      	adds	r3, #33	; 0x21
 8003064:	7013      	strb	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003066:	f7ff fb4d 	bl	8002704 <HAL_GetTick>
    huart->TxXferSize = Size;
 800306a:	0023      	movs	r3, r4
 800306c:	3350      	adds	r3, #80	; 0x50
 800306e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003070:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003072:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8003074:	0007      	movs	r7, r0
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003076:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8003078:	0021      	movs	r1, r4
 800307a:	3152      	adds	r1, #82	; 0x52
 800307c:	880b      	ldrh	r3, [r1, #0]
 800307e:	b29a      	uxth	r2, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10e      	bne.n	80030a2 <HAL_UART_Transmit+0x8e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003084:	9b03      	ldr	r3, [sp, #12]
 8003086:	2140      	movs	r1, #64	; 0x40
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	0020      	movs	r0, r4
 800308c:	003b      	movs	r3, r7
 800308e:	f7ff fe65 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 8003092:	2800      	cmp	r0, #0
 8003094:	d113      	bne.n	80030be <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8003096:	2320      	movs	r3, #32
 8003098:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(huart);
 800309a:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800309c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 800309e:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80030a0:	e00e      	b.n	80030c0 <HAL_UART_Transmit+0xac>
      huart->TxXferCount--;
 80030a2:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a4:	2200      	movs	r2, #0
      huart->TxXferCount--;
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ac:	9b03      	ldr	r3, [sp, #12]
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	0020      	movs	r0, r4
 80030b4:	003b      	movs	r3, r7
 80030b6:	f7ff fe51 	bl	8002d5c <UART_WaitOnFlagUntilTimeout>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 80030be:	2003      	movs	r0, #3
  }
}
 80030c0:	b005      	add	sp, #20
 80030c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c4:	68a3      	ldr	r3, [r4, #8]
 80030c6:	6822      	ldr	r2, [r4, #0]
 80030c8:	42b3      	cmp	r3, r6
 80030ca:	d108      	bne.n	80030de <HAL_UART_Transmit+0xca>
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80030d2:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80030d4:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80030d6:	05db      	lsls	r3, r3, #23
 80030d8:	0ddb      	lsrs	r3, r3, #23
 80030da:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80030dc:	e7cc      	b.n	8003078 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80030de:	782b      	ldrb	r3, [r5, #0]
 80030e0:	3501      	adds	r5, #1
 80030e2:	8513      	strh	r3, [r2, #40]	; 0x28
 80030e4:	e7c8      	b.n	8003078 <HAL_UART_Transmit+0x64>
 80030e6:	0000      	movs	r0, r0

080030e8 <Reset_Handler>:
 80030e8:	2100      	movs	r1, #0
 80030ea:	e003      	b.n	80030f4 <LoopCopyDataInit>

080030ec <CopyDataInit>:
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <LoopForever+0x2>)
 80030ee:	585b      	ldr	r3, [r3, r1]
 80030f0:	5043      	str	r3, [r0, r1]
 80030f2:	3104      	adds	r1, #4

080030f4 <LoopCopyDataInit>:
 80030f4:	480a      	ldr	r0, [pc, #40]	; (8003120 <LoopForever+0x6>)
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <LoopForever+0xa>)
 80030f8:	1842      	adds	r2, r0, r1
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d3f6      	bcc.n	80030ec <CopyDataInit>
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <LoopForever+0xe>)
 8003100:	e002      	b.n	8003108 <LoopFillZerobss>

08003102 <FillZerobss>:
 8003102:	2300      	movs	r3, #0
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	3204      	adds	r2, #4

08003108 <LoopFillZerobss>:
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <LoopForever+0x12>)
 800310a:	429a      	cmp	r2, r3
 800310c:	d3f9      	bcc.n	8003102 <FillZerobss>
 800310e:	e000      	b.n	8003112 <LoopFillZerobss+0xa>
 8003110:	bf00      	nop
 8003112:	f7fd fa05 	bl	8000520 <__libc_init_array>
 8003116:	f7ff f8eb 	bl	80022f0 <main>

0800311a <LoopForever>:
 800311a:	e7fe      	b.n	800311a <LoopForever>
 800311c:	08003294 	.word	0x08003294
 8003120:	20000000 	.word	0x20000000
 8003124:	20000078 	.word	0x20000078
 8003128:	20000078 	.word	0x20000078
 800312c:	2000021c 	.word	0x2000021c

08003130 <BusFault_Handler>:
 8003130:	e7fe      	b.n	8003130 <BusFault_Handler>
 8003132:	0000      	movs	r0, r0

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
