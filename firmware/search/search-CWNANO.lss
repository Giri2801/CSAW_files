
search-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800312c  0800312c  0001312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800326c  0800326c  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  0800326c  0800326c  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800326c  0800326c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08003274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000016c  080033e0  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000310  080033e0  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025c41  00000000  00000000  0002023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e28  00000000  00000000  00045e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00006de6  00000000  00000000  0004cca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e0  00000000  00000000  00053a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006e8  00000000  00000000  00054270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a69  00000000  00000000  00054958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003be8  00000000  00000000  0005d3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001078  00000000  00000000  00060fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000204  00000000  00000000  00062024  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001e4  00000000  00000000  00062228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	b510      	push	{r4, lr}
 800018e:	4283      	cmp	r3, r0
 8000190:	d003      	beq.n	800019a <deregister_tm_clones+0x12>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d000      	beq.n	800019a <deregister_tm_clones+0x12>
 8000198:	4798      	blx	r3
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000016c 	.word	0x2000016c
 80001a0:	2000016c 	.word	0x2000016c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001aa:	4907      	ldr	r1, [pc, #28]	; (80001c8 <register_tm_clones+0x20>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	108b      	asrs	r3, r1, #2
 80001b0:	0fc9      	lsrs	r1, r1, #31
 80001b2:	18c9      	adds	r1, r1, r3
 80001b4:	b510      	push	{r4, lr}
 80001b6:	1049      	asrs	r1, r1, #1
 80001b8:	d003      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <register_tm_clones+0x24>)
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d000      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001c0:	4798      	blx	r3
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000016c 	.word	0x2000016c
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c07      	ldr	r4, [pc, #28]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d109      	bne.n	80001ee <__do_global_dtors_aux+0x1e>
 80001da:	f7ff ffd5 	bl	8000188 <deregister_tm_clones>
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x28>)
 80001e6:	e000      	b.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e8:	bf00      	nop
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000016c 	.word	0x2000016c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003114 	.word	0x08003114

080001fc <frame_dummy>:
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <frame_dummy+0x18>)
 80001fe:	b510      	push	{r4, lr}
 8000200:	2b00      	cmp	r3, #0
 8000202:	d003      	beq.n	800020c <frame_dummy+0x10>
 8000204:	4904      	ldr	r1, [pc, #16]	; (8000218 <frame_dummy+0x1c>)
 8000206:	4805      	ldr	r0, [pc, #20]	; (800021c <frame_dummy+0x20>)
 8000208:	e000      	b.n	800020c <frame_dummy+0x10>
 800020a:	bf00      	nop
 800020c:	f7ff ffcc 	bl	80001a8 <register_tm_clones>
 8000210:	bd10      	pop	{r4, pc}
 8000212:	46c0      	nop			; (mov r8, r8)
 8000214:	00000000 	.word	0x00000000
 8000218:	20000170 	.word	0x20000170
 800021c:	08003114 	.word	0x08003114

08000220 <__gnu_thumb1_case_uqi>:
 8000220:	b402      	push	{r1}
 8000222:	4671      	mov	r1, lr
 8000224:	0849      	lsrs	r1, r1, #1
 8000226:	0049      	lsls	r1, r1, #1
 8000228:	5c09      	ldrb	r1, [r1, r0]
 800022a:	0049      	lsls	r1, r1, #1
 800022c:	448e      	add	lr, r1
 800022e:	bc02      	pop	{r1}
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__udivsi3>:
 8000234:	2200      	movs	r2, #0
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d374      	bcc.n	8000326 <__udivsi3+0xf2>
 800023c:	0903      	lsrs	r3, r0, #4
 800023e:	428b      	cmp	r3, r1
 8000240:	d35f      	bcc.n	8000302 <__udivsi3+0xce>
 8000242:	0a03      	lsrs	r3, r0, #8
 8000244:	428b      	cmp	r3, r1
 8000246:	d344      	bcc.n	80002d2 <__udivsi3+0x9e>
 8000248:	0b03      	lsrs	r3, r0, #12
 800024a:	428b      	cmp	r3, r1
 800024c:	d328      	bcc.n	80002a0 <__udivsi3+0x6c>
 800024e:	0c03      	lsrs	r3, r0, #16
 8000250:	428b      	cmp	r3, r1
 8000252:	d30d      	bcc.n	8000270 <__udivsi3+0x3c>
 8000254:	22ff      	movs	r2, #255	; 0xff
 8000256:	0209      	lsls	r1, r1, #8
 8000258:	ba12      	rev	r2, r2
 800025a:	0c03      	lsrs	r3, r0, #16
 800025c:	428b      	cmp	r3, r1
 800025e:	d302      	bcc.n	8000266 <__udivsi3+0x32>
 8000260:	1212      	asrs	r2, r2, #8
 8000262:	0209      	lsls	r1, r1, #8
 8000264:	d065      	beq.n	8000332 <__udivsi3+0xfe>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d319      	bcc.n	80002a0 <__udivsi3+0x6c>
 800026c:	e000      	b.n	8000270 <__udivsi3+0x3c>
 800026e:	0a09      	lsrs	r1, r1, #8
 8000270:	0bc3      	lsrs	r3, r0, #15
 8000272:	428b      	cmp	r3, r1
 8000274:	d301      	bcc.n	800027a <__udivsi3+0x46>
 8000276:	03cb      	lsls	r3, r1, #15
 8000278:	1ac0      	subs	r0, r0, r3
 800027a:	4152      	adcs	r2, r2
 800027c:	0b83      	lsrs	r3, r0, #14
 800027e:	428b      	cmp	r3, r1
 8000280:	d301      	bcc.n	8000286 <__udivsi3+0x52>
 8000282:	038b      	lsls	r3, r1, #14
 8000284:	1ac0      	subs	r0, r0, r3
 8000286:	4152      	adcs	r2, r2
 8000288:	0b43      	lsrs	r3, r0, #13
 800028a:	428b      	cmp	r3, r1
 800028c:	d301      	bcc.n	8000292 <__udivsi3+0x5e>
 800028e:	034b      	lsls	r3, r1, #13
 8000290:	1ac0      	subs	r0, r0, r3
 8000292:	4152      	adcs	r2, r2
 8000294:	0b03      	lsrs	r3, r0, #12
 8000296:	428b      	cmp	r3, r1
 8000298:	d301      	bcc.n	800029e <__udivsi3+0x6a>
 800029a:	030b      	lsls	r3, r1, #12
 800029c:	1ac0      	subs	r0, r0, r3
 800029e:	4152      	adcs	r2, r2
 80002a0:	0ac3      	lsrs	r3, r0, #11
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d301      	bcc.n	80002aa <__udivsi3+0x76>
 80002a6:	02cb      	lsls	r3, r1, #11
 80002a8:	1ac0      	subs	r0, r0, r3
 80002aa:	4152      	adcs	r2, r2
 80002ac:	0a83      	lsrs	r3, r0, #10
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d301      	bcc.n	80002b6 <__udivsi3+0x82>
 80002b2:	028b      	lsls	r3, r1, #10
 80002b4:	1ac0      	subs	r0, r0, r3
 80002b6:	4152      	adcs	r2, r2
 80002b8:	0a43      	lsrs	r3, r0, #9
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__udivsi3+0x8e>
 80002be:	024b      	lsls	r3, r1, #9
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0a03      	lsrs	r3, r0, #8
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__udivsi3+0x9a>
 80002ca:	020b      	lsls	r3, r1, #8
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	d2cd      	bcs.n	800026e <__udivsi3+0x3a>
 80002d2:	09c3      	lsrs	r3, r0, #7
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__udivsi3+0xa8>
 80002d8:	01cb      	lsls	r3, r1, #7
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0983      	lsrs	r3, r0, #6
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__udivsi3+0xb4>
 80002e4:	018b      	lsls	r3, r1, #6
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0943      	lsrs	r3, r0, #5
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__udivsi3+0xc0>
 80002f0:	014b      	lsls	r3, r1, #5
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0903      	lsrs	r3, r0, #4
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__udivsi3+0xcc>
 80002fc:	010b      	lsls	r3, r1, #4
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	08c3      	lsrs	r3, r0, #3
 8000304:	428b      	cmp	r3, r1
 8000306:	d301      	bcc.n	800030c <__udivsi3+0xd8>
 8000308:	00cb      	lsls	r3, r1, #3
 800030a:	1ac0      	subs	r0, r0, r3
 800030c:	4152      	adcs	r2, r2
 800030e:	0883      	lsrs	r3, r0, #2
 8000310:	428b      	cmp	r3, r1
 8000312:	d301      	bcc.n	8000318 <__udivsi3+0xe4>
 8000314:	008b      	lsls	r3, r1, #2
 8000316:	1ac0      	subs	r0, r0, r3
 8000318:	4152      	adcs	r2, r2
 800031a:	0843      	lsrs	r3, r0, #1
 800031c:	428b      	cmp	r3, r1
 800031e:	d301      	bcc.n	8000324 <__udivsi3+0xf0>
 8000320:	004b      	lsls	r3, r1, #1
 8000322:	1ac0      	subs	r0, r0, r3
 8000324:	4152      	adcs	r2, r2
 8000326:	1a41      	subs	r1, r0, r1
 8000328:	d200      	bcs.n	800032c <__udivsi3+0xf8>
 800032a:	4601      	mov	r1, r0
 800032c:	4152      	adcs	r2, r2
 800032e:	4610      	mov	r0, r2
 8000330:	4770      	bx	lr
 8000332:	e7ff      	b.n	8000334 <__udivsi3+0x100>
 8000334:	b501      	push	{r0, lr}
 8000336:	2000      	movs	r0, #0
 8000338:	f000 f806 	bl	8000348 <__aeabi_idiv0>
 800033c:	bd02      	pop	{r1, pc}
 800033e:	46c0      	nop			; (mov r8, r8)

08000340 <__aeabi_uidivmod>:
 8000340:	2900      	cmp	r1, #0
 8000342:	d0f7      	beq.n	8000334 <__udivsi3+0x100>
 8000344:	e776      	b.n	8000234 <__udivsi3>
 8000346:	4770      	bx	lr

08000348 <__aeabi_idiv0>:
 8000348:	4770      	bx	lr
 800034a:	46c0      	nop			; (mov r8, r8)

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0c      	ldr	r5, [pc, #48]	; (8000380 <__libc_init_array+0x34>)
 8000350:	4e0c      	ldr	r6, [pc, #48]	; (8000384 <__libc_init_array+0x38>)
 8000352:	1b76      	subs	r6, r6, r5
 8000354:	10b6      	asrs	r6, r6, #2
 8000356:	d005      	beq.n	8000364 <__libc_init_array+0x18>
 8000358:	2400      	movs	r4, #0
 800035a:	cd08      	ldmia	r5!, {r3}
 800035c:	3401      	adds	r4, #1
 800035e:	4798      	blx	r3
 8000360:	42a6      	cmp	r6, r4
 8000362:	d1fa      	bne.n	800035a <__libc_init_array+0xe>
 8000364:	f002 fed6 	bl	8003114 <_init>
 8000368:	4d07      	ldr	r5, [pc, #28]	; (8000388 <__libc_init_array+0x3c>)
 800036a:	4e08      	ldr	r6, [pc, #32]	; (800038c <__libc_init_array+0x40>)
 800036c:	1b76      	subs	r6, r6, r5
 800036e:	10b6      	asrs	r6, r6, #2
 8000370:	d005      	beq.n	800037e <__libc_init_array+0x32>
 8000372:	2400      	movs	r4, #0
 8000374:	cd08      	ldmia	r5!, {r3}
 8000376:	3401      	adds	r4, #1
 8000378:	4798      	blx	r3
 800037a:	42a6      	cmp	r6, r4
 800037c:	d1fa      	bne.n	8000374 <__libc_init_array+0x28>
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	0800326c 	.word	0x0800326c
 8000384:	0800326c 	.word	0x0800326c
 8000388:	0800326c 	.word	0x0800326c
 800038c:	08003270 	.word	0x08003270

08000390 <memmove>:
 8000390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000392:	46c6      	mov	lr, r8
 8000394:	b500      	push	{lr}
 8000396:	4288      	cmp	r0, r1
 8000398:	d90c      	bls.n	80003b4 <memmove+0x24>
 800039a:	188b      	adds	r3, r1, r2
 800039c:	4298      	cmp	r0, r3
 800039e:	d209      	bcs.n	80003b4 <memmove+0x24>
 80003a0:	1e53      	subs	r3, r2, #1
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d003      	beq.n	80003ae <memmove+0x1e>
 80003a6:	5cca      	ldrb	r2, [r1, r3]
 80003a8:	54c2      	strb	r2, [r0, r3]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	d2fb      	bcs.n	80003a6 <memmove+0x16>
 80003ae:	bc04      	pop	{r2}
 80003b0:	4690      	mov	r8, r2
 80003b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b4:	2a0f      	cmp	r2, #15
 80003b6:	d80c      	bhi.n	80003d2 <memmove+0x42>
 80003b8:	0005      	movs	r5, r0
 80003ba:	1e56      	subs	r6, r2, #1
 80003bc:	2a00      	cmp	r2, #0
 80003be:	d0f6      	beq.n	80003ae <memmove+0x1e>
 80003c0:	2300      	movs	r3, #0
 80003c2:	e000      	b.n	80003c6 <memmove+0x36>
 80003c4:	0023      	movs	r3, r4
 80003c6:	5cca      	ldrb	r2, [r1, r3]
 80003c8:	1c5c      	adds	r4, r3, #1
 80003ca:	54ea      	strb	r2, [r5, r3]
 80003cc:	429e      	cmp	r6, r3
 80003ce:	d1f9      	bne.n	80003c4 <memmove+0x34>
 80003d0:	e7ed      	b.n	80003ae <memmove+0x1e>
 80003d2:	000b      	movs	r3, r1
 80003d4:	2603      	movs	r6, #3
 80003d6:	4303      	orrs	r3, r0
 80003d8:	401e      	ands	r6, r3
 80003da:	000c      	movs	r4, r1
 80003dc:	0003      	movs	r3, r0
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d12e      	bne.n	8000440 <memmove+0xb0>
 80003e2:	0015      	movs	r5, r2
 80003e4:	3d10      	subs	r5, #16
 80003e6:	092d      	lsrs	r5, r5, #4
 80003e8:	46ac      	mov	ip, r5
 80003ea:	012d      	lsls	r5, r5, #4
 80003ec:	46a8      	mov	r8, r5
 80003ee:	4480      	add	r8, r0
 80003f0:	e000      	b.n	80003f4 <memmove+0x64>
 80003f2:	002b      	movs	r3, r5
 80003f4:	001d      	movs	r5, r3
 80003f6:	6827      	ldr	r7, [r4, #0]
 80003f8:	3510      	adds	r5, #16
 80003fa:	601f      	str	r7, [r3, #0]
 80003fc:	6867      	ldr	r7, [r4, #4]
 80003fe:	605f      	str	r7, [r3, #4]
 8000400:	68a7      	ldr	r7, [r4, #8]
 8000402:	609f      	str	r7, [r3, #8]
 8000404:	68e7      	ldr	r7, [r4, #12]
 8000406:	3410      	adds	r4, #16
 8000408:	60df      	str	r7, [r3, #12]
 800040a:	4543      	cmp	r3, r8
 800040c:	d1f1      	bne.n	80003f2 <memmove+0x62>
 800040e:	4665      	mov	r5, ip
 8000410:	230f      	movs	r3, #15
 8000412:	240c      	movs	r4, #12
 8000414:	3501      	adds	r5, #1
 8000416:	012d      	lsls	r5, r5, #4
 8000418:	1949      	adds	r1, r1, r5
 800041a:	4013      	ands	r3, r2
 800041c:	1945      	adds	r5, r0, r5
 800041e:	4214      	tst	r4, r2
 8000420:	d011      	beq.n	8000446 <memmove+0xb6>
 8000422:	598c      	ldr	r4, [r1, r6]
 8000424:	51ac      	str	r4, [r5, r6]
 8000426:	3604      	adds	r6, #4
 8000428:	1b9c      	subs	r4, r3, r6
 800042a:	2c03      	cmp	r4, #3
 800042c:	d8f9      	bhi.n	8000422 <memmove+0x92>
 800042e:	2403      	movs	r4, #3
 8000430:	3b04      	subs	r3, #4
 8000432:	089b      	lsrs	r3, r3, #2
 8000434:	3301      	adds	r3, #1
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	18ed      	adds	r5, r5, r3
 800043a:	18c9      	adds	r1, r1, r3
 800043c:	4022      	ands	r2, r4
 800043e:	e7bc      	b.n	80003ba <memmove+0x2a>
 8000440:	1e56      	subs	r6, r2, #1
 8000442:	0005      	movs	r5, r0
 8000444:	e7bc      	b.n	80003c0 <memmove+0x30>
 8000446:	001a      	movs	r2, r3
 8000448:	e7b7      	b.n	80003ba <memmove+0x2a>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <memset>:
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	0005      	movs	r5, r0
 8000450:	0783      	lsls	r3, r0, #30
 8000452:	d04a      	beq.n	80004ea <memset+0x9e>
 8000454:	1e54      	subs	r4, r2, #1
 8000456:	2a00      	cmp	r2, #0
 8000458:	d044      	beq.n	80004e4 <memset+0x98>
 800045a:	b2ce      	uxtb	r6, r1
 800045c:	0003      	movs	r3, r0
 800045e:	2203      	movs	r2, #3
 8000460:	e002      	b.n	8000468 <memset+0x1c>
 8000462:	3501      	adds	r5, #1
 8000464:	3c01      	subs	r4, #1
 8000466:	d33d      	bcc.n	80004e4 <memset+0x98>
 8000468:	3301      	adds	r3, #1
 800046a:	702e      	strb	r6, [r5, #0]
 800046c:	4213      	tst	r3, r2
 800046e:	d1f8      	bne.n	8000462 <memset+0x16>
 8000470:	2c03      	cmp	r4, #3
 8000472:	d92f      	bls.n	80004d4 <memset+0x88>
 8000474:	22ff      	movs	r2, #255	; 0xff
 8000476:	400a      	ands	r2, r1
 8000478:	0215      	lsls	r5, r2, #8
 800047a:	4315      	orrs	r5, r2
 800047c:	042a      	lsls	r2, r5, #16
 800047e:	4315      	orrs	r5, r2
 8000480:	2c0f      	cmp	r4, #15
 8000482:	d935      	bls.n	80004f0 <memset+0xa4>
 8000484:	0027      	movs	r7, r4
 8000486:	3f10      	subs	r7, #16
 8000488:	093f      	lsrs	r7, r7, #4
 800048a:	013e      	lsls	r6, r7, #4
 800048c:	46b4      	mov	ip, r6
 800048e:	001e      	movs	r6, r3
 8000490:	001a      	movs	r2, r3
 8000492:	3610      	adds	r6, #16
 8000494:	4466      	add	r6, ip
 8000496:	6015      	str	r5, [r2, #0]
 8000498:	6055      	str	r5, [r2, #4]
 800049a:	6095      	str	r5, [r2, #8]
 800049c:	60d5      	str	r5, [r2, #12]
 800049e:	3210      	adds	r2, #16
 80004a0:	42b2      	cmp	r2, r6
 80004a2:	d1f8      	bne.n	8000496 <memset+0x4a>
 80004a4:	260f      	movs	r6, #15
 80004a6:	220c      	movs	r2, #12
 80004a8:	3701      	adds	r7, #1
 80004aa:	013f      	lsls	r7, r7, #4
 80004ac:	4026      	ands	r6, r4
 80004ae:	19db      	adds	r3, r3, r7
 80004b0:	0037      	movs	r7, r6
 80004b2:	4222      	tst	r2, r4
 80004b4:	d017      	beq.n	80004e6 <memset+0x9a>
 80004b6:	1f3e      	subs	r6, r7, #4
 80004b8:	08b6      	lsrs	r6, r6, #2
 80004ba:	00b4      	lsls	r4, r6, #2
 80004bc:	46a4      	mov	ip, r4
 80004be:	001a      	movs	r2, r3
 80004c0:	1d1c      	adds	r4, r3, #4
 80004c2:	4464      	add	r4, ip
 80004c4:	c220      	stmia	r2!, {r5}
 80004c6:	42a2      	cmp	r2, r4
 80004c8:	d1fc      	bne.n	80004c4 <memset+0x78>
 80004ca:	2403      	movs	r4, #3
 80004cc:	3601      	adds	r6, #1
 80004ce:	00b6      	lsls	r6, r6, #2
 80004d0:	199b      	adds	r3, r3, r6
 80004d2:	403c      	ands	r4, r7
 80004d4:	2c00      	cmp	r4, #0
 80004d6:	d005      	beq.n	80004e4 <memset+0x98>
 80004d8:	b2c9      	uxtb	r1, r1
 80004da:	191c      	adds	r4, r3, r4
 80004dc:	7019      	strb	r1, [r3, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d1fb      	bne.n	80004dc <memset+0x90>
 80004e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e6:	0034      	movs	r4, r6
 80004e8:	e7f4      	b.n	80004d4 <memset+0x88>
 80004ea:	0014      	movs	r4, r2
 80004ec:	0003      	movs	r3, r0
 80004ee:	e7bf      	b.n	8000470 <memset+0x24>
 80004f0:	0027      	movs	r7, r4
 80004f2:	e7e0      	b.n	80004b6 <memset+0x6a>

080004f4 <srand>:
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <srand+0x48>)
 80004f6:	b570      	push	{r4, r5, r6, lr}
 80004f8:	681c      	ldr	r4, [r3, #0]
 80004fa:	0005      	movs	r5, r0
 80004fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80004fe:	2800      	cmp	r0, #0
 8000500:	d003      	beq.n	800050a <srand+0x16>
 8000502:	2300      	movs	r3, #0
 8000504:	6105      	str	r5, [r0, #16]
 8000506:	6143      	str	r3, [r0, #20]
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	3018      	adds	r0, #24
 800050c:	f000 f8aa 	bl	8000664 <malloc>
 8000510:	63a0      	str	r0, [r4, #56]	; 0x38
 8000512:	2800      	cmp	r0, #0
 8000514:	d00c      	beq.n	8000530 <srand+0x3c>
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <srand+0x4c>)
 8000518:	2201      	movs	r2, #1
 800051a:	6003      	str	r3, [r0, #0]
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <srand+0x50>)
 800051e:	6043      	str	r3, [r0, #4]
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <srand+0x54>)
 8000522:	6083      	str	r3, [r0, #8]
 8000524:	230b      	movs	r3, #11
 8000526:	8183      	strh	r3, [r0, #12]
 8000528:	2300      	movs	r3, #0
 800052a:	6102      	str	r2, [r0, #16]
 800052c:	6143      	str	r3, [r0, #20]
 800052e:	e7e8      	b.n	8000502 <srand+0xe>
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <srand+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	2142      	movs	r1, #66	; 0x42
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <srand+0x5c>)
 8000538:	f000 f850 	bl	80005dc <__assert_func>
 800053c:	20000108 	.word	0x20000108
 8000540:	abcd330e 	.word	0xabcd330e
 8000544:	e66d1234 	.word	0xe66d1234
 8000548:	0005deec 	.word	0x0005deec
 800054c:	080031a4 	.word	0x080031a4
 8000550:	080031bc 	.word	0x080031bc

08000554 <rand>:
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <rand+0x64>)
 8000556:	b570      	push	{r4, r5, r6, lr}
 8000558:	681d      	ldr	r5, [r3, #0]
 800055a:	6bac      	ldr	r4, [r5, #56]	; 0x38
 800055c:	2c00      	cmp	r4, #0
 800055e:	d00e      	beq.n	800057e <rand+0x2a>
 8000560:	6920      	ldr	r0, [r4, #16]
 8000562:	6961      	ldr	r1, [r4, #20]
 8000564:	4a15      	ldr	r2, [pc, #84]	; (80005bc <rand+0x68>)
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <rand+0x6c>)
 8000568:	f001 fda2 	bl	80020b0 <__aeabi_lmul>
 800056c:	2201      	movs	r2, #1
 800056e:	2300      	movs	r3, #0
 8000570:	1812      	adds	r2, r2, r0
 8000572:	414b      	adcs	r3, r1
 8000574:	0058      	lsls	r0, r3, #1
 8000576:	0840      	lsrs	r0, r0, #1
 8000578:	6122      	str	r2, [r4, #16]
 800057a:	6163      	str	r3, [r4, #20]
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	2018      	movs	r0, #24
 8000580:	f000 f870 	bl	8000664 <malloc>
 8000584:	1e04      	subs	r4, r0, #0
 8000586:	63a8      	str	r0, [r5, #56]	; 0x38
 8000588:	d00f      	beq.n	80005aa <rand+0x56>
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <rand+0x70>)
 800058c:	2201      	movs	r2, #1
 800058e:	6003      	str	r3, [r0, #0]
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <rand+0x74>)
 8000592:	6043      	str	r3, [r0, #4]
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <rand+0x78>)
 8000596:	6083      	str	r3, [r0, #8]
 8000598:	230b      	movs	r3, #11
 800059a:	8183      	strh	r3, [r0, #12]
 800059c:	2300      	movs	r3, #0
 800059e:	6102      	str	r2, [r0, #16]
 80005a0:	6143      	str	r3, [r0, #20]
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <rand+0x6c>)
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <rand+0x7c>)
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <rand+0x6c>)
 80005a8:	e7e6      	b.n	8000578 <rand+0x24>
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <rand+0x80>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	214e      	movs	r1, #78	; 0x4e
 80005b0:	4809      	ldr	r0, [pc, #36]	; (80005d8 <rand+0x84>)
 80005b2:	f000 f813 	bl	80005dc <__assert_func>
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	20000108 	.word	0x20000108
 80005bc:	4c957f2d 	.word	0x4c957f2d
 80005c0:	5851f42d 	.word	0x5851f42d
 80005c4:	abcd330e 	.word	0xabcd330e
 80005c8:	e66d1234 	.word	0xe66d1234
 80005cc:	0005deec 	.word	0x0005deec
 80005d0:	4c957f2e 	.word	0x4c957f2e
 80005d4:	080031a4 	.word	0x080031a4
 80005d8:	080031bc 	.word	0x080031bc

080005dc <__assert_func>:
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	001c      	movs	r4, r3
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <__assert_func+0x30>)
 80005e2:	0005      	movs	r5, r0
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	b085      	sub	sp, #20
 80005e8:	68d8      	ldr	r0, [r3, #12]
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d00a      	beq.n	8000604 <__assert_func+0x28>
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <__assert_func+0x34>)
 80005f0:	9202      	str	r2, [sp, #8]
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	9100      	str	r1, [sp, #0]
 80005f6:	002b      	movs	r3, r5
 80005f8:	0022      	movs	r2, r4
 80005fa:	4906      	ldr	r1, [pc, #24]	; (8000614 <__assert_func+0x38>)
 80005fc:	f000 f820 	bl	8000640 <fiprintf>
 8000600:	f000 fdbc 	bl	800117c <abort>
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <__assert_func+0x3c>)
 8000606:	001a      	movs	r2, r3
 8000608:	e7f2      	b.n	80005f0 <__assert_func+0x14>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000108 	.word	0x20000108
 8000610:	080031f0 	.word	0x080031f0
 8000614:	08003200 	.word	0x08003200
 8000618:	080031fc 	.word	0x080031fc

0800061c <__assert>:
 800061c:	0013      	movs	r3, r2
 800061e:	b510      	push	{r4, lr}
 8000620:	2200      	movs	r2, #0
 8000622:	f7ff ffdb 	bl	80005dc <__assert_func>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <_fiprintf_r>:
 8000628:	b40c      	push	{r2, r3}
 800062a:	b500      	push	{lr}
 800062c:	b083      	sub	sp, #12
 800062e:	ab04      	add	r3, sp, #16
 8000630:	cb04      	ldmia	r3!, {r2}
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	f000 f91e 	bl	8000874 <_vfiprintf_r>
 8000638:	b003      	add	sp, #12
 800063a:	bc08      	pop	{r3}
 800063c:	b002      	add	sp, #8
 800063e:	4718      	bx	r3

08000640 <fiprintf>:
 8000640:	b40e      	push	{r1, r2, r3}
 8000642:	b500      	push	{lr}
 8000644:	b082      	sub	sp, #8
 8000646:	ab03      	add	r3, sp, #12
 8000648:	0001      	movs	r1, r0
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <fiprintf+0x20>)
 800064c:	cb04      	ldmia	r3!, {r2}
 800064e:	6800      	ldr	r0, [r0, #0]
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	f000 f90f 	bl	8000874 <_vfiprintf_r>
 8000656:	b002      	add	sp, #8
 8000658:	bc08      	pop	{r3}
 800065a:	b003      	add	sp, #12
 800065c:	4718      	bx	r3
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	20000108 	.word	0x20000108

08000664 <malloc>:
 8000664:	b510      	push	{r4, lr}
 8000666:	4b03      	ldr	r3, [pc, #12]	; (8000674 <malloc+0x10>)
 8000668:	0001      	movs	r1, r0
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	f000 f864 	bl	8000738 <_malloc_r>
 8000670:	bd10      	pop	{r4, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	20000108 	.word	0x20000108

08000678 <free>:
 8000678:	b510      	push	{r4, lr}
 800067a:	4b03      	ldr	r3, [pc, #12]	; (8000688 <free+0x10>)
 800067c:	0001      	movs	r1, r0
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	f000 f804 	bl	800068c <_free_r>
 8000684:	bd10      	pop	{r4, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	20000108 	.word	0x20000108

0800068c <_free_r>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	0005      	movs	r5, r0
 8000690:	2900      	cmp	r1, #0
 8000692:	d015      	beq.n	80006c0 <_free_r+0x34>
 8000694:	1f0c      	subs	r4, r1, #4
 8000696:	6823      	ldr	r3, [r4, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db27      	blt.n	80006ec <_free_r+0x60>
 800069c:	0028      	movs	r0, r5
 800069e:	f001 fa4d 	bl	8001b3c <__malloc_lock>
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <_free_r+0xa8>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	d005      	beq.n	80006b6 <_free_r+0x2a>
 80006aa:	42a2      	cmp	r2, r4
 80006ac:	d90c      	bls.n	80006c8 <_free_r+0x3c>
 80006ae:	6821      	ldr	r1, [r4, #0]
 80006b0:	1860      	adds	r0, r4, r1
 80006b2:	4282      	cmp	r2, r0
 80006b4:	d024      	beq.n	8000700 <_free_r+0x74>
 80006b6:	6062      	str	r2, [r4, #4]
 80006b8:	0028      	movs	r0, r5
 80006ba:	601c      	str	r4, [r3, #0]
 80006bc:	f001 fa40 	bl	8001b40 <__malloc_unlock>
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	42a3      	cmp	r3, r4
 80006c4:	d803      	bhi.n	80006ce <_free_r+0x42>
 80006c6:	001a      	movs	r2, r3
 80006c8:	6853      	ldr	r3, [r2, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f9      	bne.n	80006c2 <_free_r+0x36>
 80006ce:	6811      	ldr	r1, [r2, #0]
 80006d0:	1850      	adds	r0, r2, r1
 80006d2:	42a0      	cmp	r0, r4
 80006d4:	d01b      	beq.n	800070e <_free_r+0x82>
 80006d6:	d827      	bhi.n	8000728 <_free_r+0x9c>
 80006d8:	6821      	ldr	r1, [r4, #0]
 80006da:	1860      	adds	r0, r4, r1
 80006dc:	4283      	cmp	r3, r0
 80006de:	d007      	beq.n	80006f0 <_free_r+0x64>
 80006e0:	6063      	str	r3, [r4, #4]
 80006e2:	6054      	str	r4, [r2, #4]
 80006e4:	0028      	movs	r0, r5
 80006e6:	f001 fa2b 	bl	8001b40 <__malloc_unlock>
 80006ea:	e7e9      	b.n	80006c0 <_free_r+0x34>
 80006ec:	18e4      	adds	r4, r4, r3
 80006ee:	e7d5      	b.n	800069c <_free_r+0x10>
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	4684      	mov	ip, r0
 80006f6:	4461      	add	r1, ip
 80006f8:	6021      	str	r1, [r4, #0]
 80006fa:	6063      	str	r3, [r4, #4]
 80006fc:	6054      	str	r4, [r2, #4]
 80006fe:	e7f1      	b.n	80006e4 <_free_r+0x58>
 8000700:	6810      	ldr	r0, [r2, #0]
 8000702:	6852      	ldr	r2, [r2, #4]
 8000704:	4684      	mov	ip, r0
 8000706:	4461      	add	r1, ip
 8000708:	6021      	str	r1, [r4, #0]
 800070a:	6062      	str	r2, [r4, #4]
 800070c:	e7d4      	b.n	80006b8 <_free_r+0x2c>
 800070e:	6820      	ldr	r0, [r4, #0]
 8000710:	1809      	adds	r1, r1, r0
 8000712:	1850      	adds	r0, r2, r1
 8000714:	6011      	str	r1, [r2, #0]
 8000716:	4283      	cmp	r3, r0
 8000718:	d1e4      	bne.n	80006e4 <_free_r+0x58>
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	4684      	mov	ip, r0
 8000720:	4461      	add	r1, ip
 8000722:	6011      	str	r1, [r2, #0]
 8000724:	6053      	str	r3, [r2, #4]
 8000726:	e7dd      	b.n	80006e4 <_free_r+0x58>
 8000728:	230c      	movs	r3, #12
 800072a:	0028      	movs	r0, r5
 800072c:	602b      	str	r3, [r5, #0]
 800072e:	f001 fa07 	bl	8001b40 <__malloc_unlock>
 8000732:	e7c5      	b.n	80006c0 <_free_r+0x34>
 8000734:	20000290 	.word	0x20000290

08000738 <_malloc_r>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	2303      	movs	r3, #3
 800073c:	1ccd      	adds	r5, r1, #3
 800073e:	439d      	bics	r5, r3
 8000740:	3508      	adds	r5, #8
 8000742:	0006      	movs	r6, r0
 8000744:	2d0c      	cmp	r5, #12
 8000746:	d22a      	bcs.n	800079e <_malloc_r+0x66>
 8000748:	250c      	movs	r5, #12
 800074a:	42a9      	cmp	r1, r5
 800074c:	d829      	bhi.n	80007a2 <_malloc_r+0x6a>
 800074e:	0030      	movs	r0, r6
 8000750:	f001 f9f4 	bl	8001b3c <__malloc_lock>
 8000754:	4f2a      	ldr	r7, [pc, #168]	; (8000800 <_malloc_r+0xc8>)
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	2a00      	cmp	r2, #0
 800075a:	d00a      	beq.n	8000772 <_malloc_r+0x3a>
 800075c:	6813      	ldr	r3, [r2, #0]
 800075e:	1b5b      	subs	r3, r3, r5
 8000760:	d404      	bmi.n	800076c <_malloc_r+0x34>
 8000762:	e041      	b.n	80007e8 <_malloc_r+0xb0>
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	1b5b      	subs	r3, r3, r5
 8000768:	d51f      	bpl.n	80007aa <_malloc_r+0x72>
 800076a:	0022      	movs	r2, r4
 800076c:	6854      	ldr	r4, [r2, #4]
 800076e:	2c00      	cmp	r4, #0
 8000770:	d1f8      	bne.n	8000764 <_malloc_r+0x2c>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d03d      	beq.n	80007f4 <_malloc_r+0xbc>
 8000778:	0029      	movs	r1, r5
 800077a:	0030      	movs	r0, r6
 800077c:	f000 fbf0 	bl	8000f60 <_sbrk_r>
 8000780:	1c43      	adds	r3, r0, #1
 8000782:	d02a      	beq.n	80007da <_malloc_r+0xa2>
 8000784:	2303      	movs	r3, #3
 8000786:	1cc4      	adds	r4, r0, #3
 8000788:	439c      	bics	r4, r3
 800078a:	42a0      	cmp	r0, r4
 800078c:	d005      	beq.n	800079a <_malloc_r+0x62>
 800078e:	1a21      	subs	r1, r4, r0
 8000790:	0030      	movs	r0, r6
 8000792:	f000 fbe5 	bl	8000f60 <_sbrk_r>
 8000796:	1c43      	adds	r3, r0, #1
 8000798:	d01f      	beq.n	80007da <_malloc_r+0xa2>
 800079a:	6025      	str	r5, [r4, #0]
 800079c:	e010      	b.n	80007c0 <_malloc_r+0x88>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	dad3      	bge.n	800074a <_malloc_r+0x12>
 80007a2:	230c      	movs	r3, #12
 80007a4:	2000      	movs	r0, #0
 80007a6:	6033      	str	r3, [r6, #0]
 80007a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007aa:	2b0b      	cmp	r3, #11
 80007ac:	d805      	bhi.n	80007ba <_malloc_r+0x82>
 80007ae:	6863      	ldr	r3, [r4, #4]
 80007b0:	42a2      	cmp	r2, r4
 80007b2:	d01d      	beq.n	80007f0 <_malloc_r+0xb8>
 80007b4:	6053      	str	r3, [r2, #4]
 80007b6:	e003      	b.n	80007c0 <_malloc_r+0x88>
 80007b8:	0014      	movs	r4, r2
 80007ba:	6023      	str	r3, [r4, #0]
 80007bc:	18e4      	adds	r4, r4, r3
 80007be:	6025      	str	r5, [r4, #0]
 80007c0:	0030      	movs	r0, r6
 80007c2:	f001 f9bd 	bl	8001b40 <__malloc_unlock>
 80007c6:	0020      	movs	r0, r4
 80007c8:	2207      	movs	r2, #7
 80007ca:	300b      	adds	r0, #11
 80007cc:	1d23      	adds	r3, r4, #4
 80007ce:	4390      	bics	r0, r2
 80007d0:	1ac2      	subs	r2, r0, r3
 80007d2:	d0e9      	beq.n	80007a8 <_malloc_r+0x70>
 80007d4:	1a1b      	subs	r3, r3, r0
 80007d6:	50a3      	str	r3, [r4, r2]
 80007d8:	e7e6      	b.n	80007a8 <_malloc_r+0x70>
 80007da:	230c      	movs	r3, #12
 80007dc:	0030      	movs	r0, r6
 80007de:	6033      	str	r3, [r6, #0]
 80007e0:	f001 f9ae 	bl	8001b40 <__malloc_unlock>
 80007e4:	2000      	movs	r0, #0
 80007e6:	e7df      	b.n	80007a8 <_malloc_r+0x70>
 80007e8:	2b0b      	cmp	r3, #11
 80007ea:	d8e5      	bhi.n	80007b8 <_malloc_r+0x80>
 80007ec:	0014      	movs	r4, r2
 80007ee:	6853      	ldr	r3, [r2, #4]
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	e7e5      	b.n	80007c0 <_malloc_r+0x88>
 80007f4:	2100      	movs	r1, #0
 80007f6:	0030      	movs	r0, r6
 80007f8:	f000 fbb2 	bl	8000f60 <_sbrk_r>
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	e7bb      	b.n	8000778 <_malloc_r+0x40>
 8000800:	20000290 	.word	0x20000290

08000804 <__sfputc_r>:
 8000804:	6893      	ldr	r3, [r2, #8]
 8000806:	b510      	push	{r4, lr}
 8000808:	3b01      	subs	r3, #1
 800080a:	6093      	str	r3, [r2, #8]
 800080c:	2b00      	cmp	r3, #0
 800080e:	da04      	bge.n	800081a <__sfputc_r+0x16>
 8000810:	6994      	ldr	r4, [r2, #24]
 8000812:	42a3      	cmp	r3, r4
 8000814:	db07      	blt.n	8000826 <__sfputc_r+0x22>
 8000816:	290a      	cmp	r1, #10
 8000818:	d005      	beq.n	8000826 <__sfputc_r+0x22>
 800081a:	6813      	ldr	r3, [r2, #0]
 800081c:	1c58      	adds	r0, r3, #1
 800081e:	6010      	str	r0, [r2, #0]
 8000820:	0008      	movs	r0, r1
 8000822:	7019      	strb	r1, [r3, #0]
 8000824:	bd10      	pop	{r4, pc}
 8000826:	f000 fbad 	bl	8000f84 <__swbuf_r>
 800082a:	e7fb      	b.n	8000824 <__sfputc_r+0x20>

0800082c <__sfputs_r>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	0006      	movs	r6, r0
 8000830:	000f      	movs	r7, r1
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00d      	beq.n	8000852 <__sfputs_r+0x26>
 8000836:	0014      	movs	r4, r2
 8000838:	18d5      	adds	r5, r2, r3
 800083a:	e002      	b.n	8000842 <__sfputs_r+0x16>
 800083c:	3401      	adds	r4, #1
 800083e:	42ac      	cmp	r4, r5
 8000840:	d007      	beq.n	8000852 <__sfputs_r+0x26>
 8000842:	7821      	ldrb	r1, [r4, #0]
 8000844:	003a      	movs	r2, r7
 8000846:	0030      	movs	r0, r6
 8000848:	f7ff ffdc 	bl	8000804 <__sfputc_r>
 800084c:	1c43      	adds	r3, r0, #1
 800084e:	d1f5      	bne.n	800083c <__sfputs_r+0x10>
 8000850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000852:	2000      	movs	r0, #0
 8000854:	e7fc      	b.n	8000850 <__sfputs_r+0x24>
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <__sprint_r>:
 8000858:	6893      	ldr	r3, [r2, #8]
 800085a:	b510      	push	{r4, lr}
 800085c:	0014      	movs	r4, r2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d102      	bne.n	8000868 <__sprint_r+0x10>
 8000862:	2000      	movs	r0, #0
 8000864:	6053      	str	r3, [r2, #4]
 8000866:	bd10      	pop	{r4, pc}
 8000868:	f000 fe8c 	bl	8001584 <__sfvwrite_r>
 800086c:	2300      	movs	r3, #0
 800086e:	60a3      	str	r3, [r4, #8]
 8000870:	6063      	str	r3, [r4, #4]
 8000872:	e7f8      	b.n	8000866 <__sprint_r+0xe>

08000874 <_vfiprintf_r>:
 8000874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000876:	464e      	mov	r6, r9
 8000878:	46de      	mov	lr, fp
 800087a:	4657      	mov	r7, sl
 800087c:	4645      	mov	r5, r8
 800087e:	b5e0      	push	{r5, r6, r7, lr}
 8000880:	b0a1      	sub	sp, #132	; 0x84
 8000882:	9004      	str	r0, [sp, #16]
 8000884:	9103      	str	r1, [sp, #12]
 8000886:	4691      	mov	r9, r2
 8000888:	001c      	movs	r4, r3
 800088a:	2800      	cmp	r0, #0
 800088c:	d004      	beq.n	8000898 <_vfiprintf_r+0x24>
 800088e:	6983      	ldr	r3, [r0, #24]
 8000890:	9305      	str	r3, [sp, #20]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d100      	bne.n	8000898 <_vfiprintf_r+0x24>
 8000896:	e0be      	b.n	8000a16 <_vfiprintf_r+0x1a2>
 8000898:	4bad      	ldr	r3, [pc, #692]	; (8000b50 <_vfiprintf_r+0x2dc>)
 800089a:	9a03      	ldr	r2, [sp, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d100      	bne.n	80008a2 <_vfiprintf_r+0x2e>
 80008a0:	e0c0      	b.n	8000a24 <_vfiprintf_r+0x1b0>
 80008a2:	4bac      	ldr	r3, [pc, #688]	; (8000b54 <_vfiprintf_r+0x2e0>)
 80008a4:	9a03      	ldr	r2, [sp, #12]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d100      	bne.n	80008ac <_vfiprintf_r+0x38>
 80008aa:	e0cd      	b.n	8000a48 <_vfiprintf_r+0x1d4>
 80008ac:	4baa      	ldr	r3, [pc, #680]	; (8000b58 <_vfiprintf_r+0x2e4>)
 80008ae:	9a03      	ldr	r2, [sp, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d100      	bne.n	80008b6 <_vfiprintf_r+0x42>
 80008b4:	e147      	b.n	8000b46 <_vfiprintf_r+0x2d2>
 80008b6:	9a03      	ldr	r2, [sp, #12]
 80008b8:	8993      	ldrh	r3, [r2, #12]
 80008ba:	071b      	lsls	r3, r3, #28
 80008bc:	d400      	bmi.n	80008c0 <_vfiprintf_r+0x4c>
 80008be:	e0b9      	b.n	8000a34 <_vfiprintf_r+0x1c0>
 80008c0:	6913      	ldr	r3, [r2, #16]
 80008c2:	9305      	str	r3, [sp, #20]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d100      	bne.n	80008ca <_vfiprintf_r+0x56>
 80008c8:	e0b4      	b.n	8000a34 <_vfiprintf_r+0x1c0>
 80008ca:	2300      	movs	r3, #0
 80008cc:	ad08      	add	r5, sp, #32
 80008ce:	616b      	str	r3, [r5, #20]
 80008d0:	3320      	adds	r3, #32
 80008d2:	766b      	strb	r3, [r5, #25]
 80008d4:	3310      	adds	r3, #16
 80008d6:	76ab      	strb	r3, [r5, #26]
 80008d8:	3b2f      	subs	r3, #47	; 0x2f
 80008da:	4698      	mov	r8, r3
 80008dc:	464b      	mov	r3, r9
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	9407      	str	r4, [sp, #28]
 80008e2:	4f9e      	ldr	r7, [pc, #632]	; (8000b5c <_vfiprintf_r+0x2e8>)
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d100      	bne.n	80008ea <_vfiprintf_r+0x76>
 80008e8:	e089      	b.n	80009fe <_vfiprintf_r+0x18a>
 80008ea:	2b25      	cmp	r3, #37	; 0x25
 80008ec:	d100      	bne.n	80008f0 <_vfiprintf_r+0x7c>
 80008ee:	e125      	b.n	8000b3c <_vfiprintf_r+0x2c8>
 80008f0:	464e      	mov	r6, r9
 80008f2:	e003      	b.n	80008fc <_vfiprintf_r+0x88>
 80008f4:	2b25      	cmp	r3, #37	; 0x25
 80008f6:	d100      	bne.n	80008fa <_vfiprintf_r+0x86>
 80008f8:	e0aa      	b.n	8000a50 <_vfiprintf_r+0x1dc>
 80008fa:	0026      	movs	r6, r4
 80008fc:	7873      	ldrb	r3, [r6, #1]
 80008fe:	1c74      	adds	r4, r6, #1
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1f7      	bne.n	80008f4 <_vfiprintf_r+0x80>
 8000904:	464b      	mov	r3, r9
 8000906:	1ae3      	subs	r3, r4, r3
 8000908:	469a      	mov	sl, r3
 800090a:	d078      	beq.n	80009fe <_vfiprintf_r+0x18a>
 800090c:	4653      	mov	r3, sl
 800090e:	464a      	mov	r2, r9
 8000910:	9903      	ldr	r1, [sp, #12]
 8000912:	9804      	ldr	r0, [sp, #16]
 8000914:	f7ff ff8a 	bl	800082c <__sfputs_r>
 8000918:	1c43      	adds	r3, r0, #1
 800091a:	d070      	beq.n	80009fe <_vfiprintf_r+0x18a>
 800091c:	696b      	ldr	r3, [r5, #20]
 800091e:	4453      	add	r3, sl
 8000920:	616b      	str	r3, [r5, #20]
 8000922:	7873      	ldrb	r3, [r6, #1]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d06a      	beq.n	80009fe <_vfiprintf_r+0x18a>
 8000928:	2201      	movs	r2, #1
 800092a:	2300      	movs	r3, #0
 800092c:	4252      	negs	r2, r2
 800092e:	606a      	str	r2, [r5, #4]
 8000930:	3244      	adds	r2, #68	; 0x44
 8000932:	3401      	adds	r4, #1
 8000934:	602b      	str	r3, [r5, #0]
 8000936:	60eb      	str	r3, [r5, #12]
 8000938:	60ab      	str	r3, [r5, #8]
 800093a:	54ab      	strb	r3, [r5, r2]
 800093c:	65ab      	str	r3, [r5, #88]	; 0x58
 800093e:	e006      	b.n	800094e <_vfiprintf_r+0xda>
 8000940:	4643      	mov	r3, r8
 8000942:	1bc0      	subs	r0, r0, r7
 8000944:	4083      	lsls	r3, r0
 8000946:	0034      	movs	r4, r6
 8000948:	682a      	ldr	r2, [r5, #0]
 800094a:	4313      	orrs	r3, r2
 800094c:	602b      	str	r3, [r5, #0]
 800094e:	7821      	ldrb	r1, [r4, #0]
 8000950:	2205      	movs	r2, #5
 8000952:	0038      	movs	r0, r7
 8000954:	f001 f85e 	bl	8001a14 <memchr>
 8000958:	1c66      	adds	r6, r4, #1
 800095a:	2800      	cmp	r0, #0
 800095c:	d1f0      	bne.n	8000940 <_vfiprintf_r+0xcc>
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	46b2      	mov	sl, r6
 8000962:	06da      	lsls	r2, r3, #27
 8000964:	d502      	bpl.n	800096c <_vfiprintf_r+0xf8>
 8000966:	2243      	movs	r2, #67	; 0x43
 8000968:	2120      	movs	r1, #32
 800096a:	54a9      	strb	r1, [r5, r2]
 800096c:	071a      	lsls	r2, r3, #28
 800096e:	d502      	bpl.n	8000976 <_vfiprintf_r+0x102>
 8000970:	2243      	movs	r2, #67	; 0x43
 8000972:	212b      	movs	r1, #43	; 0x2b
 8000974:	54a9      	strb	r1, [r5, r2]
 8000976:	7821      	ldrb	r1, [r4, #0]
 8000978:	292a      	cmp	r1, #42	; 0x2a
 800097a:	d000      	beq.n	800097e <_vfiprintf_r+0x10a>
 800097c:	e06e      	b.n	8000a5c <_vfiprintf_r+0x1e8>
 800097e:	9a07      	ldr	r2, [sp, #28]
 8000980:	1d11      	adds	r1, r2, #4
 8000982:	6812      	ldr	r2, [r2, #0]
 8000984:	9107      	str	r1, [sp, #28]
 8000986:	2a00      	cmp	r2, #0
 8000988:	da00      	bge.n	800098c <_vfiprintf_r+0x118>
 800098a:	e0ba      	b.n	8000b02 <_vfiprintf_r+0x28e>
 800098c:	60ea      	str	r2, [r5, #12]
 800098e:	7861      	ldrb	r1, [r4, #1]
 8000990:	1ca6      	adds	r6, r4, #2
 8000992:	292e      	cmp	r1, #46	; 0x2e
 8000994:	d100      	bne.n	8000998 <_vfiprintf_r+0x124>
 8000996:	e07a      	b.n	8000a8e <_vfiprintf_r+0x21a>
 8000998:	4b71      	ldr	r3, [pc, #452]	; (8000b60 <_vfiprintf_r+0x2ec>)
 800099a:	2203      	movs	r2, #3
 800099c:	0018      	movs	r0, r3
 800099e:	4699      	mov	r9, r3
 80009a0:	f001 f838 	bl	8001a14 <memchr>
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d100      	bne.n	80009aa <_vfiprintf_r+0x136>
 80009a8:	e08f      	b.n	8000aca <_vfiprintf_r+0x256>
 80009aa:	464b      	mov	r3, r9
 80009ac:	1ac0      	subs	r0, r0, r3
 80009ae:	2340      	movs	r3, #64	; 0x40
 80009b0:	4083      	lsls	r3, r0
 80009b2:	682a      	ldr	r2, [r5, #0]
 80009b4:	7831      	ldrb	r1, [r6, #0]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	602b      	str	r3, [r5, #0]
 80009ba:	2206      	movs	r2, #6
 80009bc:	1c73      	adds	r3, r6, #1
 80009be:	4869      	ldr	r0, [pc, #420]	; (8000b64 <_vfiprintf_r+0x2f0>)
 80009c0:	4699      	mov	r9, r3
 80009c2:	7629      	strb	r1, [r5, #24]
 80009c4:	f001 f826 	bl	8001a14 <memchr>
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d100      	bne.n	80009ce <_vfiprintf_r+0x15a>
 80009cc:	e088      	b.n	8000ae0 <_vfiprintf_r+0x26c>
 80009ce:	4b66      	ldr	r3, [pc, #408]	; (8000b68 <_vfiprintf_r+0x2f4>)
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d100      	bne.n	80009d6 <_vfiprintf_r+0x162>
 80009d4:	e08e      	b.n	8000af4 <_vfiprintf_r+0x280>
 80009d6:	ab07      	add	r3, sp, #28
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	9a03      	ldr	r2, [sp, #12]
 80009dc:	4b63      	ldr	r3, [pc, #396]	; (8000b6c <_vfiprintf_r+0x2f8>)
 80009de:	0029      	movs	r1, r5
 80009e0:	9804      	ldr	r0, [sp, #16]
 80009e2:	e000      	b.n	80009e6 <_vfiprintf_r+0x172>
 80009e4:	bf00      	nop
 80009e6:	4683      	mov	fp, r0
 80009e8:	465b      	mov	r3, fp
 80009ea:	3301      	adds	r3, #1
 80009ec:	d007      	beq.n	80009fe <_vfiprintf_r+0x18a>
 80009ee:	696b      	ldr	r3, [r5, #20]
 80009f0:	445b      	add	r3, fp
 80009f2:	616b      	str	r3, [r5, #20]
 80009f4:	464b      	mov	r3, r9
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d000      	beq.n	80009fe <_vfiprintf_r+0x18a>
 80009fc:	e775      	b.n	80008ea <_vfiprintf_r+0x76>
 80009fe:	9b03      	ldr	r3, [sp, #12]
 8000a00:	899b      	ldrh	r3, [r3, #12]
 8000a02:	065b      	lsls	r3, r3, #25
 8000a04:	d41d      	bmi.n	8000a42 <_vfiprintf_r+0x1ce>
 8000a06:	6968      	ldr	r0, [r5, #20]
 8000a08:	b021      	add	sp, #132	; 0x84
 8000a0a:	bc3c      	pop	{r2, r3, r4, r5}
 8000a0c:	4690      	mov	r8, r2
 8000a0e:	4699      	mov	r9, r3
 8000a10:	46a2      	mov	sl, r4
 8000a12:	46ab      	mov	fp, r5
 8000a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a16:	f000 fd8d 	bl	8001534 <__sinit>
 8000a1a:	4b4d      	ldr	r3, [pc, #308]	; (8000b50 <_vfiprintf_r+0x2dc>)
 8000a1c:	9a03      	ldr	r2, [sp, #12]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d000      	beq.n	8000a24 <_vfiprintf_r+0x1b0>
 8000a22:	e73e      	b.n	80008a2 <_vfiprintf_r+0x2e>
 8000a24:	9b04      	ldr	r3, [sp, #16]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	9303      	str	r3, [sp, #12]
 8000a2a:	9a03      	ldr	r2, [sp, #12]
 8000a2c:	8993      	ldrh	r3, [r2, #12]
 8000a2e:	071b      	lsls	r3, r3, #28
 8000a30:	d500      	bpl.n	8000a34 <_vfiprintf_r+0x1c0>
 8000a32:	e745      	b.n	80008c0 <_vfiprintf_r+0x4c>
 8000a34:	9903      	ldr	r1, [sp, #12]
 8000a36:	9804      	ldr	r0, [sp, #16]
 8000a38:	f000 fb1a 	bl	8001070 <__swsetup_r>
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d100      	bne.n	8000a42 <_vfiprintf_r+0x1ce>
 8000a40:	e743      	b.n	80008ca <_vfiprintf_r+0x56>
 8000a42:	2001      	movs	r0, #1
 8000a44:	4240      	negs	r0, r0
 8000a46:	e7df      	b.n	8000a08 <_vfiprintf_r+0x194>
 8000a48:	9b04      	ldr	r3, [sp, #16]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	9303      	str	r3, [sp, #12]
 8000a4e:	e732      	b.n	80008b6 <_vfiprintf_r+0x42>
 8000a50:	464b      	mov	r3, r9
 8000a52:	1ae3      	subs	r3, r4, r3
 8000a54:	469a      	mov	sl, r3
 8000a56:	d100      	bne.n	8000a5a <_vfiprintf_r+0x1e6>
 8000a58:	e766      	b.n	8000928 <_vfiprintf_r+0xb4>
 8000a5a:	e757      	b.n	800090c <_vfiprintf_r+0x98>
 8000a5c:	000a      	movs	r2, r1
 8000a5e:	3a30      	subs	r2, #48	; 0x30
 8000a60:	46a2      	mov	sl, r4
 8000a62:	2a09      	cmp	r2, #9
 8000a64:	d895      	bhi.n	8000992 <_vfiprintf_r+0x11e>
 8000a66:	68eb      	ldr	r3, [r5, #12]
 8000a68:	0018      	movs	r0, r3
 8000a6a:	e001      	b.n	8000a70 <_vfiprintf_r+0x1fc>
 8000a6c:	0034      	movs	r4, r6
 8000a6e:	3601      	adds	r6, #1
 8000a70:	0083      	lsls	r3, r0, #2
 8000a72:	181b      	adds	r3, r3, r0
 8000a74:	7831      	ldrb	r1, [r6, #0]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	1898      	adds	r0, r3, r2
 8000a7a:	000a      	movs	r2, r1
 8000a7c:	3a30      	subs	r2, #48	; 0x30
 8000a7e:	2a09      	cmp	r2, #9
 8000a80:	d9f4      	bls.n	8000a6c <_vfiprintf_r+0x1f8>
 8000a82:	46b2      	mov	sl, r6
 8000a84:	60e8      	str	r0, [r5, #12]
 8000a86:	1ca6      	adds	r6, r4, #2
 8000a88:	292e      	cmp	r1, #46	; 0x2e
 8000a8a:	d000      	beq.n	8000a8e <_vfiprintf_r+0x21a>
 8000a8c:	e784      	b.n	8000998 <_vfiprintf_r+0x124>
 8000a8e:	4653      	mov	r3, sl
 8000a90:	7859      	ldrb	r1, [r3, #1]
 8000a92:	292a      	cmp	r1, #42	; 0x2a
 8000a94:	d13b      	bne.n	8000b0e <_vfiprintf_r+0x29a>
 8000a96:	9b07      	ldr	r3, [sp, #28]
 8000a98:	1d1a      	adds	r2, r3, #4
 8000a9a:	9207      	str	r2, [sp, #28]
 8000a9c:	4652      	mov	r2, sl
 8000a9e:	7891      	ldrb	r1, [r2, #2]
 8000aa0:	1cd6      	adds	r6, r2, #3
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	4694      	mov	ip, r2
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	44e2      	add	sl, ip
 8000aaa:	606b      	str	r3, [r5, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db00      	blt.n	8000ab2 <_vfiprintf_r+0x23e>
 8000ab0:	e772      	b.n	8000998 <_vfiprintf_r+0x124>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	425b      	negs	r3, r3
 8000ab6:	606b      	str	r3, [r5, #4]
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <_vfiprintf_r+0x2ec>)
 8000aba:	2203      	movs	r2, #3
 8000abc:	0018      	movs	r0, r3
 8000abe:	4699      	mov	r9, r3
 8000ac0:	f000 ffa8 	bl	8001a14 <memchr>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d000      	beq.n	8000aca <_vfiprintf_r+0x256>
 8000ac8:	e76f      	b.n	80009aa <_vfiprintf_r+0x136>
 8000aca:	46b1      	mov	r9, r6
 8000acc:	4656      	mov	r6, sl
 8000ace:	7831      	ldrb	r1, [r6, #0]
 8000ad0:	2206      	movs	r2, #6
 8000ad2:	4824      	ldr	r0, [pc, #144]	; (8000b64 <_vfiprintf_r+0x2f0>)
 8000ad4:	7629      	strb	r1, [r5, #24]
 8000ad6:	f000 ff9d 	bl	8001a14 <memchr>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d000      	beq.n	8000ae0 <_vfiprintf_r+0x26c>
 8000ade:	e776      	b.n	80009ce <_vfiprintf_r+0x15a>
 8000ae0:	ab07      	add	r3, sp, #28
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	9a03      	ldr	r2, [sp, #12]
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <_vfiprintf_r+0x2f8>)
 8000ae8:	0029      	movs	r1, r5
 8000aea:	9804      	ldr	r0, [sp, #16]
 8000aec:	f000 f8e4 	bl	8000cb8 <_printf_i>
 8000af0:	4683      	mov	fp, r0
 8000af2:	e779      	b.n	80009e8 <_vfiprintf_r+0x174>
 8000af4:	2207      	movs	r2, #7
 8000af6:	9b07      	ldr	r3, [sp, #28]
 8000af8:	3307      	adds	r3, #7
 8000afa:	4393      	bics	r3, r2
 8000afc:	3308      	adds	r3, #8
 8000afe:	9307      	str	r3, [sp, #28]
 8000b00:	e775      	b.n	80009ee <_vfiprintf_r+0x17a>
 8000b02:	4252      	negs	r2, r2
 8000b04:	60ea      	str	r2, [r5, #12]
 8000b06:	2202      	movs	r2, #2
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	602b      	str	r3, [r5, #0]
 8000b0c:	e73f      	b.n	800098e <_vfiprintf_r+0x11a>
 8000b0e:	000a      	movs	r2, r1
 8000b10:	2300      	movs	r3, #0
 8000b12:	3a30      	subs	r2, #48	; 0x30
 8000b14:	606b      	str	r3, [r5, #4]
 8000b16:	0018      	movs	r0, r3
 8000b18:	2a09      	cmp	r2, #9
 8000b1a:	d901      	bls.n	8000b20 <_vfiprintf_r+0x2ac>
 8000b1c:	e010      	b.n	8000b40 <_vfiprintf_r+0x2cc>
 8000b1e:	001e      	movs	r6, r3
 8000b20:	0083      	lsls	r3, r0, #2
 8000b22:	181b      	adds	r3, r3, r0
 8000b24:	7871      	ldrb	r1, [r6, #1]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	1898      	adds	r0, r3, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	3a30      	subs	r2, #48	; 0x30
 8000b2e:	1c73      	adds	r3, r6, #1
 8000b30:	2a09      	cmp	r2, #9
 8000b32:	d9f4      	bls.n	8000b1e <_vfiprintf_r+0x2aa>
 8000b34:	469a      	mov	sl, r3
 8000b36:	3602      	adds	r6, #2
 8000b38:	6068      	str	r0, [r5, #4]
 8000b3a:	e72d      	b.n	8000998 <_vfiprintf_r+0x124>
 8000b3c:	464c      	mov	r4, r9
 8000b3e:	e6f3      	b.n	8000928 <_vfiprintf_r+0xb4>
 8000b40:	46b2      	mov	sl, r6
 8000b42:	3601      	adds	r6, #1
 8000b44:	e728      	b.n	8000998 <_vfiprintf_r+0x124>
 8000b46:	9b04      	ldr	r3, [sp, #16]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	9303      	str	r3, [sp, #12]
 8000b4c:	e6b3      	b.n	80008b6 <_vfiprintf_r+0x42>
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	08003184 	.word	0x08003184
 8000b54:	08003164 	.word	0x08003164
 8000b58:	08003144 	.word	0x08003144
 8000b5c:	08003230 	.word	0x08003230
 8000b60:	08003238 	.word	0x08003238
 8000b64:	0800323c 	.word	0x0800323c
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	0800082d 	.word	0x0800082d

08000b70 <vfiprintf>:
 8000b70:	b510      	push	{r4, lr}
 8000b72:	0004      	movs	r4, r0
 8000b74:	0013      	movs	r3, r2
 8000b76:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <vfiprintf+0x14>)
 8000b78:	6810      	ldr	r0, [r2, #0]
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	0021      	movs	r1, r4
 8000b7e:	f7ff fe79 	bl	8000874 <_vfiprintf_r>
 8000b82:	bd10      	pop	{r4, pc}
 8000b84:	20000108 	.word	0x20000108

08000b88 <_printf_common>:
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	464f      	mov	r7, r9
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	46d6      	mov	lr, sl
 8000b90:	b5c0      	push	{r6, r7, lr}
 8000b92:	001f      	movs	r7, r3
 8000b94:	9b08      	ldr	r3, [sp, #32]
 8000b96:	4691      	mov	r9, r2
 8000b98:	4698      	mov	r8, r3
 8000b9a:	688a      	ldr	r2, [r1, #8]
 8000b9c:	690b      	ldr	r3, [r1, #16]
 8000b9e:	0006      	movs	r6, r0
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	da00      	bge.n	8000ba8 <_printf_common+0x20>
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	464a      	mov	r2, r9
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	2243      	movs	r2, #67	; 0x43
 8000bae:	5ca2      	ldrb	r2, [r4, r2]
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	d002      	beq.n	8000bba <_printf_common+0x32>
 8000bb4:	464a      	mov	r2, r9
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	069a      	lsls	r2, r3, #26
 8000bbe:	d55a      	bpl.n	8000c76 <_printf_common+0xee>
 8000bc0:	464b      	mov	r3, r9
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	1c9a      	adds	r2, r3, #2
 8000bc8:	464b      	mov	r3, r9
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	0019      	movs	r1, r3
 8000bd0:	4218      	tst	r0, r3
 8000bd2:	d108      	bne.n	8000be6 <_printf_common+0x5e>
 8000bd4:	68e1      	ldr	r1, [r4, #12]
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	1a8a      	subs	r2, r1, r2
 8000bda:	2119      	movs	r1, #25
 8000bdc:	468a      	mov	sl, r1
 8000bde:	0019      	movs	r1, r3
 8000be0:	44a2      	add	sl, r4
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	dc3f      	bgt.n	8000c66 <_printf_common+0xde>
 8000be6:	2343      	movs	r3, #67	; 0x43
 8000be8:	5ce3      	ldrb	r3, [r4, r3]
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	4193      	sbcs	r3, r2
 8000bee:	068a      	lsls	r2, r1, #26
 8000bf0:	d50a      	bpl.n	8000c08 <_printf_common+0x80>
 8000bf2:	2030      	movs	r0, #48	; 0x30
 8000bf4:	18e1      	adds	r1, r4, r3
 8000bf6:	3143      	adds	r1, #67	; 0x43
 8000bf8:	7008      	strb	r0, [r1, #0]
 8000bfa:	2145      	movs	r1, #69	; 0x45
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	5c61      	ldrb	r1, [r4, r1]
 8000c00:	18a2      	adds	r2, r4, r2
 8000c02:	3243      	adds	r2, #67	; 0x43
 8000c04:	3302      	adds	r3, #2
 8000c06:	7011      	strb	r1, [r2, #0]
 8000c08:	0022      	movs	r2, r4
 8000c0a:	0039      	movs	r1, r7
 8000c0c:	3243      	adds	r2, #67	; 0x43
 8000c0e:	0030      	movs	r0, r6
 8000c10:	47c0      	blx	r8
 8000c12:	1c43      	adds	r3, r0, #1
 8000c14:	d019      	beq.n	8000c4a <_printf_common+0xc2>
 8000c16:	2306      	movs	r3, #6
 8000c18:	6820      	ldr	r0, [r4, #0]
 8000c1a:	68a2      	ldr	r2, [r4, #8]
 8000c1c:	6921      	ldr	r1, [r4, #16]
 8000c1e:	4003      	ands	r3, r0
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d030      	beq.n	8000c86 <_printf_common+0xfe>
 8000c24:	428a      	cmp	r2, r1
 8000c26:	dd3a      	ble.n	8000c9e <_printf_common+0x116>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	1a52      	subs	r2, r2, r1
 8000c2e:	4491      	add	r9, r2
 8000c30:	341a      	adds	r4, #26
 8000c32:	2500      	movs	r5, #0
 8000c34:	e002      	b.n	8000c3c <_printf_common+0xb4>
 8000c36:	3501      	adds	r5, #1
 8000c38:	454d      	cmp	r5, r9
 8000c3a:	da30      	bge.n	8000c9e <_printf_common+0x116>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	0022      	movs	r2, r4
 8000c40:	0039      	movs	r1, r7
 8000c42:	0030      	movs	r0, r6
 8000c44:	47c0      	blx	r8
 8000c46:	1c43      	adds	r3, r0, #1
 8000c48:	d1f5      	bne.n	8000c36 <_printf_common+0xae>
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4240      	negs	r0, r0
 8000c4e:	bc1c      	pop	{r2, r3, r4}
 8000c50:	4690      	mov	r8, r2
 8000c52:	4699      	mov	r9, r3
 8000c54:	46a2      	mov	sl, r4
 8000c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c58:	464b      	mov	r3, r9
 8000c5a:	68e2      	ldr	r2, [r4, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3501      	adds	r5, #1
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	dd20      	ble.n	8000ca8 <_printf_common+0x120>
 8000c66:	2301      	movs	r3, #1
 8000c68:	4652      	mov	r2, sl
 8000c6a:	0039      	movs	r1, r7
 8000c6c:	0030      	movs	r0, r6
 8000c6e:	47c0      	blx	r8
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	d1f1      	bne.n	8000c58 <_printf_common+0xd0>
 8000c74:	e7e9      	b.n	8000c4a <_printf_common+0xc2>
 8000c76:	2206      	movs	r2, #6
 8000c78:	421a      	tst	r2, r3
 8000c7a:	d012      	beq.n	8000ca2 <_printf_common+0x11a>
 8000c7c:	2343      	movs	r3, #67	; 0x43
 8000c7e:	5ce3      	ldrb	r3, [r4, r3]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	4193      	sbcs	r3, r2
 8000c84:	e7c0      	b.n	8000c08 <_printf_common+0x80>
 8000c86:	464b      	mov	r3, r9
 8000c88:	68e0      	ldr	r0, [r4, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	1ac3      	subs	r3, r0, r3
 8000c8e:	43d8      	mvns	r0, r3
 8000c90:	17c0      	asrs	r0, r0, #31
 8000c92:	4018      	ands	r0, r3
 8000c94:	4681      	mov	r9, r0
 8000c96:	428a      	cmp	r2, r1
 8000c98:	dcc8      	bgt.n	8000c2c <_printf_common+0xa4>
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dcc8      	bgt.n	8000c30 <_printf_common+0xa8>
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	e7d5      	b.n	8000c4e <_printf_common+0xc6>
 8000ca2:	464a      	mov	r2, r9
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	e795      	b.n	8000bd4 <_printf_common+0x4c>
 8000ca8:	2343      	movs	r3, #67	; 0x43
 8000caa:	6821      	ldr	r1, [r4, #0]
 8000cac:	5ce3      	ldrb	r3, [r4, r3]
 8000cae:	1e5a      	subs	r2, r3, #1
 8000cb0:	4193      	sbcs	r3, r2
 8000cb2:	068a      	lsls	r2, r1, #26
 8000cb4:	d49d      	bmi.n	8000bf2 <_printf_common+0x6a>
 8000cb6:	e7a7      	b.n	8000c08 <_printf_common+0x80>

08000cb8 <_printf_i>:
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cba:	4657      	mov	r7, sl
 8000cbc:	469a      	mov	sl, r3
 8000cbe:	2343      	movs	r3, #67	; 0x43
 8000cc0:	469c      	mov	ip, r3
 8000cc2:	464e      	mov	r6, r9
 8000cc4:	4645      	mov	r5, r8
 8000cc6:	46de      	mov	lr, fp
 8000cc8:	448c      	add	ip, r1
 8000cca:	4663      	mov	r3, ip
 8000ccc:	b5e0      	push	{r5, r6, r7, lr}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	9303      	str	r3, [sp, #12]
 8000cd2:	7e0b      	ldrb	r3, [r1, #24]
 8000cd4:	4691      	mov	r9, r2
 8000cd6:	4680      	mov	r8, r0
 8000cd8:	000c      	movs	r4, r1
 8000cda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000cdc:	2b6e      	cmp	r3, #110	; 0x6e
 8000cde:	d100      	bne.n	8000ce2 <_printf_i+0x2a>
 8000ce0:	e0d8      	b.n	8000e94 <_printf_i+0x1dc>
 8000ce2:	d800      	bhi.n	8000ce6 <_printf_i+0x2e>
 8000ce4:	e071      	b.n	8000dca <_printf_i+0x112>
 8000ce6:	2b73      	cmp	r3, #115	; 0x73
 8000ce8:	d100      	bne.n	8000cec <_printf_i+0x34>
 8000cea:	e11a      	b.n	8000f22 <_printf_i+0x26a>
 8000cec:	d800      	bhi.n	8000cf0 <_printf_i+0x38>
 8000cee:	e081      	b.n	8000df4 <_printf_i+0x13c>
 8000cf0:	2b75      	cmp	r3, #117	; 0x75
 8000cf2:	d100      	bne.n	8000cf6 <_printf_i+0x3e>
 8000cf4:	e0ff      	b.n	8000ef6 <_printf_i+0x23e>
 8000cf6:	2b78      	cmp	r3, #120	; 0x78
 8000cf8:	d000      	beq.n	8000cfc <_printf_i+0x44>
 8000cfa:	e10b      	b.n	8000f14 <_printf_i+0x25c>
 8000cfc:	680b      	ldr	r3, [r1, #0]
 8000cfe:	2078      	movs	r0, #120	; 0x78
 8000d00:	2145      	movs	r1, #69	; 0x45
 8000d02:	5460      	strb	r0, [r4, r1]
 8000d04:	4994      	ldr	r1, [pc, #592]	; (8000f58 <_printf_i+0x2a0>)
 8000d06:	468b      	mov	fp, r1
 8000d08:	6811      	ldr	r1, [r2, #0]
 8000d0a:	c940      	ldmia	r1!, {r6}
 8000d0c:	6011      	str	r1, [r2, #0]
 8000d0e:	0618      	lsls	r0, r3, #24
 8000d10:	d403      	bmi.n	8000d1a <_printf_i+0x62>
 8000d12:	0658      	lsls	r0, r3, #25
 8000d14:	d501      	bpl.n	8000d1a <_printf_i+0x62>
 8000d16:	0436      	lsls	r6, r6, #16
 8000d18:	0c36      	lsrs	r6, r6, #16
 8000d1a:	07da      	lsls	r2, r3, #31
 8000d1c:	d502      	bpl.n	8000d24 <_printf_i+0x6c>
 8000d1e:	2220      	movs	r2, #32
 8000d20:	4313      	orrs	r3, r2
 8000d22:	6023      	str	r3, [r4, #0]
 8000d24:	2710      	movs	r7, #16
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d100      	bne.n	8000d2c <_printf_i+0x74>
 8000d2a:	e0c2      	b.n	8000eb2 <_printf_i+0x1fa>
 8000d2c:	2343      	movs	r3, #67	; 0x43
 8000d2e:	2200      	movs	r2, #0
 8000d30:	54e2      	strb	r2, [r4, r3]
 8000d32:	6863      	ldr	r3, [r4, #4]
 8000d34:	60a3      	str	r3, [r4, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da00      	bge.n	8000d3c <_printf_i+0x84>
 8000d3a:	e0c5      	b.n	8000ec8 <_printf_i+0x210>
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	6821      	ldr	r1, [r4, #0]
 8000d40:	4391      	bics	r1, r2
 8000d42:	6021      	str	r1, [r4, #0]
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	d000      	beq.n	8000d4a <_printf_i+0x92>
 8000d48:	e083      	b.n	8000e52 <_printf_i+0x19a>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d000      	beq.n	8000d50 <_printf_i+0x98>
 8000d4e:	e0bd      	b.n	8000ecc <_printf_i+0x214>
 8000d50:	9d03      	ldr	r5, [sp, #12]
 8000d52:	2f08      	cmp	r7, #8
 8000d54:	d100      	bne.n	8000d58 <_printf_i+0xa0>
 8000d56:	e08c      	b.n	8000e72 <_printf_i+0x1ba>
 8000d58:	9b03      	ldr	r3, [sp, #12]
 8000d5a:	1b5b      	subs	r3, r3, r5
 8000d5c:	6123      	str	r3, [r4, #16]
 8000d5e:	4653      	mov	r3, sl
 8000d60:	aa05      	add	r2, sp, #20
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	0021      	movs	r1, r4
 8000d66:	464b      	mov	r3, r9
 8000d68:	4640      	mov	r0, r8
 8000d6a:	f7ff ff0d 	bl	8000b88 <_printf_common>
 8000d6e:	1c43      	adds	r3, r0, #1
 8000d70:	d022      	beq.n	8000db8 <_printf_i+0x100>
 8000d72:	6923      	ldr	r3, [r4, #16]
 8000d74:	002a      	movs	r2, r5
 8000d76:	4649      	mov	r1, r9
 8000d78:	4640      	mov	r0, r8
 8000d7a:	47d0      	blx	sl
 8000d7c:	1c43      	adds	r3, r0, #1
 8000d7e:	d01b      	beq.n	8000db8 <_printf_i+0x100>
 8000d80:	6822      	ldr	r2, [r4, #0]
 8000d82:	9805      	ldr	r0, [sp, #20]
 8000d84:	68e3      	ldr	r3, [r4, #12]
 8000d86:	0792      	lsls	r2, r2, #30
 8000d88:	d400      	bmi.n	8000d8c <_printf_i+0xd4>
 8000d8a:	e07f      	b.n	8000e8c <_printf_i+0x1d4>
 8000d8c:	1a1a      	subs	r2, r3, r0
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	dc00      	bgt.n	8000d94 <_printf_i+0xdc>
 8000d92:	e07b      	b.n	8000e8c <_printf_i+0x1d4>
 8000d94:	0026      	movs	r6, r4
 8000d96:	2500      	movs	r5, #0
 8000d98:	3619      	adds	r6, #25
 8000d9a:	e006      	b.n	8000daa <_printf_i+0xf2>
 8000d9c:	68e3      	ldr	r3, [r4, #12]
 8000d9e:	9805      	ldr	r0, [sp, #20]
 8000da0:	3501      	adds	r5, #1
 8000da2:	1a1a      	subs	r2, r3, r0
 8000da4:	42aa      	cmp	r2, r5
 8000da6:	dc00      	bgt.n	8000daa <_printf_i+0xf2>
 8000da8:	e070      	b.n	8000e8c <_printf_i+0x1d4>
 8000daa:	2301      	movs	r3, #1
 8000dac:	0032      	movs	r2, r6
 8000dae:	4649      	mov	r1, r9
 8000db0:	4640      	mov	r0, r8
 8000db2:	47d0      	blx	sl
 8000db4:	1c43      	adds	r3, r0, #1
 8000db6:	d1f1      	bne.n	8000d9c <_printf_i+0xe4>
 8000db8:	2001      	movs	r0, #1
 8000dba:	4240      	negs	r0, r0
 8000dbc:	b007      	add	sp, #28
 8000dbe:	bc3c      	pop	{r2, r3, r4, r5}
 8000dc0:	4690      	mov	r8, r2
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	46a2      	mov	sl, r4
 8000dc6:	46ab      	mov	fp, r5
 8000dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dca:	2b63      	cmp	r3, #99	; 0x63
 8000dcc:	d100      	bne.n	8000dd0 <_printf_i+0x118>
 8000dce:	e084      	b.n	8000eda <_printf_i+0x222>
 8000dd0:	d81f      	bhi.n	8000e12 <_printf_i+0x15a>
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d069      	beq.n	8000eaa <_printf_i+0x1f2>
 8000dd6:	2b58      	cmp	r3, #88	; 0x58
 8000dd8:	d000      	beq.n	8000ddc <_printf_i+0x124>
 8000dda:	e09b      	b.n	8000f14 <_printf_i+0x25c>
 8000ddc:	2145      	movs	r1, #69	; 0x45
 8000dde:	5463      	strb	r3, [r4, r1]
 8000de0:	495e      	ldr	r1, [pc, #376]	; (8000f5c <_printf_i+0x2a4>)
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	468b      	mov	fp, r1
 8000de6:	6811      	ldr	r1, [r2, #0]
 8000de8:	c940      	ldmia	r1!, {r6}
 8000dea:	6011      	str	r1, [r2, #0]
 8000dec:	0618      	lsls	r0, r3, #24
 8000dee:	d400      	bmi.n	8000df2 <_printf_i+0x13a>
 8000df0:	e78f      	b.n	8000d12 <_printf_i+0x5a>
 8000df2:	e792      	b.n	8000d1a <_printf_i+0x62>
 8000df4:	2b6f      	cmp	r3, #111	; 0x6f
 8000df6:	d07e      	beq.n	8000ef6 <_printf_i+0x23e>
 8000df8:	2b70      	cmp	r3, #112	; 0x70
 8000dfa:	d000      	beq.n	8000dfe <_printf_i+0x146>
 8000dfc:	e08a      	b.n	8000f14 <_printf_i+0x25c>
 8000dfe:	2320      	movs	r3, #32
 8000e00:	6809      	ldr	r1, [r1, #0]
 8000e02:	2078      	movs	r0, #120	; 0x78
 8000e04:	430b      	orrs	r3, r1
 8000e06:	2145      	movs	r1, #69	; 0x45
 8000e08:	6023      	str	r3, [r4, #0]
 8000e0a:	5460      	strb	r0, [r4, r1]
 8000e0c:	4952      	ldr	r1, [pc, #328]	; (8000f58 <_printf_i+0x2a0>)
 8000e0e:	468b      	mov	fp, r1
 8000e10:	e77a      	b.n	8000d08 <_printf_i+0x50>
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d001      	beq.n	8000e1a <_printf_i+0x162>
 8000e16:	2b69      	cmp	r3, #105	; 0x69
 8000e18:	d17c      	bne.n	8000f14 <_printf_i+0x25c>
 8000e1a:	6811      	ldr	r1, [r2, #0]
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	1d08      	adds	r0, r1, #4
 8000e20:	6010      	str	r0, [r2, #0]
 8000e22:	061d      	lsls	r5, r3, #24
 8000e24:	d54a      	bpl.n	8000ebc <_printf_i+0x204>
 8000e26:	680a      	ldr	r2, [r1, #0]
 8000e28:	0016      	movs	r6, r2
 8000e2a:	2a00      	cmp	r2, #0
 8000e2c:	db03      	blt.n	8000e36 <_printf_i+0x17e>
 8000e2e:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <_printf_i+0x2a4>)
 8000e30:	270a      	movs	r7, #10
 8000e32:	469b      	mov	fp, r3
 8000e34:	e77d      	b.n	8000d32 <_printf_i+0x7a>
 8000e36:	2243      	movs	r2, #67	; 0x43
 8000e38:	212d      	movs	r1, #45	; 0x2d
 8000e3a:	54a1      	strb	r1, [r4, r2]
 8000e3c:	6862      	ldr	r2, [r4, #4]
 8000e3e:	4276      	negs	r6, r6
 8000e40:	60a2      	str	r2, [r4, #8]
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	db02      	blt.n	8000e4c <_printf_i+0x194>
 8000e46:	2204      	movs	r2, #4
 8000e48:	4393      	bics	r3, r2
 8000e4a:	6023      	str	r3, [r4, #0]
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <_printf_i+0x2a4>)
 8000e4e:	270a      	movs	r7, #10
 8000e50:	469b      	mov	fp, r3
 8000e52:	9d03      	ldr	r5, [sp, #12]
 8000e54:	e000      	b.n	8000e58 <_printf_i+0x1a0>
 8000e56:	0006      	movs	r6, r0
 8000e58:	0039      	movs	r1, r7
 8000e5a:	0030      	movs	r0, r6
 8000e5c:	f7ff fa70 	bl	8000340 <__aeabi_uidivmod>
 8000e60:	465b      	mov	r3, fp
 8000e62:	5c5b      	ldrb	r3, [r3, r1]
 8000e64:	3d01      	subs	r5, #1
 8000e66:	702b      	strb	r3, [r5, #0]
 8000e68:	42be      	cmp	r6, r7
 8000e6a:	d2f4      	bcs.n	8000e56 <_printf_i+0x19e>
 8000e6c:	2f08      	cmp	r7, #8
 8000e6e:	d000      	beq.n	8000e72 <_printf_i+0x1ba>
 8000e70:	e772      	b.n	8000d58 <_printf_i+0xa0>
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	07db      	lsls	r3, r3, #31
 8000e76:	d400      	bmi.n	8000e7a <_printf_i+0x1c2>
 8000e78:	e76e      	b.n	8000d58 <_printf_i+0xa0>
 8000e7a:	6863      	ldr	r3, [r4, #4]
 8000e7c:	6922      	ldr	r2, [r4, #16]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	dd00      	ble.n	8000e84 <_printf_i+0x1cc>
 8000e82:	e769      	b.n	8000d58 <_printf_i+0xa0>
 8000e84:	2330      	movs	r3, #48	; 0x30
 8000e86:	3d01      	subs	r5, #1
 8000e88:	702b      	strb	r3, [r5, #0]
 8000e8a:	e765      	b.n	8000d58 <_printf_i+0xa0>
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	da95      	bge.n	8000dbc <_printf_i+0x104>
 8000e90:	0018      	movs	r0, r3
 8000e92:	e793      	b.n	8000dbc <_printf_i+0x104>
 8000e94:	6813      	ldr	r3, [r2, #0]
 8000e96:	6809      	ldr	r1, [r1, #0]
 8000e98:	1d1d      	adds	r5, r3, #4
 8000e9a:	6960      	ldr	r0, [r4, #20]
 8000e9c:	6015      	str	r5, [r2, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	060e      	lsls	r6, r1, #24
 8000ea2:	d401      	bmi.n	8000ea8 <_printf_i+0x1f0>
 8000ea4:	0649      	lsls	r1, r1, #25
 8000ea6:	d44b      	bmi.n	8000f40 <_printf_i+0x288>
 8000ea8:	6018      	str	r0, [r3, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9d03      	ldr	r5, [sp, #12]
 8000eae:	6123      	str	r3, [r4, #16]
 8000eb0:	e755      	b.n	8000d5e <_printf_i+0xa6>
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	6822      	ldr	r2, [r4, #0]
 8000eb6:	439a      	bics	r2, r3
 8000eb8:	6022      	str	r2, [r4, #0]
 8000eba:	e737      	b.n	8000d2c <_printf_i+0x74>
 8000ebc:	065d      	lsls	r5, r3, #25
 8000ebe:	d5b2      	bpl.n	8000e26 <_printf_i+0x16e>
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	5e8e      	ldrsh	r6, [r1, r2]
 8000ec4:	0032      	movs	r2, r6
 8000ec6:	e7b0      	b.n	8000e2a <_printf_i+0x172>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d1c2      	bne.n	8000e52 <_printf_i+0x19a>
 8000ecc:	465b      	mov	r3, fp
 8000ece:	0025      	movs	r5, r4
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	2342      	movs	r3, #66	; 0x42
 8000ed4:	3542      	adds	r5, #66	; 0x42
 8000ed6:	54e2      	strb	r2, [r4, r3]
 8000ed8:	e73b      	b.n	8000d52 <_printf_i+0x9a>
 8000eda:	6813      	ldr	r3, [r2, #0]
 8000edc:	0025      	movs	r5, r4
 8000ede:	1d19      	adds	r1, r3, #4
 8000ee0:	6011      	str	r1, [r2, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2342      	movs	r3, #66	; 0x42
 8000ee6:	54e2      	strb	r2, [r4, r3]
 8000ee8:	3b41      	subs	r3, #65	; 0x41
 8000eea:	3542      	adds	r5, #66	; 0x42
 8000eec:	6123      	str	r3, [r4, #16]
 8000eee:	2343      	movs	r3, #67	; 0x43
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	54e2      	strb	r2, [r4, r3]
 8000ef4:	e733      	b.n	8000d5e <_printf_i+0xa6>
 8000ef6:	6811      	ldr	r1, [r2, #0]
 8000ef8:	6820      	ldr	r0, [r4, #0]
 8000efa:	1d0d      	adds	r5, r1, #4
 8000efc:	6015      	str	r5, [r2, #0]
 8000efe:	0606      	lsls	r6, r0, #24
 8000f00:	d401      	bmi.n	8000f06 <_printf_i+0x24e>
 8000f02:	0640      	lsls	r0, r0, #25
 8000f04:	d41e      	bmi.n	8000f44 <_printf_i+0x28c>
 8000f06:	680e      	ldr	r6, [r1, #0]
 8000f08:	2b6f      	cmp	r3, #111	; 0x6f
 8000f0a:	d01d      	beq.n	8000f48 <_printf_i+0x290>
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_printf_i+0x2a4>)
 8000f0e:	270a      	movs	r7, #10
 8000f10:	469b      	mov	fp, r3
 8000f12:	e70b      	b.n	8000d2c <_printf_i+0x74>
 8000f14:	2242      	movs	r2, #66	; 0x42
 8000f16:	0025      	movs	r5, r4
 8000f18:	54a3      	strb	r3, [r4, r2]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	3542      	adds	r5, #66	; 0x42
 8000f1e:	6123      	str	r3, [r4, #16]
 8000f20:	e7e5      	b.n	8000eee <_printf_i+0x236>
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	1d19      	adds	r1, r3, #4
 8000f26:	6011      	str	r1, [r2, #0]
 8000f28:	681d      	ldr	r5, [r3, #0]
 8000f2a:	6862      	ldr	r2, [r4, #4]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	0028      	movs	r0, r5
 8000f30:	f000 fd70 	bl	8001a14 <memchr>
 8000f34:	2800      	cmp	r0, #0
 8000f36:	d00b      	beq.n	8000f50 <_printf_i+0x298>
 8000f38:	1b40      	subs	r0, r0, r5
 8000f3a:	6060      	str	r0, [r4, #4]
 8000f3c:	6120      	str	r0, [r4, #16]
 8000f3e:	e7d6      	b.n	8000eee <_printf_i+0x236>
 8000f40:	8018      	strh	r0, [r3, #0]
 8000f42:	e7b2      	b.n	8000eaa <_printf_i+0x1f2>
 8000f44:	880e      	ldrh	r6, [r1, #0]
 8000f46:	e7df      	b.n	8000f08 <_printf_i+0x250>
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <_printf_i+0x2a4>)
 8000f4a:	2708      	movs	r7, #8
 8000f4c:	469b      	mov	fp, r3
 8000f4e:	e6ed      	b.n	8000d2c <_printf_i+0x74>
 8000f50:	6860      	ldr	r0, [r4, #4]
 8000f52:	6120      	str	r0, [r4, #16]
 8000f54:	e7cb      	b.n	8000eee <_printf_i+0x236>
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	08003258 	.word	0x08003258
 8000f5c:	08003244 	.word	0x08003244

08000f60 <_sbrk_r>:
 8000f60:	2300      	movs	r3, #0
 8000f62:	b570      	push	{r4, r5, r6, lr}
 8000f64:	4c06      	ldr	r4, [pc, #24]	; (8000f80 <_sbrk_r+0x20>)
 8000f66:	0005      	movs	r5, r0
 8000f68:	0008      	movs	r0, r1
 8000f6a:	6023      	str	r3, [r4, #0]
 8000f6c:	f001 f900 	bl	8002170 <_sbrk>
 8000f70:	1c43      	adds	r3, r0, #1
 8000f72:	d000      	beq.n	8000f76 <_sbrk_r+0x16>
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0fb      	beq.n	8000f74 <_sbrk_r+0x14>
 8000f7c:	602b      	str	r3, [r5, #0]
 8000f7e:	e7f9      	b.n	8000f74 <_sbrk_r+0x14>
 8000f80:	2000030c 	.word	0x2000030c

08000f84 <__swbuf_r>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	0005      	movs	r5, r0
 8000f88:	000e      	movs	r6, r1
 8000f8a:	0014      	movs	r4, r2
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d002      	beq.n	8000f96 <__swbuf_r+0x12>
 8000f90:	6983      	ldr	r3, [r0, #24]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d029      	beq.n	8000fea <__swbuf_r+0x66>
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <__swbuf_r+0xc8>)
 8000f98:	429c      	cmp	r4, r3
 8000f9a:	d02b      	beq.n	8000ff4 <__swbuf_r+0x70>
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <__swbuf_r+0xcc>)
 8000f9e:	429c      	cmp	r4, r3
 8000fa0:	d046      	beq.n	8001030 <__swbuf_r+0xac>
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <__swbuf_r+0xd0>)
 8000fa4:	429c      	cmp	r4, r3
 8000fa6:	d04e      	beq.n	8001046 <__swbuf_r+0xc2>
 8000fa8:	69a3      	ldr	r3, [r4, #24]
 8000faa:	60a3      	str	r3, [r4, #8]
 8000fac:	89a3      	ldrh	r3, [r4, #12]
 8000fae:	071b      	lsls	r3, r3, #28
 8000fb0:	d526      	bpl.n	8001000 <__swbuf_r+0x7c>
 8000fb2:	6923      	ldr	r3, [r4, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <__swbuf_r+0x7c>
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	b2f7      	uxtb	r7, r6
 8000fbc:	6961      	ldr	r1, [r4, #20]
 8000fbe:	4016      	ands	r6, r2
 8000fc0:	6822      	ldr	r2, [r4, #0]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	4299      	cmp	r1, r3
 8000fc6:	dd2a      	ble.n	800101e <__swbuf_r+0x9a>
 8000fc8:	3301      	adds	r3, #1
 8000fca:	68a1      	ldr	r1, [r4, #8]
 8000fcc:	3901      	subs	r1, #1
 8000fce:	60a1      	str	r1, [r4, #8]
 8000fd0:	1c51      	adds	r1, r2, #1
 8000fd2:	6021      	str	r1, [r4, #0]
 8000fd4:	7017      	strb	r7, [r2, #0]
 8000fd6:	6962      	ldr	r2, [r4, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d02b      	beq.n	8001034 <__swbuf_r+0xb0>
 8000fdc:	89a3      	ldrh	r3, [r4, #12]
 8000fde:	07db      	lsls	r3, r3, #31
 8000fe0:	d501      	bpl.n	8000fe6 <__swbuf_r+0x62>
 8000fe2:	2e0a      	cmp	r6, #10
 8000fe4:	d026      	beq.n	8001034 <__swbuf_r+0xb0>
 8000fe6:	0030      	movs	r0, r6
 8000fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fea:	f000 faa3 	bl	8001534 <__sinit>
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <__swbuf_r+0xc8>)
 8000ff0:	429c      	cmp	r4, r3
 8000ff2:	d1d3      	bne.n	8000f9c <__swbuf_r+0x18>
 8000ff4:	686c      	ldr	r4, [r5, #4]
 8000ff6:	69a3      	ldr	r3, [r4, #24]
 8000ff8:	60a3      	str	r3, [r4, #8]
 8000ffa:	89a3      	ldrh	r3, [r4, #12]
 8000ffc:	071b      	lsls	r3, r3, #28
 8000ffe:	d4d8      	bmi.n	8000fb2 <__swbuf_r+0x2e>
 8001000:	0021      	movs	r1, r4
 8001002:	0028      	movs	r0, r5
 8001004:	f000 f834 	bl	8001070 <__swsetup_r>
 8001008:	2800      	cmp	r0, #0
 800100a:	d119      	bne.n	8001040 <__swbuf_r+0xbc>
 800100c:	22ff      	movs	r2, #255	; 0xff
 800100e:	6923      	ldr	r3, [r4, #16]
 8001010:	b2f7      	uxtb	r7, r6
 8001012:	6961      	ldr	r1, [r4, #20]
 8001014:	4016      	ands	r6, r2
 8001016:	6822      	ldr	r2, [r4, #0]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	4299      	cmp	r1, r3
 800101c:	dcd4      	bgt.n	8000fc8 <__swbuf_r+0x44>
 800101e:	0021      	movs	r1, r4
 8001020:	0028      	movs	r0, r5
 8001022:	f000 f94d 	bl	80012c0 <_fflush_r>
 8001026:	2800      	cmp	r0, #0
 8001028:	d10a      	bne.n	8001040 <__swbuf_r+0xbc>
 800102a:	6822      	ldr	r2, [r4, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	e7cc      	b.n	8000fca <__swbuf_r+0x46>
 8001030:	68ac      	ldr	r4, [r5, #8]
 8001032:	e7b9      	b.n	8000fa8 <__swbuf_r+0x24>
 8001034:	0021      	movs	r1, r4
 8001036:	0028      	movs	r0, r5
 8001038:	f000 f942 	bl	80012c0 <_fflush_r>
 800103c:	2800      	cmp	r0, #0
 800103e:	d0d2      	beq.n	8000fe6 <__swbuf_r+0x62>
 8001040:	2601      	movs	r6, #1
 8001042:	4276      	negs	r6, r6
 8001044:	e7cf      	b.n	8000fe6 <__swbuf_r+0x62>
 8001046:	68ec      	ldr	r4, [r5, #12]
 8001048:	e7ae      	b.n	8000fa8 <__swbuf_r+0x24>
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	08003184 	.word	0x08003184
 8001050:	08003164 	.word	0x08003164
 8001054:	08003144 	.word	0x08003144

08001058 <__swbuf>:
 8001058:	b510      	push	{r4, lr}
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <__swbuf+0x14>)
 800105c:	000a      	movs	r2, r1
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0001      	movs	r1, r0
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff ff8e 	bl	8000f84 <__swbuf_r>
 8001068:	bd10      	pop	{r4, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	20000108 	.word	0x20000108

08001070 <__swsetup_r>:
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <__swsetup_r+0xfc>)
 8001072:	b570      	push	{r4, r5, r6, lr}
 8001074:	681d      	ldr	r5, [r3, #0]
 8001076:	0006      	movs	r6, r0
 8001078:	000c      	movs	r4, r1
 800107a:	2d00      	cmp	r5, #0
 800107c:	d002      	beq.n	8001084 <__swsetup_r+0x14>
 800107e:	69ab      	ldr	r3, [r5, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d01b      	beq.n	80010bc <__swsetup_r+0x4c>
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <__swsetup_r+0x100>)
 8001086:	429c      	cmp	r4, r3
 8001088:	d01e      	beq.n	80010c8 <__swsetup_r+0x58>
 800108a:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <__swsetup_r+0x104>)
 800108c:	429c      	cmp	r4, r3
 800108e:	d04c      	beq.n	800112a <__swsetup_r+0xba>
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <__swsetup_r+0x108>)
 8001092:	429c      	cmp	r4, r3
 8001094:	d060      	beq.n	8001158 <__swsetup_r+0xe8>
 8001096:	230c      	movs	r3, #12
 8001098:	5ee2      	ldrsh	r2, [r4, r3]
 800109a:	b293      	uxth	r3, r2
 800109c:	0719      	lsls	r1, r3, #28
 800109e:	d519      	bpl.n	80010d4 <__swsetup_r+0x64>
 80010a0:	6921      	ldr	r1, [r4, #16]
 80010a2:	2900      	cmp	r1, #0
 80010a4:	d021      	beq.n	80010ea <__swsetup_r+0x7a>
 80010a6:	07da      	lsls	r2, r3, #31
 80010a8:	d52e      	bpl.n	8001108 <__swsetup_r+0x98>
 80010aa:	2300      	movs	r3, #0
 80010ac:	60a3      	str	r3, [r4, #8]
 80010ae:	6963      	ldr	r3, [r4, #20]
 80010b0:	2000      	movs	r0, #0
 80010b2:	425b      	negs	r3, r3
 80010b4:	61a3      	str	r3, [r4, #24]
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d02e      	beq.n	8001118 <__swsetup_r+0xa8>
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
 80010bc:	0028      	movs	r0, r5
 80010be:	f000 fa39 	bl	8001534 <__sinit>
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <__swsetup_r+0x100>)
 80010c4:	429c      	cmp	r4, r3
 80010c6:	d1e0      	bne.n	800108a <__swsetup_r+0x1a>
 80010c8:	686c      	ldr	r4, [r5, #4]
 80010ca:	230c      	movs	r3, #12
 80010cc:	5ee2      	ldrsh	r2, [r4, r3]
 80010ce:	b293      	uxth	r3, r2
 80010d0:	0719      	lsls	r1, r3, #28
 80010d2:	d4e5      	bmi.n	80010a0 <__swsetup_r+0x30>
 80010d4:	06d9      	lsls	r1, r3, #27
 80010d6:	d541      	bpl.n	800115c <__swsetup_r+0xec>
 80010d8:	075b      	lsls	r3, r3, #29
 80010da:	d428      	bmi.n	800112e <__swsetup_r+0xbe>
 80010dc:	6921      	ldr	r1, [r4, #16]
 80010de:	2308      	movs	r3, #8
 80010e0:	4313      	orrs	r3, r2
 80010e2:	81a3      	strh	r3, [r4, #12]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	2900      	cmp	r1, #0
 80010e8:	d1dd      	bne.n	80010a6 <__swsetup_r+0x36>
 80010ea:	22a0      	movs	r2, #160	; 0xa0
 80010ec:	2080      	movs	r0, #128	; 0x80
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	0080      	lsls	r0, r0, #2
 80010f2:	401a      	ands	r2, r3
 80010f4:	4282      	cmp	r2, r0
 80010f6:	d0d6      	beq.n	80010a6 <__swsetup_r+0x36>
 80010f8:	0021      	movs	r1, r4
 80010fa:	0030      	movs	r0, r6
 80010fc:	f000 fc42 	bl	8001984 <__smakebuf_r>
 8001100:	89a3      	ldrh	r3, [r4, #12]
 8001102:	6921      	ldr	r1, [r4, #16]
 8001104:	07da      	lsls	r2, r3, #31
 8001106:	d4d0      	bmi.n	80010aa <__swsetup_r+0x3a>
 8001108:	2200      	movs	r2, #0
 800110a:	079b      	lsls	r3, r3, #30
 800110c:	d400      	bmi.n	8001110 <__swsetup_r+0xa0>
 800110e:	6962      	ldr	r2, [r4, #20]
 8001110:	60a2      	str	r2, [r4, #8]
 8001112:	2000      	movs	r0, #0
 8001114:	2900      	cmp	r1, #0
 8001116:	d1d0      	bne.n	80010ba <__swsetup_r+0x4a>
 8001118:	220c      	movs	r2, #12
 800111a:	5ea3      	ldrsh	r3, [r4, r2]
 800111c:	061a      	lsls	r2, r3, #24
 800111e:	d5cc      	bpl.n	80010ba <__swsetup_r+0x4a>
 8001120:	2240      	movs	r2, #64	; 0x40
 8001122:	4313      	orrs	r3, r2
 8001124:	81a3      	strh	r3, [r4, #12]
 8001126:	3801      	subs	r0, #1
 8001128:	e7c7      	b.n	80010ba <__swsetup_r+0x4a>
 800112a:	68ac      	ldr	r4, [r5, #8]
 800112c:	e7b3      	b.n	8001096 <__swsetup_r+0x26>
 800112e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001130:	2900      	cmp	r1, #0
 8001132:	d00a      	beq.n	800114a <__swsetup_r+0xda>
 8001134:	0023      	movs	r3, r4
 8001136:	3344      	adds	r3, #68	; 0x44
 8001138:	4299      	cmp	r1, r3
 800113a:	d004      	beq.n	8001146 <__swsetup_r+0xd6>
 800113c:	0030      	movs	r0, r6
 800113e:	f7ff faa5 	bl	800068c <_free_r>
 8001142:	230c      	movs	r3, #12
 8001144:	5ee2      	ldrsh	r2, [r4, r3]
 8001146:	2300      	movs	r3, #0
 8001148:	6363      	str	r3, [r4, #52]	; 0x34
 800114a:	2324      	movs	r3, #36	; 0x24
 800114c:	439a      	bics	r2, r3
 800114e:	2300      	movs	r3, #0
 8001150:	6921      	ldr	r1, [r4, #16]
 8001152:	6063      	str	r3, [r4, #4]
 8001154:	6021      	str	r1, [r4, #0]
 8001156:	e7c2      	b.n	80010de <__swsetup_r+0x6e>
 8001158:	68ec      	ldr	r4, [r5, #12]
 800115a:	e79c      	b.n	8001096 <__swsetup_r+0x26>
 800115c:	2309      	movs	r3, #9
 800115e:	6033      	str	r3, [r6, #0]
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	2001      	movs	r0, #1
 8001164:	431a      	orrs	r2, r3
 8001166:	81a2      	strh	r2, [r4, #12]
 8001168:	4240      	negs	r0, r0
 800116a:	e7a6      	b.n	80010ba <__swsetup_r+0x4a>
 800116c:	20000108 	.word	0x20000108
 8001170:	08003184 	.word	0x08003184
 8001174:	08003164 	.word	0x08003164
 8001178:	08003144 	.word	0x08003144

0800117c <abort>:
 800117c:	b510      	push	{r4, lr}
 800117e:	2006      	movs	r0, #6
 8001180:	f000 fd96 	bl	8001cb0 <raise>
 8001184:	2001      	movs	r0, #1
 8001186:	f001 f809 	bl	800219c <_exit>
 800118a:	46c0      	nop			; (mov r8, r8)

0800118c <__sflush_r>:
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	46c6      	mov	lr, r8
 8001190:	b500      	push	{lr}
 8001192:	898b      	ldrh	r3, [r1, #12]
 8001194:	4680      	mov	r8, r0
 8001196:	000c      	movs	r4, r1
 8001198:	071a      	lsls	r2, r3, #28
 800119a:	d445      	bmi.n	8001228 <__sflush_r+0x9c>
 800119c:	684a      	ldr	r2, [r1, #4]
 800119e:	2a00      	cmp	r2, #0
 80011a0:	dd63      	ble.n	800126a <__sflush_r+0xde>
 80011a2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80011a4:	2d00      	cmp	r5, #0
 80011a6:	d03b      	beq.n	8001220 <__sflush_r+0x94>
 80011a8:	4642      	mov	r2, r8
 80011aa:	4641      	mov	r1, r8
 80011ac:	6816      	ldr	r6, [r2, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	600a      	str	r2, [r1, #0]
 80011b2:	6a21      	ldr	r1, [r4, #32]
 80011b4:	04da      	lsls	r2, r3, #19
 80011b6:	d45c      	bmi.n	8001272 <__sflush_r+0xe6>
 80011b8:	2301      	movs	r3, #1
 80011ba:	2200      	movs	r2, #0
 80011bc:	4640      	mov	r0, r8
 80011be:	47a8      	blx	r5
 80011c0:	1c43      	adds	r3, r0, #1
 80011c2:	d061      	beq.n	8001288 <__sflush_r+0xfc>
 80011c4:	89a3      	ldrh	r3, [r4, #12]
 80011c6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80011c8:	6a21      	ldr	r1, [r4, #32]
 80011ca:	075b      	lsls	r3, r3, #29
 80011cc:	d506      	bpl.n	80011dc <__sflush_r+0x50>
 80011ce:	6863      	ldr	r3, [r4, #4]
 80011d0:	1ac0      	subs	r0, r0, r3
 80011d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <__sflush_r+0x50>
 80011d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011da:	1ac0      	subs	r0, r0, r3
 80011dc:	2300      	movs	r3, #0
 80011de:	0002      	movs	r2, r0
 80011e0:	4640      	mov	r0, r8
 80011e2:	47a8      	blx	r5
 80011e4:	1c43      	adds	r3, r0, #1
 80011e6:	d146      	bne.n	8001276 <__sflush_r+0xea>
 80011e8:	4643      	mov	r3, r8
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	210c      	movs	r1, #12
 80011ee:	5e62      	ldrsh	r2, [r4, r1]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d056      	beq.n	80012a2 <__sflush_r+0x116>
 80011f4:	2b1d      	cmp	r3, #29
 80011f6:	d001      	beq.n	80011fc <__sflush_r+0x70>
 80011f8:	2b16      	cmp	r3, #22
 80011fa:	d15d      	bne.n	80012b8 <__sflush_r+0x12c>
 80011fc:	2300      	movs	r3, #0
 80011fe:	6063      	str	r3, [r4, #4]
 8001200:	6923      	ldr	r3, [r4, #16]
 8001202:	6023      	str	r3, [r4, #0]
 8001204:	4643      	mov	r3, r8
 8001206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001208:	601e      	str	r6, [r3, #0]
 800120a:	2900      	cmp	r1, #0
 800120c:	d008      	beq.n	8001220 <__sflush_r+0x94>
 800120e:	0023      	movs	r3, r4
 8001210:	3344      	adds	r3, #68	; 0x44
 8001212:	4299      	cmp	r1, r3
 8001214:	d002      	beq.n	800121c <__sflush_r+0x90>
 8001216:	4640      	mov	r0, r8
 8001218:	f7ff fa38 	bl	800068c <_free_r>
 800121c:	2300      	movs	r3, #0
 800121e:	6363      	str	r3, [r4, #52]	; 0x34
 8001220:	2000      	movs	r0, #0
 8001222:	bc04      	pop	{r2}
 8001224:	4690      	mov	r8, r2
 8001226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001228:	690e      	ldr	r6, [r1, #16]
 800122a:	2e00      	cmp	r6, #0
 800122c:	d0f8      	beq.n	8001220 <__sflush_r+0x94>
 800122e:	680a      	ldr	r2, [r1, #0]
 8001230:	600e      	str	r6, [r1, #0]
 8001232:	1b95      	subs	r5, r2, r6
 8001234:	2200      	movs	r2, #0
 8001236:	079b      	lsls	r3, r3, #30
 8001238:	d100      	bne.n	800123c <__sflush_r+0xb0>
 800123a:	694a      	ldr	r2, [r1, #20]
 800123c:	60a2      	str	r2, [r4, #8]
 800123e:	2d00      	cmp	r5, #0
 8001240:	dc04      	bgt.n	800124c <__sflush_r+0xc0>
 8001242:	e7ed      	b.n	8001220 <__sflush_r+0x94>
 8001244:	1836      	adds	r6, r6, r0
 8001246:	1a2d      	subs	r5, r5, r0
 8001248:	2d00      	cmp	r5, #0
 800124a:	dde9      	ble.n	8001220 <__sflush_r+0x94>
 800124c:	002b      	movs	r3, r5
 800124e:	0032      	movs	r2, r6
 8001250:	6a21      	ldr	r1, [r4, #32]
 8001252:	4640      	mov	r0, r8
 8001254:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001256:	47b8      	blx	r7
 8001258:	2800      	cmp	r0, #0
 800125a:	dcf3      	bgt.n	8001244 <__sflush_r+0xb8>
 800125c:	2240      	movs	r2, #64	; 0x40
 800125e:	2001      	movs	r0, #1
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	4240      	negs	r0, r0
 8001264:	4313      	orrs	r3, r2
 8001266:	81a3      	strh	r3, [r4, #12]
 8001268:	e7db      	b.n	8001222 <__sflush_r+0x96>
 800126a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc98      	bgt.n	80011a2 <__sflush_r+0x16>
 8001270:	e7d6      	b.n	8001220 <__sflush_r+0x94>
 8001272:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001274:	e7a9      	b.n	80011ca <__sflush_r+0x3e>
 8001276:	2300      	movs	r3, #0
 8001278:	6063      	str	r3, [r4, #4]
 800127a:	6923      	ldr	r3, [r4, #16]
 800127c:	6023      	str	r3, [r4, #0]
 800127e:	89a3      	ldrh	r3, [r4, #12]
 8001280:	04db      	lsls	r3, r3, #19
 8001282:	d5bf      	bpl.n	8001204 <__sflush_r+0x78>
 8001284:	6560      	str	r0, [r4, #84]	; 0x54
 8001286:	e7bd      	b.n	8001204 <__sflush_r+0x78>
 8001288:	4643      	mov	r3, r8
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d099      	beq.n	80011c4 <__sflush_r+0x38>
 8001290:	2b1d      	cmp	r3, #29
 8001292:	d00d      	beq.n	80012b0 <__sflush_r+0x124>
 8001294:	2b16      	cmp	r3, #22
 8001296:	d00b      	beq.n	80012b0 <__sflush_r+0x124>
 8001298:	2240      	movs	r2, #64	; 0x40
 800129a:	89a3      	ldrh	r3, [r4, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	81a3      	strh	r3, [r4, #12]
 80012a0:	e7bf      	b.n	8001222 <__sflush_r+0x96>
 80012a2:	6063      	str	r3, [r4, #4]
 80012a4:	6923      	ldr	r3, [r4, #16]
 80012a6:	6023      	str	r3, [r4, #0]
 80012a8:	04d3      	lsls	r3, r2, #19
 80012aa:	d5ab      	bpl.n	8001204 <__sflush_r+0x78>
 80012ac:	6560      	str	r0, [r4, #84]	; 0x54
 80012ae:	e7a9      	b.n	8001204 <__sflush_r+0x78>
 80012b0:	4643      	mov	r3, r8
 80012b2:	2000      	movs	r0, #0
 80012b4:	601e      	str	r6, [r3, #0]
 80012b6:	e7b4      	b.n	8001222 <__sflush_r+0x96>
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	431a      	orrs	r2, r3
 80012bc:	81a2      	strh	r2, [r4, #12]
 80012be:	e7b0      	b.n	8001222 <__sflush_r+0x96>

080012c0 <_fflush_r>:
 80012c0:	690b      	ldr	r3, [r1, #16]
 80012c2:	b570      	push	{r4, r5, r6, lr}
 80012c4:	0005      	movs	r5, r0
 80012c6:	000c      	movs	r4, r1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d016      	beq.n	80012fa <_fflush_r+0x3a>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d002      	beq.n	80012d6 <_fflush_r+0x16>
 80012d0:	6983      	ldr	r3, [r0, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d015      	beq.n	8001302 <_fflush_r+0x42>
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <_fflush_r+0x50>)
 80012d8:	429c      	cmp	r4, r3
 80012da:	d010      	beq.n	80012fe <_fflush_r+0x3e>
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <_fflush_r+0x54>)
 80012de:	429c      	cmp	r4, r3
 80012e0:	d012      	beq.n	8001308 <_fflush_r+0x48>
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <_fflush_r+0x58>)
 80012e4:	429c      	cmp	r4, r3
 80012e6:	d011      	beq.n	800130c <_fflush_r+0x4c>
 80012e8:	220c      	movs	r2, #12
 80012ea:	5ea3      	ldrsh	r3, [r4, r2]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <_fflush_r+0x3a>
 80012f0:	0021      	movs	r1, r4
 80012f2:	0028      	movs	r0, r5
 80012f4:	f7ff ff4a 	bl	800118c <__sflush_r>
 80012f8:	e000      	b.n	80012fc <_fflush_r+0x3c>
 80012fa:	2000      	movs	r0, #0
 80012fc:	bd70      	pop	{r4, r5, r6, pc}
 80012fe:	686c      	ldr	r4, [r5, #4]
 8001300:	e7f2      	b.n	80012e8 <_fflush_r+0x28>
 8001302:	f000 f917 	bl	8001534 <__sinit>
 8001306:	e7e6      	b.n	80012d6 <_fflush_r+0x16>
 8001308:	68ac      	ldr	r4, [r5, #8]
 800130a:	e7ed      	b.n	80012e8 <_fflush_r+0x28>
 800130c:	68ec      	ldr	r4, [r5, #12]
 800130e:	e7eb      	b.n	80012e8 <_fflush_r+0x28>
 8001310:	08003184 	.word	0x08003184
 8001314:	08003164 	.word	0x08003164
 8001318:	08003144 	.word	0x08003144

0800131c <fflush>:
 800131c:	b510      	push	{r4, lr}
 800131e:	1e01      	subs	r1, r0, #0
 8001320:	d004      	beq.n	800132c <fflush+0x10>
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <fflush+0x1c>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	f7ff ffcb 	bl	80012c0 <_fflush_r>
 800132a:	bd10      	pop	{r4, pc}
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <fflush+0x20>)
 800132e:	4904      	ldr	r1, [pc, #16]	; (8001340 <fflush+0x24>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f000 fad9 	bl	80018e8 <_fwalk_reent>
 8001336:	e7f8      	b.n	800132a <fflush+0xe>
 8001338:	20000108 	.word	0x20000108
 800133c:	08003140 	.word	0x08003140
 8001340:	080012c1 	.word	0x080012c1

08001344 <__fp_lock>:
 8001344:	2000      	movs	r0, #0
 8001346:	4770      	bx	lr

08001348 <_cleanup_r>:
 8001348:	b510      	push	{r4, lr}
 800134a:	4902      	ldr	r1, [pc, #8]	; (8001354 <_cleanup_r+0xc>)
 800134c:	f000 facc 	bl	80018e8 <_fwalk_reent>
 8001350:	bd10      	pop	{r4, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	080012c1 	.word	0x080012c1

08001358 <__fp_unlock>:
 8001358:	2000      	movs	r0, #0
 800135a:	4770      	bx	lr

0800135c <__sfmoreglue>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	2468      	movs	r4, #104	; 0x68
 8001360:	1e4a      	subs	r2, r1, #1
 8001362:	4354      	muls	r4, r2
 8001364:	000e      	movs	r6, r1
 8001366:	0021      	movs	r1, r4
 8001368:	3174      	adds	r1, #116	; 0x74
 800136a:	f7ff f9e5 	bl	8000738 <_malloc_r>
 800136e:	1e05      	subs	r5, r0, #0
 8001370:	d009      	beq.n	8001386 <__sfmoreglue+0x2a>
 8001372:	2300      	movs	r3, #0
 8001374:	0022      	movs	r2, r4
 8001376:	6003      	str	r3, [r0, #0]
 8001378:	6046      	str	r6, [r0, #4]
 800137a:	300c      	adds	r0, #12
 800137c:	60a8      	str	r0, [r5, #8]
 800137e:	3268      	adds	r2, #104	; 0x68
 8001380:	2100      	movs	r1, #0
 8001382:	f7ff f863 	bl	800044c <memset>
 8001386:	0028      	movs	r0, r5
 8001388:	bd70      	pop	{r4, r5, r6, pc}
 800138a:	46c0      	nop			; (mov r8, r8)

0800138c <__sfp>:
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <__sfp+0x7c>)
 800138e:	b570      	push	{r4, r5, r6, lr}
 8001390:	681d      	ldr	r5, [r3, #0]
 8001392:	0006      	movs	r6, r0
 8001394:	69ab      	ldr	r3, [r5, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d027      	beq.n	80013ea <__sfp+0x5e>
 800139a:	3548      	adds	r5, #72	; 0x48
 800139c:	686b      	ldr	r3, [r5, #4]
 800139e:	68ac      	ldr	r4, [r5, #8]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	d503      	bpl.n	80013ac <__sfp+0x20>
 80013a4:	e01c      	b.n	80013e0 <__sfp+0x54>
 80013a6:	3468      	adds	r4, #104	; 0x68
 80013a8:	3b01      	subs	r3, #1
 80013aa:	d319      	bcc.n	80013e0 <__sfp+0x54>
 80013ac:	210c      	movs	r1, #12
 80013ae:	5e62      	ldrsh	r2, [r4, r1]
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	d1f8      	bne.n	80013a6 <__sfp+0x1a>
 80013b4:	2500      	movs	r5, #0
 80013b6:	0020      	movs	r0, r4
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <__sfp+0x80>)
 80013ba:	6665      	str	r5, [r4, #100]	; 0x64
 80013bc:	6025      	str	r5, [r4, #0]
 80013be:	6065      	str	r5, [r4, #4]
 80013c0:	60a5      	str	r5, [r4, #8]
 80013c2:	60e3      	str	r3, [r4, #12]
 80013c4:	6125      	str	r5, [r4, #16]
 80013c6:	6165      	str	r5, [r4, #20]
 80013c8:	61a5      	str	r5, [r4, #24]
 80013ca:	2208      	movs	r2, #8
 80013cc:	2100      	movs	r1, #0
 80013ce:	305c      	adds	r0, #92	; 0x5c
 80013d0:	f7ff f83c 	bl	800044c <memset>
 80013d4:	6365      	str	r5, [r4, #52]	; 0x34
 80013d6:	63a5      	str	r5, [r4, #56]	; 0x38
 80013d8:	64a5      	str	r5, [r4, #72]	; 0x48
 80013da:	64e5      	str	r5, [r4, #76]	; 0x4c
 80013dc:	0020      	movs	r0, r4
 80013de:	bd70      	pop	{r4, r5, r6, pc}
 80013e0:	682c      	ldr	r4, [r5, #0]
 80013e2:	2c00      	cmp	r4, #0
 80013e4:	d005      	beq.n	80013f2 <__sfp+0x66>
 80013e6:	0025      	movs	r5, r4
 80013e8:	e7d8      	b.n	800139c <__sfp+0x10>
 80013ea:	0028      	movs	r0, r5
 80013ec:	f000 f810 	bl	8001410 <__sinit.part.0>
 80013f0:	e7d3      	b.n	800139a <__sfp+0xe>
 80013f2:	2104      	movs	r1, #4
 80013f4:	0030      	movs	r0, r6
 80013f6:	f7ff ffb1 	bl	800135c <__sfmoreglue>
 80013fa:	1e04      	subs	r4, r0, #0
 80013fc:	6028      	str	r0, [r5, #0]
 80013fe:	d1f2      	bne.n	80013e6 <__sfp+0x5a>
 8001400:	230c      	movs	r3, #12
 8001402:	6033      	str	r3, [r6, #0]
 8001404:	e7ea      	b.n	80013dc <__sfp+0x50>
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	08003140 	.word	0x08003140
 800140c:	ffff0001 	.word	0xffff0001

08001410 <__sinit.part.0>:
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	46d6      	mov	lr, sl
 8001414:	464f      	mov	r7, r9
 8001416:	4646      	mov	r6, r8
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <__sinit.part.0+0xec>)
 800141a:	b5c0      	push	{r6, r7, lr}
 800141c:	6283      	str	r3, [r0, #40]	; 0x28
 800141e:	2300      	movs	r3, #0
 8001420:	6483      	str	r3, [r0, #72]	; 0x48
 8001422:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001424:	6503      	str	r3, [r0, #80]	; 0x50
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <__sinit.part.0+0xf0>)
 8001428:	b082      	sub	sp, #8
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	0005      	movs	r5, r0
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	4298      	cmp	r0, r3
 8001432:	d060      	beq.n	80014f6 <__sinit.part.0+0xe6>
 8001434:	0028      	movs	r0, r5
 8001436:	f7ff ffa9 	bl	800138c <__sfp>
 800143a:	6068      	str	r0, [r5, #4]
 800143c:	0028      	movs	r0, r5
 800143e:	f7ff ffa5 	bl	800138c <__sfp>
 8001442:	60a8      	str	r0, [r5, #8]
 8001444:	0028      	movs	r0, r5
 8001446:	f7ff ffa1 	bl	800138c <__sfp>
 800144a:	686e      	ldr	r6, [r5, #4]
 800144c:	2400      	movs	r4, #0
 800144e:	60e8      	str	r0, [r5, #12]
 8001450:	2304      	movs	r3, #4
 8001452:	0030      	movs	r0, r6
 8001454:	6674      	str	r4, [r6, #100]	; 0x64
 8001456:	6034      	str	r4, [r6, #0]
 8001458:	6074      	str	r4, [r6, #4]
 800145a:	60b4      	str	r4, [r6, #8]
 800145c:	60f3      	str	r3, [r6, #12]
 800145e:	6134      	str	r4, [r6, #16]
 8001460:	6174      	str	r4, [r6, #20]
 8001462:	61b4      	str	r4, [r6, #24]
 8001464:	2208      	movs	r2, #8
 8001466:	2100      	movs	r1, #0
 8001468:	305c      	adds	r0, #92	; 0x5c
 800146a:	f7fe ffef 	bl	800044c <memset>
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <__sinit.part.0+0xf4>)
 8001470:	4f25      	ldr	r7, [pc, #148]	; (8001508 <__sinit.part.0+0xf8>)
 8001472:	469a      	mov	sl, r3
 8001474:	6273      	str	r3, [r6, #36]	; 0x24
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <__sinit.part.0+0xfc>)
 8001478:	6337      	str	r7, [r6, #48]	; 0x30
 800147a:	4699      	mov	r9, r3
 800147c:	62b3      	str	r3, [r6, #40]	; 0x28
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <__sinit.part.0+0x100>)
 8001480:	6236      	str	r6, [r6, #32]
 8001482:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001484:	68ae      	ldr	r6, [r5, #8]
 8001486:	4698      	mov	r8, r3
 8001488:	0030      	movs	r0, r6
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <__sinit.part.0+0x104>)
 800148c:	6674      	str	r4, [r6, #100]	; 0x64
 800148e:	6034      	str	r4, [r6, #0]
 8001490:	6074      	str	r4, [r6, #4]
 8001492:	60b4      	str	r4, [r6, #8]
 8001494:	60f3      	str	r3, [r6, #12]
 8001496:	6134      	str	r4, [r6, #16]
 8001498:	6174      	str	r4, [r6, #20]
 800149a:	61b4      	str	r4, [r6, #24]
 800149c:	2208      	movs	r2, #8
 800149e:	2100      	movs	r1, #0
 80014a0:	305c      	adds	r0, #92	; 0x5c
 80014a2:	f7fe ffd3 	bl	800044c <memset>
 80014a6:	4653      	mov	r3, sl
 80014a8:	6273      	str	r3, [r6, #36]	; 0x24
 80014aa:	464b      	mov	r3, r9
 80014ac:	62b3      	str	r3, [r6, #40]	; 0x28
 80014ae:	4643      	mov	r3, r8
 80014b0:	6337      	str	r7, [r6, #48]	; 0x30
 80014b2:	62f3      	str	r3, [r6, #44]	; 0x2c
 80014b4:	6236      	str	r6, [r6, #32]
 80014b6:	68ee      	ldr	r6, [r5, #12]
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <__sinit.part.0+0x108>)
 80014ba:	0030      	movs	r0, r6
 80014bc:	60f3      	str	r3, [r6, #12]
 80014be:	6674      	str	r4, [r6, #100]	; 0x64
 80014c0:	6034      	str	r4, [r6, #0]
 80014c2:	6074      	str	r4, [r6, #4]
 80014c4:	60b4      	str	r4, [r6, #8]
 80014c6:	6134      	str	r4, [r6, #16]
 80014c8:	6174      	str	r4, [r6, #20]
 80014ca:	61b4      	str	r4, [r6, #24]
 80014cc:	2208      	movs	r2, #8
 80014ce:	2100      	movs	r1, #0
 80014d0:	305c      	adds	r0, #92	; 0x5c
 80014d2:	f7fe ffbb 	bl	800044c <memset>
 80014d6:	4653      	mov	r3, sl
 80014d8:	6273      	str	r3, [r6, #36]	; 0x24
 80014da:	464b      	mov	r3, r9
 80014dc:	62b3      	str	r3, [r6, #40]	; 0x28
 80014de:	4643      	mov	r3, r8
 80014e0:	62f3      	str	r3, [r6, #44]	; 0x2c
 80014e2:	2301      	movs	r3, #1
 80014e4:	6236      	str	r6, [r6, #32]
 80014e6:	6337      	str	r7, [r6, #48]	; 0x30
 80014e8:	61ab      	str	r3, [r5, #24]
 80014ea:	b002      	add	sp, #8
 80014ec:	bc1c      	pop	{r2, r3, r4}
 80014ee:	4690      	mov	r8, r2
 80014f0:	4699      	mov	r9, r3
 80014f2:	46a2      	mov	sl, r4
 80014f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f6:	2301      	movs	r3, #1
 80014f8:	6183      	str	r3, [r0, #24]
 80014fa:	e79b      	b.n	8001434 <__sinit.part.0+0x24>
 80014fc:	08001349 	.word	0x08001349
 8001500:	08003140 	.word	0x08003140
 8001504:	08001d3d 	.word	0x08001d3d
 8001508:	08001dd5 	.word	0x08001dd5
 800150c:	08001d69 	.word	0x08001d69
 8001510:	08001da9 	.word	0x08001da9
 8001514:	00010009 	.word	0x00010009
 8001518:	00020012 	.word	0x00020012

0800151c <_cleanup>:
 800151c:	b510      	push	{r4, lr}
 800151e:	4b03      	ldr	r3, [pc, #12]	; (800152c <_cleanup+0x10>)
 8001520:	4903      	ldr	r1, [pc, #12]	; (8001530 <_cleanup+0x14>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	f000 f9e0 	bl	80018e8 <_fwalk_reent>
 8001528:	bd10      	pop	{r4, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	08003140 	.word	0x08003140
 8001530:	080012c1 	.word	0x080012c1

08001534 <__sinit>:
 8001534:	6983      	ldr	r3, [r0, #24]
 8001536:	b510      	push	{r4, lr}
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <__sinit+0xc>
 800153c:	f7ff ff68 	bl	8001410 <__sinit.part.0>
 8001540:	bd10      	pop	{r4, pc}
 8001542:	46c0      	nop			; (mov r8, r8)

08001544 <__sfp_lock_acquire>:
 8001544:	4770      	bx	lr
 8001546:	46c0      	nop			; (mov r8, r8)

08001548 <__sfp_lock_release>:
 8001548:	4770      	bx	lr
 800154a:	46c0      	nop			; (mov r8, r8)

0800154c <__sinit_lock_acquire>:
 800154c:	4770      	bx	lr
 800154e:	46c0      	nop			; (mov r8, r8)

08001550 <__sinit_lock_release>:
 8001550:	4770      	bx	lr
 8001552:	46c0      	nop			; (mov r8, r8)

08001554 <__fp_lock_all>:
 8001554:	b510      	push	{r4, lr}
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <__fp_lock_all+0x10>)
 8001558:	4903      	ldr	r1, [pc, #12]	; (8001568 <__fp_lock_all+0x14>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f000 f9a2 	bl	80018a4 <_fwalk>
 8001560:	bd10      	pop	{r4, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	20000108 	.word	0x20000108
 8001568:	08001345 	.word	0x08001345

0800156c <__fp_unlock_all>:
 800156c:	b510      	push	{r4, lr}
 800156e:	4b03      	ldr	r3, [pc, #12]	; (800157c <__fp_unlock_all+0x10>)
 8001570:	4903      	ldr	r1, [pc, #12]	; (8001580 <__fp_unlock_all+0x14>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	f000 f996 	bl	80018a4 <_fwalk>
 8001578:	bd10      	pop	{r4, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	20000108 	.word	0x20000108
 8001580:	08001359 	.word	0x08001359

08001584 <__sfvwrite_r>:
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	4645      	mov	r5, r8
 8001588:	46de      	mov	lr, fp
 800158a:	4657      	mov	r7, sl
 800158c:	464e      	mov	r6, r9
 800158e:	b5e0      	push	{r5, r6, r7, lr}
 8001590:	6893      	ldr	r3, [r2, #8]
 8001592:	b083      	sub	sp, #12
 8001594:	9000      	str	r0, [sp, #0]
 8001596:	000c      	movs	r4, r1
 8001598:	4690      	mov	r8, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d06d      	beq.n	800167a <__sfvwrite_r+0xf6>
 800159e:	898b      	ldrh	r3, [r1, #12]
 80015a0:	071a      	lsls	r2, r3, #28
 80015a2:	d400      	bmi.n	80015a6 <__sfvwrite_r+0x22>
 80015a4:	e071      	b.n	800168a <__sfvwrite_r+0x106>
 80015a6:	690a      	ldr	r2, [r1, #16]
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d100      	bne.n	80015ae <__sfvwrite_r+0x2a>
 80015ac:	e06d      	b.n	800168a <__sfvwrite_r+0x106>
 80015ae:	4642      	mov	r2, r8
 80015b0:	6816      	ldr	r6, [r2, #0]
 80015b2:	079a      	lsls	r2, r3, #30
 80015b4:	d400      	bmi.n	80015b8 <__sfvwrite_r+0x34>
 80015b6:	e075      	b.n	80016a4 <__sfvwrite_r+0x120>
 80015b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015ba:	2700      	movs	r7, #0
 80015bc:	469a      	mov	sl, r3
 80015be:	4bb5      	ldr	r3, [pc, #724]	; (8001894 <__sfvwrite_r+0x310>)
 80015c0:	2500      	movs	r5, #0
 80015c2:	4699      	mov	r9, r3
 80015c4:	6a21      	ldr	r1, [r4, #32]
 80015c6:	2d00      	cmp	r5, #0
 80015c8:	d016      	beq.n	80015f8 <__sfvwrite_r+0x74>
 80015ca:	002b      	movs	r3, r5
 80015cc:	454d      	cmp	r5, r9
 80015ce:	d900      	bls.n	80015d2 <__sfvwrite_r+0x4e>
 80015d0:	4bb0      	ldr	r3, [pc, #704]	; (8001894 <__sfvwrite_r+0x310>)
 80015d2:	003a      	movs	r2, r7
 80015d4:	9800      	ldr	r0, [sp, #0]
 80015d6:	47d0      	blx	sl
 80015d8:	2800      	cmp	r0, #0
 80015da:	dc00      	bgt.n	80015de <__sfvwrite_r+0x5a>
 80015dc:	e0d5      	b.n	800178a <__sfvwrite_r+0x206>
 80015de:	4643      	mov	r3, r8
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	183f      	adds	r7, r7, r0
 80015e4:	1a2d      	subs	r5, r5, r0
 80015e6:	1a18      	subs	r0, r3, r0
 80015e8:	4643      	mov	r3, r8
 80015ea:	6098      	str	r0, [r3, #8]
 80015ec:	d045      	beq.n	800167a <__sfvwrite_r+0xf6>
 80015ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015f0:	6a21      	ldr	r1, [r4, #32]
 80015f2:	469a      	mov	sl, r3
 80015f4:	2d00      	cmp	r5, #0
 80015f6:	d1e8      	bne.n	80015ca <__sfvwrite_r+0x46>
 80015f8:	6837      	ldr	r7, [r6, #0]
 80015fa:	6875      	ldr	r5, [r6, #4]
 80015fc:	3608      	adds	r6, #8
 80015fe:	e7e2      	b.n	80015c6 <__sfvwrite_r+0x42>
 8001600:	464b      	mov	r3, r9
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	469a      	mov	sl, r3
 8001606:	464b      	mov	r3, r9
 8001608:	685f      	ldr	r7, [r3, #4]
 800160a:	2308      	movs	r3, #8
 800160c:	469c      	mov	ip, r3
 800160e:	44e1      	add	r9, ip
 8001610:	2f00      	cmp	r7, #0
 8001612:	d0f5      	beq.n	8001600 <__sfvwrite_r+0x7c>
 8001614:	003a      	movs	r2, r7
 8001616:	210a      	movs	r1, #10
 8001618:	4650      	mov	r0, sl
 800161a:	f000 f9fb 	bl	8001a14 <memchr>
 800161e:	2800      	cmp	r0, #0
 8001620:	d100      	bne.n	8001624 <__sfvwrite_r+0xa0>
 8001622:	e0ce      	b.n	80017c2 <__sfvwrite_r+0x23e>
 8001624:	4653      	mov	r3, sl
 8001626:	3001      	adds	r0, #1
 8001628:	1ac6      	subs	r6, r0, r3
 800162a:	0033      	movs	r3, r6
 800162c:	46bb      	mov	fp, r7
 800162e:	429f      	cmp	r7, r3
 8001630:	d900      	bls.n	8001634 <__sfvwrite_r+0xb0>
 8001632:	469b      	mov	fp, r3
 8001634:	6820      	ldr	r0, [r4, #0]
 8001636:	6922      	ldr	r2, [r4, #16]
 8001638:	6963      	ldr	r3, [r4, #20]
 800163a:	4290      	cmp	r0, r2
 800163c:	d904      	bls.n	8001648 <__sfvwrite_r+0xc4>
 800163e:	68a2      	ldr	r2, [r4, #8]
 8001640:	189d      	adds	r5, r3, r2
 8001642:	45ab      	cmp	fp, r5
 8001644:	dd00      	ble.n	8001648 <__sfvwrite_r+0xc4>
 8001646:	e092      	b.n	800176e <__sfvwrite_r+0x1ea>
 8001648:	455b      	cmp	r3, fp
 800164a:	dd00      	ble.n	800164e <__sfvwrite_r+0xca>
 800164c:	e0f9      	b.n	8001842 <__sfvwrite_r+0x2be>
 800164e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001650:	4652      	mov	r2, sl
 8001652:	6a21      	ldr	r1, [r4, #32]
 8001654:	9800      	ldr	r0, [sp, #0]
 8001656:	47a8      	blx	r5
 8001658:	1e05      	subs	r5, r0, #0
 800165a:	dc00      	bgt.n	800165e <__sfvwrite_r+0xda>
 800165c:	e095      	b.n	800178a <__sfvwrite_r+0x206>
 800165e:	1b76      	subs	r6, r6, r5
 8001660:	2001      	movs	r0, #1
 8001662:	2e00      	cmp	r6, #0
 8001664:	d100      	bne.n	8001668 <__sfvwrite_r+0xe4>
 8001666:	e0e4      	b.n	8001832 <__sfvwrite_r+0x2ae>
 8001668:	4643      	mov	r3, r8
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	44aa      	add	sl, r5
 800166e:	1b7f      	subs	r7, r7, r5
 8001670:	1b5d      	subs	r5, r3, r5
 8001672:	4643      	mov	r3, r8
 8001674:	609d      	str	r5, [r3, #8]
 8001676:	d000      	beq.n	800167a <__sfvwrite_r+0xf6>
 8001678:	e095      	b.n	80017a6 <__sfvwrite_r+0x222>
 800167a:	2000      	movs	r0, #0
 800167c:	b003      	add	sp, #12
 800167e:	bc3c      	pop	{r2, r3, r4, r5}
 8001680:	4690      	mov	r8, r2
 8001682:	4699      	mov	r9, r3
 8001684:	46a2      	mov	sl, r4
 8001686:	46ab      	mov	fp, r5
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	0021      	movs	r1, r4
 800168c:	9800      	ldr	r0, [sp, #0]
 800168e:	f7ff fcef 	bl	8001070 <__swsetup_r>
 8001692:	2800      	cmp	r0, #0
 8001694:	d000      	beq.n	8001698 <__sfvwrite_r+0x114>
 8001696:	e0f9      	b.n	800188c <__sfvwrite_r+0x308>
 8001698:	4642      	mov	r2, r8
 800169a:	89a3      	ldrh	r3, [r4, #12]
 800169c:	6816      	ldr	r6, [r2, #0]
 800169e:	079a      	lsls	r2, r3, #30
 80016a0:	d500      	bpl.n	80016a4 <__sfvwrite_r+0x120>
 80016a2:	e789      	b.n	80015b8 <__sfvwrite_r+0x34>
 80016a4:	07da      	lsls	r2, r3, #31
 80016a6:	d478      	bmi.n	800179a <__sfvwrite_r+0x216>
 80016a8:	2200      	movs	r2, #0
 80016aa:	4691      	mov	r9, r2
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	2700      	movs	r7, #0
 80016b2:	4693      	mov	fp, r2
 80016b4:	68a5      	ldr	r5, [r4, #8]
 80016b6:	6820      	ldr	r0, [r4, #0]
 80016b8:	2f00      	cmp	r7, #0
 80016ba:	d053      	beq.n	8001764 <__sfvwrite_r+0x1e0>
 80016bc:	465a      	mov	r2, fp
 80016be:	4213      	tst	r3, r2
 80016c0:	d100      	bne.n	80016c4 <__sfvwrite_r+0x140>
 80016c2:	e081      	b.n	80017c8 <__sfvwrite_r+0x244>
 80016c4:	46aa      	mov	sl, r5
 80016c6:	42bd      	cmp	r5, r7
 80016c8:	d900      	bls.n	80016cc <__sfvwrite_r+0x148>
 80016ca:	e0af      	b.n	800182c <__sfvwrite_r+0x2a8>
 80016cc:	2290      	movs	r2, #144	; 0x90
 80016ce:	00d2      	lsls	r2, r2, #3
 80016d0:	4213      	tst	r3, r2
 80016d2:	d02e      	beq.n	8001732 <__sfvwrite_r+0x1ae>
 80016d4:	6921      	ldr	r1, [r4, #16]
 80016d6:	1a45      	subs	r5, r0, r1
 80016d8:	46ac      	mov	ip, r5
 80016da:	6960      	ldr	r0, [r4, #20]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	0042      	lsls	r2, r0, #1
 80016e0:	1812      	adds	r2, r2, r0
 80016e2:	0fd0      	lsrs	r0, r2, #31
 80016e4:	1882      	adds	r2, r0, r2
 80016e6:	1c78      	adds	r0, r7, #1
 80016e8:	1052      	asrs	r2, r2, #1
 80016ea:	4460      	add	r0, ip
 80016ec:	4692      	mov	sl, r2
 80016ee:	4290      	cmp	r0, r2
 80016f0:	d901      	bls.n	80016f6 <__sfvwrite_r+0x172>
 80016f2:	4682      	mov	sl, r0
 80016f4:	0002      	movs	r2, r0
 80016f6:	055b      	lsls	r3, r3, #21
 80016f8:	d400      	bmi.n	80016fc <__sfvwrite_r+0x178>
 80016fa:	e0af      	b.n	800185c <__sfvwrite_r+0x2d8>
 80016fc:	0011      	movs	r1, r2
 80016fe:	9800      	ldr	r0, [sp, #0]
 8001700:	f7ff f81a 	bl	8000738 <_malloc_r>
 8001704:	1e05      	subs	r5, r0, #0
 8001706:	d100      	bne.n	800170a <__sfvwrite_r+0x186>
 8001708:	e0ba      	b.n	8001880 <__sfvwrite_r+0x2fc>
 800170a:	9a01      	ldr	r2, [sp, #4]
 800170c:	6921      	ldr	r1, [r4, #16]
 800170e:	f000 f9c1 	bl	8001a94 <memcpy>
 8001712:	89a3      	ldrh	r3, [r4, #12]
 8001714:	4a60      	ldr	r2, [pc, #384]	; (8001898 <__sfvwrite_r+0x314>)
 8001716:	4013      	ands	r3, r2
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	4313      	orrs	r3, r2
 800171c:	81a3      	strh	r3, [r4, #12]
 800171e:	4652      	mov	r2, sl
 8001720:	9b01      	ldr	r3, [sp, #4]
 8001722:	6125      	str	r5, [r4, #16]
 8001724:	18e8      	adds	r0, r5, r3
 8001726:	46ba      	mov	sl, r7
 8001728:	003d      	movs	r5, r7
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	6020      	str	r0, [r4, #0]
 800172e:	6162      	str	r2, [r4, #20]
 8001730:	60a3      	str	r3, [r4, #8]
 8001732:	4652      	mov	r2, sl
 8001734:	4649      	mov	r1, r9
 8001736:	f7fe fe2b 	bl	8000390 <memmove>
 800173a:	68a3      	ldr	r3, [r4, #8]
 800173c:	1b5d      	subs	r5, r3, r5
 800173e:	60a5      	str	r5, [r4, #8]
 8001740:	003d      	movs	r5, r7
 8001742:	2700      	movs	r7, #0
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	4453      	add	r3, sl
 8001748:	6023      	str	r3, [r4, #0]
 800174a:	4643      	mov	r3, r8
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	44a9      	add	r9, r5
 8001750:	1b5d      	subs	r5, r3, r5
 8001752:	4643      	mov	r3, r8
 8001754:	609d      	str	r5, [r3, #8]
 8001756:	d100      	bne.n	800175a <__sfvwrite_r+0x1d6>
 8001758:	e78f      	b.n	800167a <__sfvwrite_r+0xf6>
 800175a:	68a5      	ldr	r5, [r4, #8]
 800175c:	6820      	ldr	r0, [r4, #0]
 800175e:	89a3      	ldrh	r3, [r4, #12]
 8001760:	2f00      	cmp	r7, #0
 8001762:	d1ab      	bne.n	80016bc <__sfvwrite_r+0x138>
 8001764:	6832      	ldr	r2, [r6, #0]
 8001766:	6877      	ldr	r7, [r6, #4]
 8001768:	4691      	mov	r9, r2
 800176a:	3608      	adds	r6, #8
 800176c:	e7a4      	b.n	80016b8 <__sfvwrite_r+0x134>
 800176e:	4651      	mov	r1, sl
 8001770:	002a      	movs	r2, r5
 8001772:	f7fe fe0d 	bl	8000390 <memmove>
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	0021      	movs	r1, r4
 800177a:	195b      	adds	r3, r3, r5
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	9800      	ldr	r0, [sp, #0]
 8001780:	f7ff fd9e 	bl	80012c0 <_fflush_r>
 8001784:	2800      	cmp	r0, #0
 8001786:	d100      	bne.n	800178a <__sfvwrite_r+0x206>
 8001788:	e769      	b.n	800165e <__sfvwrite_r+0xda>
 800178a:	220c      	movs	r2, #12
 800178c:	5ea3      	ldrsh	r3, [r4, r2]
 800178e:	2240      	movs	r2, #64	; 0x40
 8001790:	2001      	movs	r0, #1
 8001792:	4313      	orrs	r3, r2
 8001794:	81a3      	strh	r3, [r4, #12]
 8001796:	4240      	negs	r0, r0
 8001798:	e770      	b.n	800167c <__sfvwrite_r+0xf8>
 800179a:	2300      	movs	r3, #0
 800179c:	46b1      	mov	r9, r6
 800179e:	2000      	movs	r0, #0
 80017a0:	469a      	mov	sl, r3
 80017a2:	2700      	movs	r7, #0
 80017a4:	001e      	movs	r6, r3
 80017a6:	2f00      	cmp	r7, #0
 80017a8:	d100      	bne.n	80017ac <__sfvwrite_r+0x228>
 80017aa:	e729      	b.n	8001600 <__sfvwrite_r+0x7c>
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d000      	beq.n	80017b2 <__sfvwrite_r+0x22e>
 80017b0:	e73b      	b.n	800162a <__sfvwrite_r+0xa6>
 80017b2:	003a      	movs	r2, r7
 80017b4:	210a      	movs	r1, #10
 80017b6:	4650      	mov	r0, sl
 80017b8:	f000 f92c 	bl	8001a14 <memchr>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d000      	beq.n	80017c2 <__sfvwrite_r+0x23e>
 80017c0:	e730      	b.n	8001624 <__sfvwrite_r+0xa0>
 80017c2:	1c7b      	adds	r3, r7, #1
 80017c4:	001e      	movs	r6, r3
 80017c6:	e731      	b.n	800162c <__sfvwrite_r+0xa8>
 80017c8:	6923      	ldr	r3, [r4, #16]
 80017ca:	4283      	cmp	r3, r0
 80017cc:	d317      	bcc.n	80017fe <__sfvwrite_r+0x27a>
 80017ce:	6963      	ldr	r3, [r4, #20]
 80017d0:	469a      	mov	sl, r3
 80017d2:	42bb      	cmp	r3, r7
 80017d4:	d813      	bhi.n	80017fe <__sfvwrite_r+0x27a>
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <__sfvwrite_r+0x318>)
 80017d8:	0038      	movs	r0, r7
 80017da:	429f      	cmp	r7, r3
 80017dc:	d900      	bls.n	80017e0 <__sfvwrite_r+0x25c>
 80017de:	4830      	ldr	r0, [pc, #192]	; (80018a0 <__sfvwrite_r+0x31c>)
 80017e0:	4651      	mov	r1, sl
 80017e2:	f000 fb7b 	bl	8001edc <__divsi3>
 80017e6:	4653      	mov	r3, sl
 80017e8:	464a      	mov	r2, r9
 80017ea:	4343      	muls	r3, r0
 80017ec:	6a21      	ldr	r1, [r4, #32]
 80017ee:	9800      	ldr	r0, [sp, #0]
 80017f0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80017f2:	47a8      	blx	r5
 80017f4:	2800      	cmp	r0, #0
 80017f6:	ddc8      	ble.n	800178a <__sfvwrite_r+0x206>
 80017f8:	0005      	movs	r5, r0
 80017fa:	1b7f      	subs	r7, r7, r5
 80017fc:	e7a5      	b.n	800174a <__sfvwrite_r+0x1c6>
 80017fe:	42bd      	cmp	r5, r7
 8001800:	d900      	bls.n	8001804 <__sfvwrite_r+0x280>
 8001802:	003d      	movs	r5, r7
 8001804:	002a      	movs	r2, r5
 8001806:	4649      	mov	r1, r9
 8001808:	f7fe fdc2 	bl	8000390 <memmove>
 800180c:	68a3      	ldr	r3, [r4, #8]
 800180e:	6822      	ldr	r2, [r4, #0]
 8001810:	1b5b      	subs	r3, r3, r5
 8001812:	1952      	adds	r2, r2, r5
 8001814:	60a3      	str	r3, [r4, #8]
 8001816:	6022      	str	r2, [r4, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <__sfvwrite_r+0x276>
 800181c:	0021      	movs	r1, r4
 800181e:	9800      	ldr	r0, [sp, #0]
 8001820:	f7ff fd4e 	bl	80012c0 <_fflush_r>
 8001824:	2800      	cmp	r0, #0
 8001826:	d1b0      	bne.n	800178a <__sfvwrite_r+0x206>
 8001828:	1b7f      	subs	r7, r7, r5
 800182a:	e78e      	b.n	800174a <__sfvwrite_r+0x1c6>
 800182c:	003d      	movs	r5, r7
 800182e:	46ba      	mov	sl, r7
 8001830:	e77f      	b.n	8001732 <__sfvwrite_r+0x1ae>
 8001832:	0021      	movs	r1, r4
 8001834:	9800      	ldr	r0, [sp, #0]
 8001836:	f7ff fd43 	bl	80012c0 <_fflush_r>
 800183a:	2800      	cmp	r0, #0
 800183c:	d100      	bne.n	8001840 <__sfvwrite_r+0x2bc>
 800183e:	e713      	b.n	8001668 <__sfvwrite_r+0xe4>
 8001840:	e7a3      	b.n	800178a <__sfvwrite_r+0x206>
 8001842:	465a      	mov	r2, fp
 8001844:	4651      	mov	r1, sl
 8001846:	f7fe fda3 	bl	8000390 <memmove>
 800184a:	465a      	mov	r2, fp
 800184c:	68a3      	ldr	r3, [r4, #8]
 800184e:	465d      	mov	r5, fp
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	60a3      	str	r3, [r4, #8]
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	445b      	add	r3, fp
 8001858:	6023      	str	r3, [r4, #0]
 800185a:	e700      	b.n	800165e <__sfvwrite_r+0xda>
 800185c:	9800      	ldr	r0, [sp, #0]
 800185e:	f000 f971 	bl	8001b44 <_realloc_r>
 8001862:	1e05      	subs	r5, r0, #0
 8001864:	d000      	beq.n	8001868 <__sfvwrite_r+0x2e4>
 8001866:	e75a      	b.n	800171e <__sfvwrite_r+0x19a>
 8001868:	9d00      	ldr	r5, [sp, #0]
 800186a:	6921      	ldr	r1, [r4, #16]
 800186c:	0028      	movs	r0, r5
 800186e:	f7fe ff0d 	bl	800068c <_free_r>
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	89a3      	ldrh	r3, [r4, #12]
 8001876:	4393      	bics	r3, r2
 8001878:	3a74      	subs	r2, #116	; 0x74
 800187a:	b21b      	sxth	r3, r3
 800187c:	602a      	str	r2, [r5, #0]
 800187e:	e786      	b.n	800178e <__sfvwrite_r+0x20a>
 8001880:	230c      	movs	r3, #12
 8001882:	9a00      	ldr	r2, [sp, #0]
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	220c      	movs	r2, #12
 8001888:	5ea3      	ldrsh	r3, [r4, r2]
 800188a:	e780      	b.n	800178e <__sfvwrite_r+0x20a>
 800188c:	2001      	movs	r0, #1
 800188e:	4240      	negs	r0, r0
 8001890:	e6f4      	b.n	800167c <__sfvwrite_r+0xf8>
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	7ffffc00 	.word	0x7ffffc00
 8001898:	fffffb7f 	.word	0xfffffb7f
 800189c:	7ffffffe 	.word	0x7ffffffe
 80018a0:	7fffffff 	.word	0x7fffffff

080018a4 <_fwalk>:
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	46c6      	mov	lr, r8
 80018a8:	3048      	adds	r0, #72	; 0x48
 80018aa:	b500      	push	{lr}
 80018ac:	4688      	mov	r8, r1
 80018ae:	0007      	movs	r7, r0
 80018b0:	2600      	movs	r6, #0
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d013      	beq.n	80018de <_fwalk+0x3a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68bc      	ldr	r4, [r7, #8]
 80018ba:	1e5d      	subs	r5, r3, #1
 80018bc:	d40c      	bmi.n	80018d8 <_fwalk+0x34>
 80018be:	89a3      	ldrh	r3, [r4, #12]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d906      	bls.n	80018d2 <_fwalk+0x2e>
 80018c4:	220e      	movs	r2, #14
 80018c6:	5ea3      	ldrsh	r3, [r4, r2]
 80018c8:	3301      	adds	r3, #1
 80018ca:	d002      	beq.n	80018d2 <_fwalk+0x2e>
 80018cc:	0020      	movs	r0, r4
 80018ce:	47c0      	blx	r8
 80018d0:	4306      	orrs	r6, r0
 80018d2:	3468      	adds	r4, #104	; 0x68
 80018d4:	3d01      	subs	r5, #1
 80018d6:	d2f2      	bcs.n	80018be <_fwalk+0x1a>
 80018d8:	683f      	ldr	r7, [r7, #0]
 80018da:	2f00      	cmp	r7, #0
 80018dc:	d1eb      	bne.n	80018b6 <_fwalk+0x12>
 80018de:	0030      	movs	r0, r6
 80018e0:	bc04      	pop	{r2}
 80018e2:	4690      	mov	r8, r2
 80018e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)

080018e8 <_fwalk_reent>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	4647      	mov	r7, r8
 80018ec:	46ce      	mov	lr, r9
 80018ee:	b580      	push	{r7, lr}
 80018f0:	0007      	movs	r7, r0
 80018f2:	3748      	adds	r7, #72	; 0x48
 80018f4:	4680      	mov	r8, r0
 80018f6:	4689      	mov	r9, r1
 80018f8:	2600      	movs	r6, #0
 80018fa:	2f00      	cmp	r7, #0
 80018fc:	d014      	beq.n	8001928 <_fwalk_reent+0x40>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68bc      	ldr	r4, [r7, #8]
 8001902:	1e5d      	subs	r5, r3, #1
 8001904:	d40d      	bmi.n	8001922 <_fwalk_reent+0x3a>
 8001906:	89a3      	ldrh	r3, [r4, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d907      	bls.n	800191c <_fwalk_reent+0x34>
 800190c:	220e      	movs	r2, #14
 800190e:	5ea3      	ldrsh	r3, [r4, r2]
 8001910:	3301      	adds	r3, #1
 8001912:	d003      	beq.n	800191c <_fwalk_reent+0x34>
 8001914:	0021      	movs	r1, r4
 8001916:	4640      	mov	r0, r8
 8001918:	47c8      	blx	r9
 800191a:	4306      	orrs	r6, r0
 800191c:	3468      	adds	r4, #104	; 0x68
 800191e:	3d01      	subs	r5, #1
 8001920:	d2f1      	bcs.n	8001906 <_fwalk_reent+0x1e>
 8001922:	683f      	ldr	r7, [r7, #0]
 8001924:	2f00      	cmp	r7, #0
 8001926:	d1ea      	bne.n	80018fe <_fwalk_reent+0x16>
 8001928:	0030      	movs	r0, r6
 800192a:	bc0c      	pop	{r2, r3}
 800192c:	4690      	mov	r8, r2
 800192e:	4699      	mov	r9, r3
 8001930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)

08001934 <__swhatbuf_r>:
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	000c      	movs	r4, r1
 8001938:	001d      	movs	r5, r3
 800193a:	230e      	movs	r3, #14
 800193c:	5ec9      	ldrsh	r1, [r1, r3]
 800193e:	b096      	sub	sp, #88	; 0x58
 8001940:	0016      	movs	r6, r2
 8001942:	2900      	cmp	r1, #0
 8001944:	db14      	blt.n	8001970 <__swhatbuf_r+0x3c>
 8001946:	466a      	mov	r2, sp
 8001948:	f000 fa70 	bl	8001e2c <_fstat_r>
 800194c:	2800      	cmp	r0, #0
 800194e:	db0f      	blt.n	8001970 <__swhatbuf_r+0x3c>
 8001950:	22f0      	movs	r2, #240	; 0xf0
 8001952:	9b01      	ldr	r3, [sp, #4]
 8001954:	0212      	lsls	r2, r2, #8
 8001956:	4013      	ands	r3, r2
 8001958:	4a09      	ldr	r2, [pc, #36]	; (8001980 <__swhatbuf_r+0x4c>)
 800195a:	4694      	mov	ip, r2
 800195c:	4463      	add	r3, ip
 800195e:	425a      	negs	r2, r3
 8001960:	4153      	adcs	r3, r2
 8001962:	602b      	str	r3, [r5, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	6033      	str	r3, [r6, #0]
 800196a:	2000      	movs	r0, #0
 800196c:	b016      	add	sp, #88	; 0x58
 800196e:	bd70      	pop	{r4, r5, r6, pc}
 8001970:	2300      	movs	r3, #0
 8001972:	602b      	str	r3, [r5, #0]
 8001974:	89a3      	ldrh	r3, [r4, #12]
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	d5f4      	bpl.n	8001964 <__swhatbuf_r+0x30>
 800197a:	2340      	movs	r3, #64	; 0x40
 800197c:	6033      	str	r3, [r6, #0]
 800197e:	e7f4      	b.n	800196a <__swhatbuf_r+0x36>
 8001980:	ffffe000 	.word	0xffffe000

08001984 <__smakebuf_r>:
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	898b      	ldrh	r3, [r1, #12]
 8001988:	b082      	sub	sp, #8
 800198a:	0006      	movs	r6, r0
 800198c:	000c      	movs	r4, r1
 800198e:	079b      	lsls	r3, r3, #30
 8001990:	d507      	bpl.n	80019a2 <__smakebuf_r+0x1e>
 8001992:	0023      	movs	r3, r4
 8001994:	3347      	adds	r3, #71	; 0x47
 8001996:	6023      	str	r3, [r4, #0]
 8001998:	6123      	str	r3, [r4, #16]
 800199a:	2301      	movs	r3, #1
 800199c:	6163      	str	r3, [r4, #20]
 800199e:	b002      	add	sp, #8
 80019a0:	bd70      	pop	{r4, r5, r6, pc}
 80019a2:	ab01      	add	r3, sp, #4
 80019a4:	466a      	mov	r2, sp
 80019a6:	f7ff ffc5 	bl	8001934 <__swhatbuf_r>
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0005      	movs	r5, r0
 80019ae:	0030      	movs	r0, r6
 80019b0:	f7fe fec2 	bl	8000738 <_malloc_r>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d010      	beq.n	80019da <__smakebuf_r+0x56>
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <__smakebuf_r+0x8c>)
 80019bc:	62b3      	str	r3, [r6, #40]	; 0x28
 80019be:	89a3      	ldrh	r3, [r4, #12]
 80019c0:	6020      	str	r0, [r4, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	9a00      	ldr	r2, [sp, #0]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	6162      	str	r2, [r4, #20]
 80019ca:	9a01      	ldr	r2, [sp, #4]
 80019cc:	81a3      	strh	r3, [r4, #12]
 80019ce:	6120      	str	r0, [r4, #16]
 80019d0:	2a00      	cmp	r2, #0
 80019d2:	d10c      	bne.n	80019ee <__smakebuf_r+0x6a>
 80019d4:	432b      	orrs	r3, r5
 80019d6:	81a3      	strh	r3, [r4, #12]
 80019d8:	e7e1      	b.n	800199e <__smakebuf_r+0x1a>
 80019da:	220c      	movs	r2, #12
 80019dc:	5ea3      	ldrsh	r3, [r4, r2]
 80019de:	059a      	lsls	r2, r3, #22
 80019e0:	d4dd      	bmi.n	800199e <__smakebuf_r+0x1a>
 80019e2:	2203      	movs	r2, #3
 80019e4:	4393      	bics	r3, r2
 80019e6:	2202      	movs	r2, #2
 80019e8:	4313      	orrs	r3, r2
 80019ea:	81a3      	strh	r3, [r4, #12]
 80019ec:	e7d1      	b.n	8001992 <__smakebuf_r+0xe>
 80019ee:	230e      	movs	r3, #14
 80019f0:	5ee1      	ldrsh	r1, [r4, r3]
 80019f2:	0030      	movs	r0, r6
 80019f4:	f000 fa2e 	bl	8001e54 <_isatty_r>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	d102      	bne.n	8001a02 <__smakebuf_r+0x7e>
 80019fc:	220c      	movs	r2, #12
 80019fe:	5ea3      	ldrsh	r3, [r4, r2]
 8001a00:	e7e8      	b.n	80019d4 <__smakebuf_r+0x50>
 8001a02:	2203      	movs	r2, #3
 8001a04:	89a3      	ldrh	r3, [r4, #12]
 8001a06:	4393      	bics	r3, r2
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	e7e1      	b.n	80019d4 <__smakebuf_r+0x50>
 8001a10:	08001349 	.word	0x08001349

08001a14 <memchr>:
 8001a14:	b570      	push	{r4, r5, r6, lr}
 8001a16:	b2cd      	uxtb	r5, r1
 8001a18:	0783      	lsls	r3, r0, #30
 8001a1a:	d034      	beq.n	8001a86 <memchr+0x72>
 8001a1c:	1e53      	subs	r3, r2, #1
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	d01b      	beq.n	8001a5a <memchr+0x46>
 8001a22:	7802      	ldrb	r2, [r0, #0]
 8001a24:	42aa      	cmp	r2, r5
 8001a26:	d019      	beq.n	8001a5c <memchr+0x48>
 8001a28:	2403      	movs	r4, #3
 8001a2a:	e004      	b.n	8001a36 <memchr+0x22>
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	d314      	bcc.n	8001a5a <memchr+0x46>
 8001a30:	7802      	ldrb	r2, [r0, #0]
 8001a32:	42aa      	cmp	r2, r5
 8001a34:	d012      	beq.n	8001a5c <memchr+0x48>
 8001a36:	3001      	adds	r0, #1
 8001a38:	4220      	tst	r0, r4
 8001a3a:	d1f7      	bne.n	8001a2c <memchr+0x18>
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d80e      	bhi.n	8001a5e <memchr+0x4a>
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00a      	beq.n	8001a5a <memchr+0x46>
 8001a44:	7802      	ldrb	r2, [r0, #0]
 8001a46:	42aa      	cmp	r2, r5
 8001a48:	d008      	beq.n	8001a5c <memchr+0x48>
 8001a4a:	18c3      	adds	r3, r0, r3
 8001a4c:	e002      	b.n	8001a54 <memchr+0x40>
 8001a4e:	7802      	ldrb	r2, [r0, #0]
 8001a50:	42aa      	cmp	r2, r5
 8001a52:	d003      	beq.n	8001a5c <memchr+0x48>
 8001a54:	3001      	adds	r0, #1
 8001a56:	4283      	cmp	r3, r0
 8001a58:	d1f9      	bne.n	8001a4e <memchr+0x3a>
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}
 8001a5e:	22ff      	movs	r2, #255	; 0xff
 8001a60:	060c      	lsls	r4, r1, #24
 8001a62:	0c24      	lsrs	r4, r4, #16
 8001a64:	4011      	ands	r1, r2
 8001a66:	4321      	orrs	r1, r4
 8001a68:	040c      	lsls	r4, r1, #16
 8001a6a:	4e08      	ldr	r6, [pc, #32]	; (8001a8c <memchr+0x78>)
 8001a6c:	430c      	orrs	r4, r1
 8001a6e:	6802      	ldr	r2, [r0, #0]
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <memchr+0x7c>)
 8001a72:	4062      	eors	r2, r4
 8001a74:	1851      	adds	r1, r2, r1
 8001a76:	4391      	bics	r1, r2
 8001a78:	4231      	tst	r1, r6
 8001a7a:	d1e3      	bne.n	8001a44 <memchr+0x30>
 8001a7c:	3b04      	subs	r3, #4
 8001a7e:	3004      	adds	r0, #4
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d8f4      	bhi.n	8001a6e <memchr+0x5a>
 8001a84:	e7dc      	b.n	8001a40 <memchr+0x2c>
 8001a86:	0013      	movs	r3, r2
 8001a88:	e7d8      	b.n	8001a3c <memchr+0x28>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	80808080 	.word	0x80808080
 8001a90:	fefefeff 	.word	0xfefefeff

08001a94 <memcpy>:
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	46c6      	mov	lr, r8
 8001a98:	b500      	push	{lr}
 8001a9a:	2a0f      	cmp	r2, #15
 8001a9c:	d943      	bls.n	8001b26 <memcpy+0x92>
 8001a9e:	000b      	movs	r3, r1
 8001aa0:	2603      	movs	r6, #3
 8001aa2:	4303      	orrs	r3, r0
 8001aa4:	401e      	ands	r6, r3
 8001aa6:	000c      	movs	r4, r1
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	2e00      	cmp	r6, #0
 8001aac:	d140      	bne.n	8001b30 <memcpy+0x9c>
 8001aae:	0015      	movs	r5, r2
 8001ab0:	3d10      	subs	r5, #16
 8001ab2:	092d      	lsrs	r5, r5, #4
 8001ab4:	46ac      	mov	ip, r5
 8001ab6:	012d      	lsls	r5, r5, #4
 8001ab8:	46a8      	mov	r8, r5
 8001aba:	4480      	add	r8, r0
 8001abc:	e000      	b.n	8001ac0 <memcpy+0x2c>
 8001abe:	003b      	movs	r3, r7
 8001ac0:	6867      	ldr	r7, [r4, #4]
 8001ac2:	6825      	ldr	r5, [r4, #0]
 8001ac4:	605f      	str	r7, [r3, #4]
 8001ac6:	68e7      	ldr	r7, [r4, #12]
 8001ac8:	601d      	str	r5, [r3, #0]
 8001aca:	60df      	str	r7, [r3, #12]
 8001acc:	001f      	movs	r7, r3
 8001ace:	68a5      	ldr	r5, [r4, #8]
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	609d      	str	r5, [r3, #8]
 8001ad4:	3410      	adds	r4, #16
 8001ad6:	4543      	cmp	r3, r8
 8001ad8:	d1f1      	bne.n	8001abe <memcpy+0x2a>
 8001ada:	4665      	mov	r5, ip
 8001adc:	230f      	movs	r3, #15
 8001ade:	240c      	movs	r4, #12
 8001ae0:	3501      	adds	r5, #1
 8001ae2:	012d      	lsls	r5, r5, #4
 8001ae4:	1949      	adds	r1, r1, r5
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	1945      	adds	r5, r0, r5
 8001aea:	4214      	tst	r4, r2
 8001aec:	d023      	beq.n	8001b36 <memcpy+0xa2>
 8001aee:	598c      	ldr	r4, [r1, r6]
 8001af0:	51ac      	str	r4, [r5, r6]
 8001af2:	3604      	adds	r6, #4
 8001af4:	1b9c      	subs	r4, r3, r6
 8001af6:	2c03      	cmp	r4, #3
 8001af8:	d8f9      	bhi.n	8001aee <memcpy+0x5a>
 8001afa:	2403      	movs	r4, #3
 8001afc:	3b04      	subs	r3, #4
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3301      	adds	r3, #1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4022      	ands	r2, r4
 8001b06:	18ed      	adds	r5, r5, r3
 8001b08:	18c9      	adds	r1, r1, r3
 8001b0a:	1e56      	subs	r6, r2, #1
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d007      	beq.n	8001b20 <memcpy+0x8c>
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <memcpy+0x82>
 8001b14:	0023      	movs	r3, r4
 8001b16:	5cca      	ldrb	r2, [r1, r3]
 8001b18:	1c5c      	adds	r4, r3, #1
 8001b1a:	54ea      	strb	r2, [r5, r3]
 8001b1c:	429e      	cmp	r6, r3
 8001b1e:	d1f9      	bne.n	8001b14 <memcpy+0x80>
 8001b20:	bc04      	pop	{r2}
 8001b22:	4690      	mov	r8, r2
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	0005      	movs	r5, r0
 8001b28:	1e56      	subs	r6, r2, #1
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	d1f0      	bne.n	8001b10 <memcpy+0x7c>
 8001b2e:	e7f7      	b.n	8001b20 <memcpy+0x8c>
 8001b30:	1e56      	subs	r6, r2, #1
 8001b32:	0005      	movs	r5, r0
 8001b34:	e7ec      	b.n	8001b10 <memcpy+0x7c>
 8001b36:	001a      	movs	r2, r3
 8001b38:	e7f6      	b.n	8001b28 <memcpy+0x94>
 8001b3a:	46c0      	nop			; (mov r8, r8)

08001b3c <__malloc_lock>:
 8001b3c:	4770      	bx	lr
 8001b3e:	46c0      	nop			; (mov r8, r8)

08001b40 <__malloc_unlock>:
 8001b40:	4770      	bx	lr
 8001b42:	46c0      	nop			; (mov r8, r8)

08001b44 <_realloc_r>:
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	0007      	movs	r7, r0
 8001b48:	000c      	movs	r4, r1
 8001b4a:	0015      	movs	r5, r2
 8001b4c:	2900      	cmp	r1, #0
 8001b4e:	d01b      	beq.n	8001b88 <_realloc_r+0x44>
 8001b50:	2a00      	cmp	r2, #0
 8001b52:	d015      	beq.n	8001b80 <_realloc_r+0x3c>
 8001b54:	f000 f9a4 	bl	8001ea0 <_malloc_usable_size_r>
 8001b58:	0026      	movs	r6, r4
 8001b5a:	42a8      	cmp	r0, r5
 8001b5c:	d301      	bcc.n	8001b62 <_realloc_r+0x1e>
 8001b5e:	0030      	movs	r0, r6
 8001b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b62:	0029      	movs	r1, r5
 8001b64:	0038      	movs	r0, r7
 8001b66:	f7fe fde7 	bl	8000738 <_malloc_r>
 8001b6a:	1e06      	subs	r6, r0, #0
 8001b6c:	d0f7      	beq.n	8001b5e <_realloc_r+0x1a>
 8001b6e:	0021      	movs	r1, r4
 8001b70:	002a      	movs	r2, r5
 8001b72:	f7ff ff8f 	bl	8001a94 <memcpy>
 8001b76:	0021      	movs	r1, r4
 8001b78:	0038      	movs	r0, r7
 8001b7a:	f7fe fd87 	bl	800068c <_free_r>
 8001b7e:	e7ee      	b.n	8001b5e <_realloc_r+0x1a>
 8001b80:	f7fe fd84 	bl	800068c <_free_r>
 8001b84:	2600      	movs	r6, #0
 8001b86:	e7ea      	b.n	8001b5e <_realloc_r+0x1a>
 8001b88:	0011      	movs	r1, r2
 8001b8a:	f7fe fdd5 	bl	8000738 <_malloc_r>
 8001b8e:	0006      	movs	r6, r0
 8001b90:	e7e5      	b.n	8001b5e <_realloc_r+0x1a>
 8001b92:	46c0      	nop			; (mov r8, r8)

08001b94 <_init_signal_r.part.0>:
 8001b94:	b510      	push	{r4, lr}
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	0004      	movs	r4, r0
 8001b9a:	f7fe fdcd 	bl	8000738 <_malloc_r>
 8001b9e:	6460      	str	r0, [r4, #68]	; 0x44
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d007      	beq.n	8001bb4 <_init_signal_r.part.0+0x20>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	3280      	adds	r2, #128	; 0x80
 8001baa:	c008      	stmia	r0!, {r3}
 8001bac:	4290      	cmp	r0, r2
 8001bae:	d1fc      	bne.n	8001baa <_init_signal_r.part.0+0x16>
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	bd10      	pop	{r4, pc}
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	4240      	negs	r0, r0
 8001bb8:	e7fb      	b.n	8001bb2 <_init_signal_r.part.0+0x1e>
 8001bba:	46c0      	nop			; (mov r8, r8)

08001bbc <_init_signal_r>:
 8001bbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001bbe:	b510      	push	{r4, lr}
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2a00      	cmp	r2, #0
 8001bc4:	d001      	beq.n	8001bca <_init_signal_r+0xe>
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	bd10      	pop	{r4, pc}
 8001bca:	f7ff ffe3 	bl	8001b94 <_init_signal_r.part.0>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	e7f9      	b.n	8001bc6 <_init_signal_r+0xa>
 8001bd2:	46c0      	nop			; (mov r8, r8)

08001bd4 <_signal_r>:
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	0005      	movs	r5, r0
 8001bd8:	000c      	movs	r4, r1
 8001bda:	0016      	movs	r6, r2
 8001bdc:	291f      	cmp	r1, #31
 8001bde:	d807      	bhi.n	8001bf0 <_signal_r+0x1c>
 8001be0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <_signal_r+0x26>
 8001be6:	00a4      	lsls	r4, r4, #2
 8001be8:	191b      	adds	r3, r3, r4
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	601e      	str	r6, [r3, #0]
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
 8001bf0:	2316      	movs	r3, #22
 8001bf2:	6003      	str	r3, [r0, #0]
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	4240      	negs	r0, r0
 8001bf8:	e7f9      	b.n	8001bee <_signal_r+0x1a>
 8001bfa:	f7ff ffcb 	bl	8001b94 <_init_signal_r.part.0>
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d101      	bne.n	8001c06 <_signal_r+0x32>
 8001c02:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001c04:	e7ef      	b.n	8001be6 <_signal_r+0x12>
 8001c06:	2001      	movs	r0, #1
 8001c08:	4240      	negs	r0, r0
 8001c0a:	e7f0      	b.n	8001bee <_signal_r+0x1a>

08001c0c <_raise_r>:
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	0005      	movs	r5, r0
 8001c10:	000c      	movs	r4, r1
 8001c12:	291f      	cmp	r1, #31
 8001c14:	d820      	bhi.n	8001c58 <_raise_r+0x4c>
 8001c16:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00e      	beq.n	8001c3a <_raise_r+0x2e>
 8001c1c:	008a      	lsls	r2, r1, #2
 8001c1e:	189b      	adds	r3, r3, r2
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	d009      	beq.n	8001c3a <_raise_r+0x2e>
 8001c26:	2a01      	cmp	r2, #1
 8001c28:	d014      	beq.n	8001c54 <_raise_r+0x48>
 8001c2a:	1c51      	adds	r1, r2, #1
 8001c2c:	d00e      	beq.n	8001c4c <_raise_r+0x40>
 8001c2e:	2100      	movs	r1, #0
 8001c30:	0020      	movs	r0, r4
 8001c32:	6019      	str	r1, [r3, #0]
 8001c34:	4790      	blx	r2
 8001c36:	2000      	movs	r0, #0
 8001c38:	bd70      	pop	{r4, r5, r6, pc}
 8001c3a:	0028      	movs	r0, r5
 8001c3c:	f000 f87a 	bl	8001d34 <_getpid_r>
 8001c40:	0022      	movs	r2, r4
 8001c42:	0001      	movs	r1, r0
 8001c44:	0028      	movs	r0, r5
 8001c46:	f000 f861 	bl	8001d0c <_kill_r>
 8001c4a:	e7f5      	b.n	8001c38 <_raise_r+0x2c>
 8001c4c:	2316      	movs	r3, #22
 8001c4e:	6003      	str	r3, [r0, #0]
 8001c50:	2001      	movs	r0, #1
 8001c52:	e7f1      	b.n	8001c38 <_raise_r+0x2c>
 8001c54:	2000      	movs	r0, #0
 8001c56:	e7ef      	b.n	8001c38 <_raise_r+0x2c>
 8001c58:	2316      	movs	r3, #22
 8001c5a:	6003      	str	r3, [r0, #0]
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	4240      	negs	r0, r0
 8001c60:	e7ea      	b.n	8001c38 <_raise_r+0x2c>
 8001c62:	46c0      	nop			; (mov r8, r8)

08001c64 <__sigtramp_r>:
 8001c64:	b570      	push	{r4, r5, r6, lr}
 8001c66:	0005      	movs	r5, r0
 8001c68:	000c      	movs	r4, r1
 8001c6a:	291f      	cmp	r1, #31
 8001c6c:	d81d      	bhi.n	8001caa <__sigtramp_r+0x46>
 8001c6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d010      	beq.n	8001c96 <__sigtramp_r+0x32>
 8001c74:	00a2      	lsls	r2, r4, #2
 8001c76:	189b      	adds	r3, r3, r2
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d009      	beq.n	8001c92 <__sigtramp_r+0x2e>
 8001c7e:	1c51      	adds	r1, r2, #1
 8001c80:	d011      	beq.n	8001ca6 <__sigtramp_r+0x42>
 8001c82:	2a01      	cmp	r2, #1
 8001c84:	d00d      	beq.n	8001ca2 <__sigtramp_r+0x3e>
 8001c86:	2100      	movs	r1, #0
 8001c88:	0020      	movs	r0, r4
 8001c8a:	6019      	str	r1, [r3, #0]
 8001c8c:	4790      	blx	r2
 8001c8e:	2000      	movs	r0, #0
 8001c90:	bd70      	pop	{r4, r5, r6, pc}
 8001c92:	2001      	movs	r0, #1
 8001c94:	e7fc      	b.n	8001c90 <__sigtramp_r+0x2c>
 8001c96:	f7ff ff7d 	bl	8001b94 <_init_signal_r.part.0>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d105      	bne.n	8001caa <__sigtramp_r+0x46>
 8001c9e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001ca0:	e7e8      	b.n	8001c74 <__sigtramp_r+0x10>
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	e7f4      	b.n	8001c90 <__sigtramp_r+0x2c>
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	e7f2      	b.n	8001c90 <__sigtramp_r+0x2c>
 8001caa:	2001      	movs	r0, #1
 8001cac:	4240      	negs	r0, r0
 8001cae:	e7ef      	b.n	8001c90 <__sigtramp_r+0x2c>

08001cb0 <raise>:
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <raise+0x10>)
 8001cb4:	0001      	movs	r1, r0
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f7ff ffa8 	bl	8001c0c <_raise_r>
 8001cbc:	bd10      	pop	{r4, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	20000108 	.word	0x20000108

08001cc4 <signal>:
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <signal+0x14>)
 8001cc8:	000a      	movs	r2, r1
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0001      	movs	r1, r0
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7ff ff80 	bl	8001bd4 <_signal_r>
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	20000108 	.word	0x20000108

08001cdc <_init_signal>:
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <_init_signal+0x18>)
 8001cde:	b510      	push	{r4, lr}
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ce6:	2a00      	cmp	r2, #0
 8001ce8:	d000      	beq.n	8001cec <_init_signal+0x10>
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7ff ff51 	bl	8001b94 <_init_signal_r.part.0>
 8001cf2:	e7fa      	b.n	8001cea <_init_signal+0xe>
 8001cf4:	20000108 	.word	0x20000108

08001cf8 <__sigtramp>:
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <__sigtramp+0x10>)
 8001cfc:	0001      	movs	r1, r0
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f7ff ffb0 	bl	8001c64 <__sigtramp_r>
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	20000108 	.word	0x20000108

08001d0c <_kill_r>:
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	b570      	push	{r4, r5, r6, lr}
 8001d10:	4c07      	ldr	r4, [pc, #28]	; (8001d30 <_kill_r+0x24>)
 8001d12:	0005      	movs	r5, r0
 8001d14:	0008      	movs	r0, r1
 8001d16:	0011      	movs	r1, r2
 8001d18:	6023      	str	r3, [r4, #0]
 8001d1a:	f000 fa11 	bl	8002140 <_kill>
 8001d1e:	1c43      	adds	r3, r0, #1
 8001d20:	d000      	beq.n	8001d24 <_kill_r+0x18>
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0fb      	beq.n	8001d22 <_kill_r+0x16>
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	e7f9      	b.n	8001d22 <_kill_r+0x16>
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	2000030c 	.word	0x2000030c

08001d34 <_getpid_r>:
 8001d34:	b510      	push	{r4, lr}
 8001d36:	f000 f9f3 	bl	8002120 <_getpid>
 8001d3a:	bd10      	pop	{r4, pc}

08001d3c <__sread>:
 8001d3c:	b570      	push	{r4, r5, r6, lr}
 8001d3e:	000c      	movs	r4, r1
 8001d40:	250e      	movs	r5, #14
 8001d42:	5f49      	ldrsh	r1, [r1, r5]
 8001d44:	f000 f8b6 	bl	8001eb4 <_read_r>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	db03      	blt.n	8001d54 <__sread+0x18>
 8001d4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d4e:	181b      	adds	r3, r3, r0
 8001d50:	6563      	str	r3, [r4, #84]	; 0x54
 8001d52:	bd70      	pop	{r4, r5, r6, pc}
 8001d54:	89a3      	ldrh	r3, [r4, #12]
 8001d56:	4a02      	ldr	r2, [pc, #8]	; (8001d60 <__sread+0x24>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	81a3      	strh	r3, [r4, #12]
 8001d5c:	e7f9      	b.n	8001d52 <__sread+0x16>
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	ffffefff 	.word	0xffffefff

08001d64 <__seofread>:
 8001d64:	2000      	movs	r0, #0
 8001d66:	4770      	bx	lr

08001d68 <__swrite>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	0016      	movs	r6, r2
 8001d6c:	001f      	movs	r7, r3
 8001d6e:	220c      	movs	r2, #12
 8001d70:	5e8b      	ldrsh	r3, [r1, r2]
 8001d72:	000c      	movs	r4, r1
 8001d74:	0005      	movs	r5, r0
 8001d76:	220e      	movs	r2, #14
 8001d78:	5e89      	ldrsh	r1, [r1, r2]
 8001d7a:	05da      	lsls	r2, r3, #23
 8001d7c:	d408      	bmi.n	8001d90 <__swrite+0x28>
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <__swrite+0x3c>)
 8001d80:	0028      	movs	r0, r5
 8001d82:	4013      	ands	r3, r2
 8001d84:	81a3      	strh	r3, [r4, #12]
 8001d86:	0032      	movs	r2, r6
 8001d88:	003b      	movs	r3, r7
 8001d8a:	f000 f829 	bl	8001de0 <_write_r>
 8001d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d90:	2200      	movs	r2, #0
 8001d92:	2302      	movs	r3, #2
 8001d94:	f000 f870 	bl	8001e78 <_lseek_r>
 8001d98:	220c      	movs	r2, #12
 8001d9a:	5ea3      	ldrsh	r3, [r4, r2]
 8001d9c:	220e      	movs	r2, #14
 8001d9e:	5ea1      	ldrsh	r1, [r4, r2]
 8001da0:	e7ed      	b.n	8001d7e <__swrite+0x16>
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	ffffefff 	.word	0xffffefff

08001da8 <__sseek>:
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	000c      	movs	r4, r1
 8001dac:	250e      	movs	r5, #14
 8001dae:	5f49      	ldrsh	r1, [r1, r5]
 8001db0:	f000 f862 	bl	8001e78 <_lseek_r>
 8001db4:	1c43      	adds	r3, r0, #1
 8001db6:	d006      	beq.n	8001dc6 <__sseek+0x1e>
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	89a2      	ldrh	r2, [r4, #12]
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	81a3      	strh	r3, [r4, #12]
 8001dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
 8001dc6:	89a3      	ldrh	r3, [r4, #12]
 8001dc8:	4a01      	ldr	r2, [pc, #4]	; (8001dd0 <__sseek+0x28>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	81a3      	strh	r3, [r4, #12]
 8001dce:	e7f9      	b.n	8001dc4 <__sseek+0x1c>
 8001dd0:	ffffefff 	.word	0xffffefff

08001dd4 <__sclose>:
 8001dd4:	b510      	push	{r4, lr}
 8001dd6:	230e      	movs	r3, #14
 8001dd8:	5ec9      	ldrsh	r1, [r1, r3]
 8001dda:	f000 f815 	bl	8001e08 <_close_r>
 8001dde:	bd10      	pop	{r4, pc}

08001de0 <_write_r>:
 8001de0:	b570      	push	{r4, r5, r6, lr}
 8001de2:	0005      	movs	r5, r0
 8001de4:	0008      	movs	r0, r1
 8001de6:	0011      	movs	r1, r2
 8001de8:	2200      	movs	r2, #0
 8001dea:	4c06      	ldr	r4, [pc, #24]	; (8001e04 <_write_r+0x24>)
 8001dec:	6022      	str	r2, [r4, #0]
 8001dee:	001a      	movs	r2, r3
 8001df0:	f000 f9cc 	bl	800218c <_write>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d000      	beq.n	8001dfa <_write_r+0x1a>
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0fb      	beq.n	8001df8 <_write_r+0x18>
 8001e00:	602b      	str	r3, [r5, #0]
 8001e02:	e7f9      	b.n	8001df8 <_write_r+0x18>
 8001e04:	2000030c 	.word	0x2000030c

08001e08 <_close_r>:
 8001e08:	2300      	movs	r3, #0
 8001e0a:	b570      	push	{r4, r5, r6, lr}
 8001e0c:	4c06      	ldr	r4, [pc, #24]	; (8001e28 <_close_r+0x20>)
 8001e0e:	0005      	movs	r5, r0
 8001e10:	0008      	movs	r0, r1
 8001e12:	6023      	str	r3, [r4, #0]
 8001e14:	f000 f974 	bl	8002100 <_close>
 8001e18:	1c43      	adds	r3, r0, #1
 8001e1a:	d000      	beq.n	8001e1e <_close_r+0x16>
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0fb      	beq.n	8001e1c <_close_r+0x14>
 8001e24:	602b      	str	r3, [r5, #0]
 8001e26:	e7f9      	b.n	8001e1c <_close_r+0x14>
 8001e28:	2000030c 	.word	0x2000030c

08001e2c <_fstat_r>:
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	b570      	push	{r4, r5, r6, lr}
 8001e30:	4c07      	ldr	r4, [pc, #28]	; (8001e50 <_fstat_r+0x24>)
 8001e32:	0005      	movs	r5, r0
 8001e34:	0008      	movs	r0, r1
 8001e36:	0011      	movs	r1, r2
 8001e38:	6023      	str	r3, [r4, #0]
 8001e3a:	f000 f969 	bl	8002110 <_fstat>
 8001e3e:	1c43      	adds	r3, r0, #1
 8001e40:	d000      	beq.n	8001e44 <_fstat_r+0x18>
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0fb      	beq.n	8001e42 <_fstat_r+0x16>
 8001e4a:	602b      	str	r3, [r5, #0]
 8001e4c:	e7f9      	b.n	8001e42 <_fstat_r+0x16>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	2000030c 	.word	0x2000030c

08001e54 <_isatty_r>:
 8001e54:	2300      	movs	r3, #0
 8001e56:	b570      	push	{r4, r5, r6, lr}
 8001e58:	4c06      	ldr	r4, [pc, #24]	; (8001e74 <_isatty_r+0x20>)
 8001e5a:	0005      	movs	r5, r0
 8001e5c:	0008      	movs	r0, r1
 8001e5e:	6023      	str	r3, [r4, #0]
 8001e60:	f000 f966 	bl	8002130 <_isatty>
 8001e64:	1c43      	adds	r3, r0, #1
 8001e66:	d000      	beq.n	8001e6a <_isatty_r+0x16>
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0fb      	beq.n	8001e68 <_isatty_r+0x14>
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	e7f9      	b.n	8001e68 <_isatty_r+0x14>
 8001e74:	2000030c 	.word	0x2000030c

08001e78 <_lseek_r>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	0005      	movs	r5, r0
 8001e7c:	0008      	movs	r0, r1
 8001e7e:	0011      	movs	r1, r2
 8001e80:	2200      	movs	r2, #0
 8001e82:	4c06      	ldr	r4, [pc, #24]	; (8001e9c <_lseek_r+0x24>)
 8001e84:	6022      	str	r2, [r4, #0]
 8001e86:	001a      	movs	r2, r3
 8001e88:	f000 f962 	bl	8002150 <_lseek>
 8001e8c:	1c43      	adds	r3, r0, #1
 8001e8e:	d000      	beq.n	8001e92 <_lseek_r+0x1a>
 8001e90:	bd70      	pop	{r4, r5, r6, pc}
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0fb      	beq.n	8001e90 <_lseek_r+0x18>
 8001e98:	602b      	str	r3, [r5, #0]
 8001e9a:	e7f9      	b.n	8001e90 <_lseek_r+0x18>
 8001e9c:	2000030c 	.word	0x2000030c

08001ea0 <_malloc_usable_size_r>:
 8001ea0:	1f0b      	subs	r3, r1, #4
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1f18      	subs	r0, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db00      	blt.n	8001eac <_malloc_usable_size_r+0xc>
 8001eaa:	4770      	bx	lr
 8001eac:	580b      	ldr	r3, [r1, r0]
 8001eae:	18c0      	adds	r0, r0, r3
 8001eb0:	e7fb      	b.n	8001eaa <_malloc_usable_size_r+0xa>
 8001eb2:	46c0      	nop			; (mov r8, r8)

08001eb4 <_read_r>:
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	0005      	movs	r5, r0
 8001eb8:	0008      	movs	r0, r1
 8001eba:	0011      	movs	r1, r2
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4c06      	ldr	r4, [pc, #24]	; (8001ed8 <_read_r+0x24>)
 8001ec0:	6022      	str	r2, [r4, #0]
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	f000 f94c 	bl	8002160 <_read>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d000      	beq.n	8001ece <_read_r+0x1a>
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0fb      	beq.n	8001ecc <_read_r+0x18>
 8001ed4:	602b      	str	r3, [r5, #0]
 8001ed6:	e7f9      	b.n	8001ecc <_read_r+0x18>
 8001ed8:	2000030c 	.word	0x2000030c

08001edc <__divsi3>:
 8001edc:	4603      	mov	r3, r0
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	d47f      	bmi.n	8001fe2 <__divsi3+0x106>
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	0843      	lsrs	r3, r0, #1
 8001ee6:	428b      	cmp	r3, r1
 8001ee8:	d374      	bcc.n	8001fd4 <__divsi3+0xf8>
 8001eea:	0903      	lsrs	r3, r0, #4
 8001eec:	428b      	cmp	r3, r1
 8001eee:	d35f      	bcc.n	8001fb0 <__divsi3+0xd4>
 8001ef0:	0a03      	lsrs	r3, r0, #8
 8001ef2:	428b      	cmp	r3, r1
 8001ef4:	d344      	bcc.n	8001f80 <__divsi3+0xa4>
 8001ef6:	0b03      	lsrs	r3, r0, #12
 8001ef8:	428b      	cmp	r3, r1
 8001efa:	d328      	bcc.n	8001f4e <__divsi3+0x72>
 8001efc:	0c03      	lsrs	r3, r0, #16
 8001efe:	428b      	cmp	r3, r1
 8001f00:	d30d      	bcc.n	8001f1e <__divsi3+0x42>
 8001f02:	22ff      	movs	r2, #255	; 0xff
 8001f04:	0209      	lsls	r1, r1, #8
 8001f06:	ba12      	rev	r2, r2
 8001f08:	0c03      	lsrs	r3, r0, #16
 8001f0a:	428b      	cmp	r3, r1
 8001f0c:	d302      	bcc.n	8001f14 <__divsi3+0x38>
 8001f0e:	1212      	asrs	r2, r2, #8
 8001f10:	0209      	lsls	r1, r1, #8
 8001f12:	d065      	beq.n	8001fe0 <__divsi3+0x104>
 8001f14:	0b03      	lsrs	r3, r0, #12
 8001f16:	428b      	cmp	r3, r1
 8001f18:	d319      	bcc.n	8001f4e <__divsi3+0x72>
 8001f1a:	e000      	b.n	8001f1e <__divsi3+0x42>
 8001f1c:	0a09      	lsrs	r1, r1, #8
 8001f1e:	0bc3      	lsrs	r3, r0, #15
 8001f20:	428b      	cmp	r3, r1
 8001f22:	d301      	bcc.n	8001f28 <__divsi3+0x4c>
 8001f24:	03cb      	lsls	r3, r1, #15
 8001f26:	1ac0      	subs	r0, r0, r3
 8001f28:	4152      	adcs	r2, r2
 8001f2a:	0b83      	lsrs	r3, r0, #14
 8001f2c:	428b      	cmp	r3, r1
 8001f2e:	d301      	bcc.n	8001f34 <__divsi3+0x58>
 8001f30:	038b      	lsls	r3, r1, #14
 8001f32:	1ac0      	subs	r0, r0, r3
 8001f34:	4152      	adcs	r2, r2
 8001f36:	0b43      	lsrs	r3, r0, #13
 8001f38:	428b      	cmp	r3, r1
 8001f3a:	d301      	bcc.n	8001f40 <__divsi3+0x64>
 8001f3c:	034b      	lsls	r3, r1, #13
 8001f3e:	1ac0      	subs	r0, r0, r3
 8001f40:	4152      	adcs	r2, r2
 8001f42:	0b03      	lsrs	r3, r0, #12
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d301      	bcc.n	8001f4c <__divsi3+0x70>
 8001f48:	030b      	lsls	r3, r1, #12
 8001f4a:	1ac0      	subs	r0, r0, r3
 8001f4c:	4152      	adcs	r2, r2
 8001f4e:	0ac3      	lsrs	r3, r0, #11
 8001f50:	428b      	cmp	r3, r1
 8001f52:	d301      	bcc.n	8001f58 <__divsi3+0x7c>
 8001f54:	02cb      	lsls	r3, r1, #11
 8001f56:	1ac0      	subs	r0, r0, r3
 8001f58:	4152      	adcs	r2, r2
 8001f5a:	0a83      	lsrs	r3, r0, #10
 8001f5c:	428b      	cmp	r3, r1
 8001f5e:	d301      	bcc.n	8001f64 <__divsi3+0x88>
 8001f60:	028b      	lsls	r3, r1, #10
 8001f62:	1ac0      	subs	r0, r0, r3
 8001f64:	4152      	adcs	r2, r2
 8001f66:	0a43      	lsrs	r3, r0, #9
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	d301      	bcc.n	8001f70 <__divsi3+0x94>
 8001f6c:	024b      	lsls	r3, r1, #9
 8001f6e:	1ac0      	subs	r0, r0, r3
 8001f70:	4152      	adcs	r2, r2
 8001f72:	0a03      	lsrs	r3, r0, #8
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d301      	bcc.n	8001f7c <__divsi3+0xa0>
 8001f78:	020b      	lsls	r3, r1, #8
 8001f7a:	1ac0      	subs	r0, r0, r3
 8001f7c:	4152      	adcs	r2, r2
 8001f7e:	d2cd      	bcs.n	8001f1c <__divsi3+0x40>
 8001f80:	09c3      	lsrs	r3, r0, #7
 8001f82:	428b      	cmp	r3, r1
 8001f84:	d301      	bcc.n	8001f8a <__divsi3+0xae>
 8001f86:	01cb      	lsls	r3, r1, #7
 8001f88:	1ac0      	subs	r0, r0, r3
 8001f8a:	4152      	adcs	r2, r2
 8001f8c:	0983      	lsrs	r3, r0, #6
 8001f8e:	428b      	cmp	r3, r1
 8001f90:	d301      	bcc.n	8001f96 <__divsi3+0xba>
 8001f92:	018b      	lsls	r3, r1, #6
 8001f94:	1ac0      	subs	r0, r0, r3
 8001f96:	4152      	adcs	r2, r2
 8001f98:	0943      	lsrs	r3, r0, #5
 8001f9a:	428b      	cmp	r3, r1
 8001f9c:	d301      	bcc.n	8001fa2 <__divsi3+0xc6>
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	1ac0      	subs	r0, r0, r3
 8001fa2:	4152      	adcs	r2, r2
 8001fa4:	0903      	lsrs	r3, r0, #4
 8001fa6:	428b      	cmp	r3, r1
 8001fa8:	d301      	bcc.n	8001fae <__divsi3+0xd2>
 8001faa:	010b      	lsls	r3, r1, #4
 8001fac:	1ac0      	subs	r0, r0, r3
 8001fae:	4152      	adcs	r2, r2
 8001fb0:	08c3      	lsrs	r3, r0, #3
 8001fb2:	428b      	cmp	r3, r1
 8001fb4:	d301      	bcc.n	8001fba <__divsi3+0xde>
 8001fb6:	00cb      	lsls	r3, r1, #3
 8001fb8:	1ac0      	subs	r0, r0, r3
 8001fba:	4152      	adcs	r2, r2
 8001fbc:	0883      	lsrs	r3, r0, #2
 8001fbe:	428b      	cmp	r3, r1
 8001fc0:	d301      	bcc.n	8001fc6 <__divsi3+0xea>
 8001fc2:	008b      	lsls	r3, r1, #2
 8001fc4:	1ac0      	subs	r0, r0, r3
 8001fc6:	4152      	adcs	r2, r2
 8001fc8:	0843      	lsrs	r3, r0, #1
 8001fca:	428b      	cmp	r3, r1
 8001fcc:	d301      	bcc.n	8001fd2 <__divsi3+0xf6>
 8001fce:	004b      	lsls	r3, r1, #1
 8001fd0:	1ac0      	subs	r0, r0, r3
 8001fd2:	4152      	adcs	r2, r2
 8001fd4:	1a41      	subs	r1, r0, r1
 8001fd6:	d200      	bcs.n	8001fda <__divsi3+0xfe>
 8001fd8:	4601      	mov	r1, r0
 8001fda:	4152      	adcs	r2, r2
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4770      	bx	lr
 8001fe0:	e05d      	b.n	800209e <__divsi3+0x1c2>
 8001fe2:	0fca      	lsrs	r2, r1, #31
 8001fe4:	d000      	beq.n	8001fe8 <__divsi3+0x10c>
 8001fe6:	4249      	negs	r1, r1
 8001fe8:	1003      	asrs	r3, r0, #32
 8001fea:	d300      	bcc.n	8001fee <__divsi3+0x112>
 8001fec:	4240      	negs	r0, r0
 8001fee:	4053      	eors	r3, r2
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	469c      	mov	ip, r3
 8001ff4:	0903      	lsrs	r3, r0, #4
 8001ff6:	428b      	cmp	r3, r1
 8001ff8:	d32d      	bcc.n	8002056 <__divsi3+0x17a>
 8001ffa:	0a03      	lsrs	r3, r0, #8
 8001ffc:	428b      	cmp	r3, r1
 8001ffe:	d312      	bcc.n	8002026 <__divsi3+0x14a>
 8002000:	22fc      	movs	r2, #252	; 0xfc
 8002002:	0189      	lsls	r1, r1, #6
 8002004:	ba12      	rev	r2, r2
 8002006:	0a03      	lsrs	r3, r0, #8
 8002008:	428b      	cmp	r3, r1
 800200a:	d30c      	bcc.n	8002026 <__divsi3+0x14a>
 800200c:	0189      	lsls	r1, r1, #6
 800200e:	1192      	asrs	r2, r2, #6
 8002010:	428b      	cmp	r3, r1
 8002012:	d308      	bcc.n	8002026 <__divsi3+0x14a>
 8002014:	0189      	lsls	r1, r1, #6
 8002016:	1192      	asrs	r2, r2, #6
 8002018:	428b      	cmp	r3, r1
 800201a:	d304      	bcc.n	8002026 <__divsi3+0x14a>
 800201c:	0189      	lsls	r1, r1, #6
 800201e:	d03a      	beq.n	8002096 <__divsi3+0x1ba>
 8002020:	1192      	asrs	r2, r2, #6
 8002022:	e000      	b.n	8002026 <__divsi3+0x14a>
 8002024:	0989      	lsrs	r1, r1, #6
 8002026:	09c3      	lsrs	r3, r0, #7
 8002028:	428b      	cmp	r3, r1
 800202a:	d301      	bcc.n	8002030 <__divsi3+0x154>
 800202c:	01cb      	lsls	r3, r1, #7
 800202e:	1ac0      	subs	r0, r0, r3
 8002030:	4152      	adcs	r2, r2
 8002032:	0983      	lsrs	r3, r0, #6
 8002034:	428b      	cmp	r3, r1
 8002036:	d301      	bcc.n	800203c <__divsi3+0x160>
 8002038:	018b      	lsls	r3, r1, #6
 800203a:	1ac0      	subs	r0, r0, r3
 800203c:	4152      	adcs	r2, r2
 800203e:	0943      	lsrs	r3, r0, #5
 8002040:	428b      	cmp	r3, r1
 8002042:	d301      	bcc.n	8002048 <__divsi3+0x16c>
 8002044:	014b      	lsls	r3, r1, #5
 8002046:	1ac0      	subs	r0, r0, r3
 8002048:	4152      	adcs	r2, r2
 800204a:	0903      	lsrs	r3, r0, #4
 800204c:	428b      	cmp	r3, r1
 800204e:	d301      	bcc.n	8002054 <__divsi3+0x178>
 8002050:	010b      	lsls	r3, r1, #4
 8002052:	1ac0      	subs	r0, r0, r3
 8002054:	4152      	adcs	r2, r2
 8002056:	08c3      	lsrs	r3, r0, #3
 8002058:	428b      	cmp	r3, r1
 800205a:	d301      	bcc.n	8002060 <__divsi3+0x184>
 800205c:	00cb      	lsls	r3, r1, #3
 800205e:	1ac0      	subs	r0, r0, r3
 8002060:	4152      	adcs	r2, r2
 8002062:	0883      	lsrs	r3, r0, #2
 8002064:	428b      	cmp	r3, r1
 8002066:	d301      	bcc.n	800206c <__divsi3+0x190>
 8002068:	008b      	lsls	r3, r1, #2
 800206a:	1ac0      	subs	r0, r0, r3
 800206c:	4152      	adcs	r2, r2
 800206e:	d2d9      	bcs.n	8002024 <__divsi3+0x148>
 8002070:	0843      	lsrs	r3, r0, #1
 8002072:	428b      	cmp	r3, r1
 8002074:	d301      	bcc.n	800207a <__divsi3+0x19e>
 8002076:	004b      	lsls	r3, r1, #1
 8002078:	1ac0      	subs	r0, r0, r3
 800207a:	4152      	adcs	r2, r2
 800207c:	1a41      	subs	r1, r0, r1
 800207e:	d200      	bcs.n	8002082 <__divsi3+0x1a6>
 8002080:	4601      	mov	r1, r0
 8002082:	4663      	mov	r3, ip
 8002084:	4152      	adcs	r2, r2
 8002086:	105b      	asrs	r3, r3, #1
 8002088:	4610      	mov	r0, r2
 800208a:	d301      	bcc.n	8002090 <__divsi3+0x1b4>
 800208c:	4240      	negs	r0, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d500      	bpl.n	8002094 <__divsi3+0x1b8>
 8002092:	4249      	negs	r1, r1
 8002094:	4770      	bx	lr
 8002096:	4663      	mov	r3, ip
 8002098:	105b      	asrs	r3, r3, #1
 800209a:	d300      	bcc.n	800209e <__divsi3+0x1c2>
 800209c:	4240      	negs	r0, r0
 800209e:	b501      	push	{r0, lr}
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7fe f951 	bl	8000348 <__aeabi_idiv0>
 80020a6:	bd02      	pop	{r1, pc}

080020a8 <__aeabi_idivmod>:
 80020a8:	2900      	cmp	r1, #0
 80020aa:	d0f8      	beq.n	800209e <__divsi3+0x1c2>
 80020ac:	e716      	b.n	8001edc <__divsi3>
 80020ae:	4770      	bx	lr

080020b0 <__aeabi_lmul>:
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	0415      	lsls	r5, r2, #16
 80020b4:	0c2d      	lsrs	r5, r5, #16
 80020b6:	000f      	movs	r7, r1
 80020b8:	0001      	movs	r1, r0
 80020ba:	002e      	movs	r6, r5
 80020bc:	46c6      	mov	lr, r8
 80020be:	4684      	mov	ip, r0
 80020c0:	0400      	lsls	r0, r0, #16
 80020c2:	0c14      	lsrs	r4, r2, #16
 80020c4:	0c00      	lsrs	r0, r0, #16
 80020c6:	0c09      	lsrs	r1, r1, #16
 80020c8:	4346      	muls	r6, r0
 80020ca:	434d      	muls	r5, r1
 80020cc:	4360      	muls	r0, r4
 80020ce:	4361      	muls	r1, r4
 80020d0:	1940      	adds	r0, r0, r5
 80020d2:	0c34      	lsrs	r4, r6, #16
 80020d4:	1824      	adds	r4, r4, r0
 80020d6:	b500      	push	{lr}
 80020d8:	42a5      	cmp	r5, r4
 80020da:	d903      	bls.n	80020e4 <__aeabi_lmul+0x34>
 80020dc:	2080      	movs	r0, #128	; 0x80
 80020de:	0240      	lsls	r0, r0, #9
 80020e0:	4680      	mov	r8, r0
 80020e2:	4441      	add	r1, r8
 80020e4:	0c25      	lsrs	r5, r4, #16
 80020e6:	186d      	adds	r5, r5, r1
 80020e8:	4661      	mov	r1, ip
 80020ea:	4359      	muls	r1, r3
 80020ec:	437a      	muls	r2, r7
 80020ee:	0430      	lsls	r0, r6, #16
 80020f0:	1949      	adds	r1, r1, r5
 80020f2:	0424      	lsls	r4, r4, #16
 80020f4:	0c00      	lsrs	r0, r0, #16
 80020f6:	1820      	adds	r0, r4, r0
 80020f8:	1889      	adds	r1, r1, r2
 80020fa:	bc04      	pop	{r2}
 80020fc:	4690      	mov	r8, r2
 80020fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002100 <_close>:
 8002100:	2258      	movs	r2, #88	; 0x58
 8002102:	2001      	movs	r0, #1
 8002104:	4b01      	ldr	r3, [pc, #4]	; (800210c <_close+0xc>)
 8002106:	4240      	negs	r0, r0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	4770      	bx	lr
 800210c:	2000030c 	.word	0x2000030c

08002110 <_fstat>:
 8002110:	2258      	movs	r2, #88	; 0x58
 8002112:	2001      	movs	r0, #1
 8002114:	4b01      	ldr	r3, [pc, #4]	; (800211c <_fstat+0xc>)
 8002116:	4240      	negs	r0, r0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	4770      	bx	lr
 800211c:	2000030c 	.word	0x2000030c

08002120 <_getpid>:
 8002120:	2258      	movs	r2, #88	; 0x58
 8002122:	2001      	movs	r0, #1
 8002124:	4b01      	ldr	r3, [pc, #4]	; (800212c <_getpid+0xc>)
 8002126:	4240      	negs	r0, r0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	4770      	bx	lr
 800212c:	2000030c 	.word	0x2000030c

08002130 <_isatty>:
 8002130:	2258      	movs	r2, #88	; 0x58
 8002132:	4b02      	ldr	r3, [pc, #8]	; (800213c <_isatty+0xc>)
 8002134:	2000      	movs	r0, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	4770      	bx	lr
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	2000030c 	.word	0x2000030c

08002140 <_kill>:
 8002140:	2258      	movs	r2, #88	; 0x58
 8002142:	2001      	movs	r0, #1
 8002144:	4b01      	ldr	r3, [pc, #4]	; (800214c <_kill+0xc>)
 8002146:	4240      	negs	r0, r0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	4770      	bx	lr
 800214c:	2000030c 	.word	0x2000030c

08002150 <_lseek>:
 8002150:	2258      	movs	r2, #88	; 0x58
 8002152:	2001      	movs	r0, #1
 8002154:	4b01      	ldr	r3, [pc, #4]	; (800215c <_lseek+0xc>)
 8002156:	4240      	negs	r0, r0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	4770      	bx	lr
 800215c:	2000030c 	.word	0x2000030c

08002160 <_read>:
 8002160:	2258      	movs	r2, #88	; 0x58
 8002162:	2001      	movs	r0, #1
 8002164:	4b01      	ldr	r3, [pc, #4]	; (800216c <_read+0xc>)
 8002166:	4240      	negs	r0, r0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	4770      	bx	lr
 800216c:	2000030c 	.word	0x2000030c

08002170 <_sbrk>:
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <_sbrk+0x14>)
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <_sbrk+0x10>
 8002178:	1818      	adds	r0, r3, r0
 800217a:	6010      	str	r0, [r2, #0]
 800217c:	0018      	movs	r0, r3
 800217e:	4770      	bx	lr
 8002180:	4b01      	ldr	r3, [pc, #4]	; (8002188 <_sbrk+0x18>)
 8002182:	e7f9      	b.n	8002178 <_sbrk+0x8>
 8002184:	20000298 	.word	0x20000298
 8002188:	20000310 	.word	0x20000310

0800218c <_write>:
 800218c:	2258      	movs	r2, #88	; 0x58
 800218e:	2001      	movs	r0, #1
 8002190:	4b01      	ldr	r3, [pc, #4]	; (8002198 <_write+0xc>)
 8002192:	4240      	negs	r0, r0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	4770      	bx	lr
 8002198:	2000030c 	.word	0x2000030c

0800219c <_exit>:
 800219c:	e7fe      	b.n	800219c <_exit>
 800219e:	46c0      	nop			; (mov r8, r8)

080021a0 <verify>:
#if SS_VER == SS_VER_2_1
uint8_t verify(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
#else
uint8_t verify(uint8_t* data, uint8_t dlen)
#endif
{
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t zero = 0, one = 1;
 80021a2:	2501      	movs	r5, #1
{
 80021a4:	b087      	sub	sp, #28
  uint8_t zero = 0, one = 1;
 80021a6:	ab04      	add	r3, sp, #16
 80021a8:	3306      	adds	r3, #6
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2300      	movs	r3, #0
  bool allmatch = true;
 80021ae:	002c      	movs	r4, r5
  uint8_t zero = 0, one = 1;
 80021b0:	9a01      	ldr	r2, [sp, #4]
  for (int i = 0; i < 6; i++) {
    bool onematch = false;
    for (int j = 0; j < 6; j++) {
      if (arr[250+j] == data[i]) {
 80021b2:	4f12      	ldr	r7, [pc, #72]	; (80021fc <verify+0x5c>)
  uint8_t zero = 0, one = 1;
 80021b4:	7013      	strb	r3, [r2, #0]
 80021b6:	ab04      	add	r3, sp, #16
 80021b8:	1dde      	adds	r6, r3, #7
 80021ba:	1d83      	adds	r3, r0, #6
 80021bc:	9303      	str	r3, [sp, #12]
 80021be:	7035      	strb	r5, [r6, #0]
      if (arr[250+j] == data[i]) {
 80021c0:	7803      	ldrb	r3, [r0, #0]
 80021c2:	9302      	str	r3, [sp, #8]
    for (int j = 0; j < 6; j++) {
 80021c4:	2300      	movs	r3, #0
    bool onematch = false;
 80021c6:	0019      	movs	r1, r3
      if (arr[250+j] == data[i]) {
 80021c8:	5cfa      	ldrb	r2, [r7, r3]
 80021ca:	4694      	mov	ip, r2
 80021cc:	9a02      	ldr	r2, [sp, #8]
 80021ce:	4594      	cmp	ip, r2
 80021d0:	d100      	bne.n	80021d4 <verify+0x34>
        onematch = true;
 80021d2:	0029      	movs	r1, r5
    for (int j = 0; j < 6; j++) {
 80021d4:	3301      	adds	r3, #1
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d1f6      	bne.n	80021c8 <verify+0x28>
  for (int i = 0; i < 6; i++) {
 80021da:	9b03      	ldr	r3, [sp, #12]
      }
    }
    if (!onematch) {
      allmatch = false;
 80021dc:	4249      	negs	r1, r1
 80021de:	3001      	adds	r0, #1
 80021e0:	400c      	ands	r4, r1
  for (int i = 0; i < 6; i++) {
 80021e2:	4283      	cmp	r3, r0
 80021e4:	d1ec      	bne.n	80021c0 <verify+0x20>
    }
  }
  if (allmatch) {
    simpleserial_put('r', 1, &one); // GOAL
 80021e6:	0032      	movs	r2, r6
  if (allmatch) {
 80021e8:	2c00      	cmp	r4, #0
 80021ea:	d100      	bne.n	80021ee <verify+0x4e>
  } else {
    simpleserial_put('r', 1, &zero);
 80021ec:	9a01      	ldr	r2, [sp, #4]
 80021ee:	2101      	movs	r1, #1
 80021f0:	2072      	movs	r0, #114	; 0x72
 80021f2:	f000 f8f9 	bl	80023e8 <simpleserial_put>
  }
  return allmatch ? 0x01 : 0x00;
}
 80021f6:	0020      	movs	r0, r4
 80021f8:	b007      	add	sp, #28
 80021fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fc:	200000fa 	.word	0x200000fa

08002200 <binarySearch>:

// iterative binary search makes number of binary function call 1
// fixed number of iterations: ceil(log(n)) 
uint8_t binarySearch(uint8_t l, uint8_t r, uint8_t x) {
  uint8_t correct_indx = -1;
  for(volatile int i=0;i<8;i++){
 8002200:	2300      	movs	r3, #0
uint8_t binarySearch(uint8_t l, uint8_t r, uint8_t x) {
 8002202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002204:	0005      	movs	r5, r0
  uint8_t correct_indx = -1;
 8002206:	20ff      	movs	r0, #255	; 0xff
  for(volatile int i=0;i<8;i++){
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	9b01      	ldr	r3, [sp, #4]
 800220c:	2b07      	cmp	r3, #7
 800220e:	dd00      	ble.n	8002212 <binarySearch+0x12>
    l = (m+1)*is_less + l*(1-is_less);

  }
  return correct_indx;

}
 8002210:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    uint8_t m = l+(r-l)/2;
 8002212:	1b4c      	subs	r4, r1, r5
 8002214:	0fe3      	lsrs	r3, r4, #31
 8002216:	191b      	adds	r3, r3, r4
 8002218:	105b      	asrs	r3, r3, #1
 800221a:	18eb      	adds	r3, r5, r3
    uint8_t is_eq = arr[m]==x;
 800221c:	4c13      	ldr	r4, [pc, #76]	; (800226c <binarySearch+0x6c>)
    uint8_t m = l+(r-l)/2;
 800221e:	b2db      	uxtb	r3, r3
    uint8_t is_eq = arr[m]==x;
 8002220:	5ce4      	ldrb	r4, [r4, r3]
 8002222:	1aa6      	subs	r6, r4, r2
 8002224:	0037      	movs	r7, r6
 8002226:	427e      	negs	r6, r7
 8002228:	417e      	adcs	r6, r7
    uint8_t is_gr = arr[m]>x;
 800222a:	42a2      	cmp	r2, r4
 800222c:	41bf      	sbcs	r7, r7
 800222e:	427f      	negs	r7, r7
 8002230:	46bc      	mov	ip, r7
    correct_indx = m*is_eq + correct_indx*(1-is_eq);
 8002232:	2701      	movs	r7, #1
 8002234:	1bbf      	subs	r7, r7, r6
 8002236:	4378      	muls	r0, r7
 8002238:	435e      	muls	r6, r3
    r = (m-1)*is_gr + r*(1-is_gr);
 800223a:	2701      	movs	r7, #1
    correct_indx = m*is_eq + correct_indx*(1-is_eq);
 800223c:	1980      	adds	r0, r0, r6
    r = (m-1)*is_gr + r*(1-is_gr);
 800223e:	4666      	mov	r6, ip
 8002240:	1bbe      	subs	r6, r7, r6
 8002242:	4667      	mov	r7, ip
 8002244:	4371      	muls	r1, r6
 8002246:	1e5e      	subs	r6, r3, #1
 8002248:	437e      	muls	r6, r7
    uint8_t is_less = arr[m]<x;
 800224a:	4294      	cmp	r4, r2
 800224c:	41a4      	sbcs	r4, r4
    r = (m-1)*is_gr + r*(1-is_gr);
 800224e:	1989      	adds	r1, r1, r6
    l = (m+1)*is_less + l*(1-is_less);
 8002250:	2601      	movs	r6, #1
    uint8_t is_less = arr[m]<x;
 8002252:	4264      	negs	r4, r4
    l = (m+1)*is_less + l*(1-is_less);
 8002254:	1b36      	subs	r6, r6, r4
 8002256:	3301      	adds	r3, #1
 8002258:	435c      	muls	r4, r3
 800225a:	4375      	muls	r5, r6
  for(volatile int i=0;i<8;i++){
 800225c:	9b01      	ldr	r3, [sp, #4]
    l = (m+1)*is_less + l*(1-is_less);
 800225e:	192d      	adds	r5, r5, r4
  for(volatile int i=0;i<8;i++){
 8002260:	3301      	adds	r3, #1
    correct_indx = m*is_eq + correct_indx*(1-is_eq);
 8002262:	b2c0      	uxtb	r0, r0
    r = (m-1)*is_gr + r*(1-is_gr);
 8002264:	b2c9      	uxtb	r1, r1
    l = (m+1)*is_less + l*(1-is_less);
 8002266:	b2ed      	uxtb	r5, r5
  for(volatile int i=0;i<8;i++){
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	e7ce      	b.n	800220a <binarySearch+0xa>
 800226c:	20000000 	.word	0x20000000

08002270 <search>:
#if SS_VER == SS_VER_2_1
uint8_t search(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
#else
uint8_t search(uint8_t* data, uint8_t dlen)
#endif
{
 8002270:	b510      	push	{r4, lr}
 8002272:	0004      	movs	r4, r0
  trigger_high();
 8002274:	f000 fa00 	bl	8002678 <trigger_high>
  binarySearch(0, 249, data[0]);
 8002278:	21f9      	movs	r1, #249	; 0xf9
 800227a:	7822      	ldrb	r2, [r4, #0]
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff ffbf 	bl	8002200 <binarySearch>
  trigger_low();
 8002282:	f000 fa01 	bl	8002688 <trigger_low>
  return 0;
}
 8002286:	2000      	movs	r0, #0
 8002288:	bd10      	pop	{r4, pc}
 800228a:	0000      	movs	r0, r0

0800228c <remove_six>:
void remove_six(void) {
 800228c:	b570      	push	{r4, r5, r6, lr}
    memmove(&arr[rep], &arr[rep+1], (256-rep)*sizeof(arr[0]));
 800228e:	2580      	movs	r5, #128	; 0x80
void remove_six(void) {
 8002290:	2406      	movs	r4, #6
 8002292:	26ff      	movs	r6, #255	; 0xff
    memmove(&arr[rep], &arr[rep+1], (256-rep)*sizeof(arr[0]));
 8002294:	006d      	lsls	r5, r5, #1
    uint8_t rep = rand();
 8002296:	f7fe f95d 	bl	8000554 <rand>
    arr[256] = arr[rep];
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <remove_six+0x30>)
 800229c:	4030      	ands	r0, r6
 800229e:	001a      	movs	r2, r3
 80022a0:	5c19      	ldrb	r1, [r3, r0]
 80022a2:	32ff      	adds	r2, #255	; 0xff
 80022a4:	7051      	strb	r1, [r2, #1]
    memmove(&arr[rep], &arr[rep+1], (256-rep)*sizeof(arr[0]));
 80022a6:	3c01      	subs	r4, #1
 80022a8:	1c41      	adds	r1, r0, #1
 80022aa:	1a2a      	subs	r2, r5, r0
 80022ac:	18c9      	adds	r1, r1, r3
 80022ae:	18c0      	adds	r0, r0, r3
 80022b0:	b2e4      	uxtb	r4, r4
 80022b2:	f7fe f86d 	bl	8000390 <memmove>
  for (uint8_t i = 1 ; i <= 6; i++) {
 80022b6:	2c00      	cmp	r4, #0
 80022b8:	d1ed      	bne.n	8002296 <remove_six+0xa>
}
 80022ba:	bd70      	pop	{r4, r5, r6, pc}
 80022bc:	20000000 	.word	0x20000000

080022c0 <main>:


int main(void) {
 80022c0:	b510      	push	{r4, lr}
  platform_init();
 80022c2:	f000 f949 	bl	8002558 <platform_init>
  init_uart();
 80022c6:	f000 f973 	bl	80025b0 <init_uart>
  trigger_setup();
 80022ca:	f000 f9b1 	bl	8002630 <trigger_setup>
  simpleserial_init();
 80022ce:	f000 f873 	bl	80023b8 <simpleserial_init>

  int key = 0xdeadbeef; // DUMMY VAL

  srand(key);
 80022d2:	4809      	ldr	r0, [pc, #36]	; (80022f8 <main+0x38>)
 80022d4:	f7fe f90e 	bl	80004f4 <srand>
  remove_six();
 80022d8:	f7ff ffd8 	bl	800228c <remove_six>

  simpleserial_addcmd('a', 6, verify);
 80022dc:	2106      	movs	r1, #6
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <main+0x3c>)
 80022e0:	2061      	movs	r0, #97	; 0x61
 80022e2:	f000 f863 	bl	80023ac <simpleserial_addcmd>
  simpleserial_addcmd('s', 1, search);
 80022e6:	2101      	movs	r1, #1
 80022e8:	2073      	movs	r0, #115	; 0x73
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <main+0x40>)
 80022ec:	f000 f85e 	bl	80023ac <simpleserial_addcmd>

  while(1) simpleserial_get();
 80022f0:	f000 f8cc 	bl	800248c <simpleserial_get>
 80022f4:	e7fc      	b.n	80022f0 <main+0x30>
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	deadbeef 	.word	0xdeadbeef
 80022fc:	080021a1 	.word	0x080021a1
 8002300:	08002271 	.word	0x08002271

08002304 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 8002304:	2001      	movs	r0, #1
 8002306:	4770      	bx	lr

08002308 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8002308:	b570      	push	{r4, r5, r6, lr}
	for(int i = 0; i < len; i++)
 800230a:	2400      	movs	r4, #0
 800230c:	4284      	cmp	r4, r0
 800230e:	db01      	blt.n	8002314 <hex_decode+0xc>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 8002310:	2000      	movs	r0, #0
 8002312:	e01f      	b.n	8002354 <hex_decode+0x4c>
		char n_lo = ascii_buf[2*i+1];
 8002314:	784d      	ldrb	r5, [r1, #1]
		char n_hi = ascii_buf[2*i];
 8002316:	780b      	ldrb	r3, [r1, #0]
		if(n_lo >= '0' && n_lo <= '9')
 8002318:	002e      	movs	r6, r5
 800231a:	3e30      	subs	r6, #48	; 0x30
 800231c:	b2f6      	uxtb	r6, r6
 800231e:	2e09      	cmp	r6, #9
 8002320:	d80c      	bhi.n	800233c <hex_decode+0x34>
			data_buf[i] = n_lo - '0';
 8002322:	5516      	strb	r6, [r2, r4]
		if(n_hi >= '0' && n_hi <= '9')
 8002324:	001d      	movs	r5, r3
 8002326:	3d30      	subs	r5, #48	; 0x30
 8002328:	b2ee      	uxtb	r6, r5
 800232a:	2e09      	cmp	r6, #9
 800232c:	d815      	bhi.n	800235a <hex_decode+0x52>
			data_buf[i] |= (n_hi - '0') << 4;
 800232e:	5d13      	ldrb	r3, [r2, r4]
 8002330:	012d      	lsls	r5, r5, #4
 8002332:	431d      	orrs	r5, r3
 8002334:	5515      	strb	r5, [r2, r4]
	for(int i = 0; i < len; i++)
 8002336:	3401      	adds	r4, #1
 8002338:	3102      	adds	r1, #2
 800233a:	e7e7      	b.n	800230c <hex_decode+0x4>
		else if(n_lo >= 'A' && n_lo <= 'F')
 800233c:	002e      	movs	r6, r5
 800233e:	3e41      	subs	r6, #65	; 0x41
 8002340:	2e05      	cmp	r6, #5
 8002342:	d802      	bhi.n	800234a <hex_decode+0x42>
			data_buf[i] = n_lo - 'A' + 10;
 8002344:	3d37      	subs	r5, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8002346:	5515      	strb	r5, [r2, r4]
 8002348:	e7ec      	b.n	8002324 <hex_decode+0x1c>
		else if(n_lo >= 'a' && n_lo <= 'f')
 800234a:	002e      	movs	r6, r5
 800234c:	3e61      	subs	r6, #97	; 0x61
 800234e:	2e05      	cmp	r6, #5
 8002350:	d901      	bls.n	8002356 <hex_decode+0x4e>
			return 1;
 8002352:	2001      	movs	r0, #1
}
 8002354:	bd70      	pop	{r4, r5, r6, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8002356:	3d57      	subs	r5, #87	; 0x57
 8002358:	e7f5      	b.n	8002346 <hex_decode+0x3e>
		else if(n_hi >= 'A' && n_hi <= 'F')
 800235a:	001d      	movs	r5, r3
 800235c:	3d41      	subs	r5, #65	; 0x41
 800235e:	2d05      	cmp	r5, #5
 8002360:	d805      	bhi.n	800236e <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8002362:	3b37      	subs	r3, #55	; 0x37
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8002364:	5d15      	ldrb	r5, [r2, r4]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	432b      	orrs	r3, r5
 800236a:	5513      	strb	r3, [r2, r4]
 800236c:	e7e3      	b.n	8002336 <hex_decode+0x2e>
		else if(n_hi >= 'a' && n_hi <= 'f')
 800236e:	001d      	movs	r5, r3
 8002370:	3d61      	subs	r5, #97	; 0x61
 8002372:	2d05      	cmp	r5, #5
 8002374:	d8ed      	bhi.n	8002352 <hex_decode+0x4a>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8002376:	3b57      	subs	r3, #87	; 0x57
 8002378:	e7f4      	b.n	8002364 <hex_decode+0x5c>
 800237a:	0000      	movs	r0, r0

0800237c <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(num_commands >= MAX_SS_CMDS)
 800237e:	4e09      	ldr	r6, [pc, #36]	; (80023a4 <simpleserial_addcmd_flags+0x28>)
{
 8002380:	0005      	movs	r5, r0
	if(num_commands >= MAX_SS_CMDS)
 8002382:	6834      	ldr	r4, [r6, #0]
		return 1;
 8002384:	2001      	movs	r0, #1
	if(num_commands >= MAX_SS_CMDS)
 8002386:	2c0f      	cmp	r4, #15
 8002388:	dc0b      	bgt.n	80023a2 <simpleserial_addcmd_flags+0x26>

	if(len >= MAX_SS_LEN)
 800238a:	29bf      	cmp	r1, #191	; 0xbf
 800238c:	d809      	bhi.n	80023a2 <simpleserial_addcmd_flags+0x26>
		return 1;

	commands[num_commands].c   = c;
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <simpleserial_addcmd_flags+0x2c>)
 8002390:	0127      	lsls	r7, r4, #4
 8002392:	543d      	strb	r5, [r7, r0]
	commands[num_commands].len = len;
 8002394:	19c0      	adds	r0, r0, r7
 8002396:	6041      	str	r1, [r0, #4]
	commands[num_commands].fp  = fp;
 8002398:	6082      	str	r2, [r0, #8]
	commands[num_commands].flags = fl;
 800239a:	7303      	strb	r3, [r0, #12]
	num_commands++;

	return 0;
 800239c:	2000      	movs	r0, #0
	num_commands++;
 800239e:	3401      	adds	r4, #1
 80023a0:	6034      	str	r4, [r6, #0]
}
 80023a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a4:	20000188 	.word	0x20000188
 80023a8:	2000018c 	.word	0x2000018c

080023ac <simpleserial_addcmd>:
{
 80023ac:	b510      	push	{r4, lr}
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 80023ae:	2300      	movs	r3, #0
 80023b0:	f7ff ffe4 	bl	800237c <simpleserial_addcmd_flags>
}
 80023b4:	bd10      	pop	{r4, pc}
 80023b6:	0000      	movs	r0, r0

080023b8 <simpleserial_init>:
{
 80023b8:	b510      	push	{r4, lr}
	simpleserial_addcmd('v', 0, check_version);
 80023ba:	2100      	movs	r1, #0
 80023bc:	4a07      	ldr	r2, [pc, #28]	; (80023dc <simpleserial_init+0x24>)
 80023be:	2076      	movs	r0, #118	; 0x76
 80023c0:	f7ff fff4 	bl	80023ac <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80023c4:	2100      	movs	r1, #0
 80023c6:	4a06      	ldr	r2, [pc, #24]	; (80023e0 <simpleserial_init+0x28>)
 80023c8:	2077      	movs	r0, #119	; 0x77
 80023ca:	f7ff ffef 	bl	80023ac <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 80023ce:	2100      	movs	r1, #0
 80023d0:	2079      	movs	r0, #121	; 0x79
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <simpleserial_init+0x2c>)
 80023d4:	f7ff ffea 	bl	80023ac <simpleserial_addcmd>
}
 80023d8:	bd10      	pop	{r4, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	08002305 	.word	0x08002305
 80023e0:	0800243d 	.word	0x0800243d
 80023e4:	08002421 	.word	0x08002421

080023e8 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	000d      	movs	r5, r1
 80023ec:	0014      	movs	r4, r2

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
 80023ee:	270f      	movs	r7, #15
	putch(c);
 80023f0:	f000 f96a 	bl	80026c8 <putch>
	for(int i = 0; i < size; i++)
 80023f4:	1965      	adds	r5, r4, r5
 80023f6:	42ac      	cmp	r4, r5
 80023f8:	d103      	bne.n	8002402 <simpleserial_put+0x1a>
	}

	// Write trailing '\n'
	putch('\n');
 80023fa:	200a      	movs	r0, #10
 80023fc:	f000 f964 	bl	80026c8 <putch>
}
 8002400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		putch(hex_lookup[output[i] >> 4 ]);
 8002402:	7823      	ldrb	r3, [r4, #0]
 8002404:	4e05      	ldr	r6, [pc, #20]	; (800241c <simpleserial_put+0x34>)
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	5cf0      	ldrb	r0, [r6, r3]
 800240a:	f000 f95d 	bl	80026c8 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 800240e:	7823      	ldrb	r3, [r4, #0]
 8002410:	3401      	adds	r4, #1
 8002412:	403b      	ands	r3, r7
 8002414:	5cf0      	ldrb	r0, [r6, r3]
 8002416:	f000 f957 	bl	80026c8 <putch>
	for(int i = 0; i < size; i++)
 800241a:	e7ec      	b.n	80023f6 <simpleserial_put+0xe>
 800241c:	0800312c 	.word	0x0800312c

08002420 <ss_num_commands>:
{
 8002420:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 8002422:	466b      	mov	r3, sp
 8002424:	1dda      	adds	r2, r3, #7
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <ss_num_commands+0x18>)
    simpleserial_put('r', 0x01, &ncmds);
 8002428:	2072      	movs	r0, #114	; 0x72
    uint8_t ncmds = num_commands & 0xFF;
 800242a:	681b      	ldr	r3, [r3, #0]
    simpleserial_put('r', 0x01, &ncmds);
 800242c:	2101      	movs	r1, #1
    uint8_t ncmds = num_commands & 0xFF;
 800242e:	7013      	strb	r3, [r2, #0]
    simpleserial_put('r', 0x01, &ncmds);
 8002430:	f7ff ffda 	bl	80023e8 <simpleserial_put>
}
 8002434:	2000      	movs	r0, #0
 8002436:	bd0e      	pop	{r1, r2, r3, pc}
 8002438:	20000188 	.word	0x20000188

0800243c <ss_get_commands>:
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800243c:	2203      	movs	r2, #3
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <ss_get_commands+0x48>)
{
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	4694      	mov	ip, r2
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002444:	681c      	ldr	r4, [r3, #0]
 8002446:	2300      	movs	r3, #0
        repr_cmd_buf[i].c = commands[i].c;
 8002448:	4d0f      	ldr	r5, [pc, #60]	; (8002488 <ss_get_commands+0x4c>)
{
 800244a:	b08d      	sub	sp, #52	; 0x34
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800244c:	b2e6      	uxtb	r6, r4
 800244e:	42b3      	cmp	r3, r6
 8002450:	db09      	blt.n	8002466 <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8002452:	4661      	mov	r1, ip
 8002454:	4361      	muls	r1, r4
 8002456:	466a      	mov	r2, sp
 8002458:	2072      	movs	r0, #114	; 0x72
 800245a:	b2c9      	uxtb	r1, r1
 800245c:	f7ff ffc4 	bl	80023e8 <simpleserial_put>
}
 8002460:	2000      	movs	r0, #0
 8002462:	b00d      	add	sp, #52	; 0x34
 8002464:	bdf0      	pop	{r4, r5, r6, r7, pc}
        repr_cmd_buf[i].c = commands[i].c;
 8002466:	4662      	mov	r2, ip
 8002468:	4669      	mov	r1, sp
 800246a:	435a      	muls	r2, r3
 800246c:	0118      	lsls	r0, r3, #4
 800246e:	5d47      	ldrb	r7, [r0, r5]
        repr_cmd_buf[i].len = commands[i].len;
 8002470:	1828      	adds	r0, r5, r0
        repr_cmd_buf[i].c = commands[i].c;
 8002472:	548f      	strb	r7, [r1, r2]
        repr_cmd_buf[i].len = commands[i].len;
 8002474:	6841      	ldr	r1, [r0, #4]
        repr_cmd_buf[i].flags = commands[i].flags;
 8002476:	7b00      	ldrb	r0, [r0, #12]
        repr_cmd_buf[i].len = commands[i].len;
 8002478:	446a      	add	r2, sp
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800247a:	3301      	adds	r3, #1
        repr_cmd_buf[i].len = commands[i].len;
 800247c:	7051      	strb	r1, [r2, #1]
        repr_cmd_buf[i].flags = commands[i].flags;
 800247e:	7090      	strb	r0, [r2, #2]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e7e4      	b.n	800244e <ss_get_commands+0x12>
 8002484:	20000188 	.word	0x20000188
 8002488:	2000018c 	.word	0x2000018c

0800248c <simpleserial_get>:
{
 800248c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248e:	4c2f      	ldr	r4, [pc, #188]	; (800254c <simpleserial_get+0xc0>)
 8002490:	44a5      	add	sp, r4
	c = getch();
 8002492:	f000 f901 	bl	8002698 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 8002496:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <simpleserial_get+0xc4>)
		if(commands[cmd].c == c)
 8002498:	492e      	ldr	r1, [pc, #184]	; (8002554 <simpleserial_get+0xc8>)
	for(cmd = 0; cmd < num_commands; cmd++)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2300      	movs	r3, #0
 800249e:	429a      	cmp	r2, r3
 80024a0:	dc04      	bgt.n	80024ac <simpleserial_get+0x20>
	if(cmd == num_commands)
 80024a2:	d107      	bne.n	80024b4 <simpleserial_get+0x28>
}
 80024a4:	2393      	movs	r3, #147	; 0x93
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	449d      	add	sp, r3
 80024aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(commands[cmd].c == c)
 80024ac:	011c      	lsls	r4, r3, #4
 80024ae:	5d0c      	ldrb	r4, [r1, r4]
 80024b0:	4284      	cmp	r4, r0
 80024b2:	d13f      	bne.n	8002534 <simpleserial_get+0xa8>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 80024b4:	2701      	movs	r7, #1
 80024b6:	4d27      	ldr	r5, [pc, #156]	; (8002554 <simpleserial_get+0xc8>)
 80024b8:	011c      	lsls	r4, r3, #4
 80024ba:	192e      	adds	r6, r5, r4
 80024bc:	7b33      	ldrb	r3, [r6, #12]
 80024be:	423b      	tst	r3, r7
 80024c0:	d018      	beq.n	80024f4 <simpleserial_get+0x68>
		uint8_t l = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	466a      	mov	r2, sp
 80024c6:	7213      	strb	r3, [r2, #8]
		buff[0] = getch();
 80024c8:	f000 f8e6 	bl	8002698 <getch>
 80024cc:	22c8      	movs	r2, #200	; 0xc8
 80024ce:	466b      	mov	r3, sp
 80024d0:	189b      	adds	r3, r3, r2
 80024d2:	7018      	strb	r0, [r3, #0]
		buff[1] = getch();
 80024d4:	f000 f8e0 	bl	8002698 <getch>
 80024d8:	22c9      	movs	r2, #201	; 0xc9
 80024da:	466b      	mov	r3, sp
 80024dc:	189b      	adds	r3, r3, r2
 80024de:	7018      	strb	r0, [r3, #0]
		if (hex_decode(1, buff, &l))
 80024e0:	aa02      	add	r2, sp, #8
 80024e2:	0038      	movs	r0, r7
 80024e4:	a932      	add	r1, sp, #200	; 0xc8
 80024e6:	f7ff ff0f 	bl	8002308 <hex_decode>
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d1da      	bne.n	80024a4 <simpleserial_get+0x18>
		commands[cmd].len = l;
 80024ee:	466b      	mov	r3, sp
 80024f0:	7a1b      	ldrb	r3, [r3, #8]
 80024f2:	6073      	str	r3, [r6, #4]
	for(cmd = 0; cmd < num_commands; cmd++)
 80024f4:	2600      	movs	r6, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80024f6:	192b      	adds	r3, r5, r4
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d81b      	bhi.n	8002538 <simpleserial_get+0xac>
	c = getch();
 8002500:	f000 f8ca 	bl	8002698 <getch>
	if(c != '\n' && c != '\r')
 8002504:	280a      	cmp	r0, #10
 8002506:	d001      	beq.n	800250c <simpleserial_get+0x80>
 8002508:	280d      	cmp	r0, #13
 800250a:	d1cb      	bne.n	80024a4 <simpleserial_get+0x18>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 800250c:	192c      	adds	r4, r5, r4
 800250e:	6865      	ldr	r5, [r4, #4]
 8002510:	aa02      	add	r2, sp, #8
 8002512:	0028      	movs	r0, r5
 8002514:	a932      	add	r1, sp, #200	; 0xc8
 8002516:	f7ff fef7 	bl	8002308 <hex_decode>
 800251a:	2800      	cmp	r0, #0
 800251c:	d1c2      	bne.n	80024a4 <simpleserial_get+0x18>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800251e:	b2e9      	uxtb	r1, r5
 8002520:	68a3      	ldr	r3, [r4, #8]
 8002522:	a802      	add	r0, sp, #8
 8002524:	4798      	blx	r3
 8002526:	aa01      	add	r2, sp, #4
 8002528:	7010      	strb	r0, [r2, #0]
	simpleserial_put('z', 1, ret);
 800252a:	2101      	movs	r1, #1
 800252c:	207a      	movs	r0, #122	; 0x7a
 800252e:	f7ff ff5b 	bl	80023e8 <simpleserial_put>
 8002532:	e7b7      	b.n	80024a4 <simpleserial_get+0x18>
	for(cmd = 0; cmd < num_commands; cmd++)
 8002534:	3301      	adds	r3, #1
 8002536:	e7b2      	b.n	800249e <simpleserial_get+0x12>
		c = getch();
 8002538:	f000 f8ae 	bl	8002698 <getch>
		if(c == '\n' || c == '\r')
 800253c:	280a      	cmp	r0, #10
 800253e:	d0b1      	beq.n	80024a4 <simpleserial_get+0x18>
 8002540:	280d      	cmp	r0, #13
 8002542:	d0af      	beq.n	80024a4 <simpleserial_get+0x18>
		ascii_buf[i] = c;
 8002544:	ab32      	add	r3, sp, #200	; 0xc8
 8002546:	54f0      	strb	r0, [r6, r3]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8002548:	3601      	adds	r6, #1
 800254a:	e7d4      	b.n	80024f6 <simpleserial_get+0x6a>
 800254c:	fffffdb4 	.word	0xfffffdb4
 8002550:	20000188 	.word	0x20000188
 8002554:	2000018c 	.word	0x2000018c

08002558 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800255a:	2790      	movs	r7, #144	; 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 800255c:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800255e:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002560:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_2;
 8002562:	2304      	movs	r3, #4
{
 8002564:	b097      	sub	sp, #92	; 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002566:	05ff      	lsls	r7, r7, #23
 8002568:	0038      	movs	r0, r7
 800256a:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 800256c:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800256e:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8002570:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002572:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002574:	f000 fb2a 	bl	8002bcc <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 8002578:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800257a:	a905      	add	r1, sp, #20
 800257c:	0038      	movs	r0, r7
	GpioInit.Pin       = GPIO_PIN_4;
 800257e:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002580:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8002582:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002584:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002586:	f000 fb21 	bl	8002bcc <HAL_GPIO_Init>
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800258a:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800258c:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800258e:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8002590:	960a      	str	r6, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8002592:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8002594:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002596:	f000 f8ad 	bl	80026f4 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800259a:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800259c:	0021      	movs	r1, r4
 800259e:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80025a0:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80025a2:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80025a4:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025a6:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80025a8:	f000 fa86 	bl	8002ab8 <HAL_RCC_ClockConfig>
#endif
}
 80025ac:	b017      	add	sp, #92	; 0x5c
 80025ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b0 <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	2180      	movs	r1, #128	; 0x80
{
 80025b2:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	4c1b      	ldr	r4, [pc, #108]	; (8002624 <init_uart+0x74>)
 80025b6:	0289      	lsls	r1, r1, #10
 80025b8:	6962      	ldr	r2, [r4, #20]
{
 80025ba:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	430a      	orrs	r2, r1
 80025be:	6162      	str	r2, [r4, #20]
 80025c0:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80025c2:	2090      	movs	r0, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	400b      	ands	r3, r1
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80025ca:	23c0      	movs	r3, #192	; 0xc0
 80025cc:	00db      	lsls	r3, r3, #3
	GpioInit.Pull      = GPIO_PULLUP;
 80025ce:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80025d0:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80025d2:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80025d6:	a903      	add	r1, sp, #12
 80025d8:	05c0      	lsls	r0, r0, #23
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80025da:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 80025dc:	9505      	str	r5, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 80025de:	9507      	str	r5, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80025e0:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80025e2:	f000 faf3 	bl	8002bcc <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 80025e6:	2180      	movs	r1, #128	; 0x80
 80025e8:	69a2      	ldr	r2, [r4, #24]
 80025ea:	01c9      	lsls	r1, r1, #7
 80025ec:	430a      	orrs	r2, r1
 80025ee:	61a2      	str	r2, [r4, #24]
 80025f0:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 80025f2:	480d      	ldr	r0, [pc, #52]	; (8002628 <init_uart+0x78>)
	__HAL_RCC_USART1_CLK_ENABLE();
 80025f4:	400b      	ands	r3, r1
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80025fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025fc:	43b3      	bics	r3, r6
 80025fe:	431d      	orrs	r5, r3
	UartHandle.Instance        = USART1;
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <init_uart+0x7c>)
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 8002602:	6325      	str	r5, [r4, #48]	; 0x30
	UartHandle.Instance        = USART1;
 8002604:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8002606:	2396      	movs	r3, #150	; 0x96
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	6043      	str	r3, [r0, #4]
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800260c:	2300      	movs	r3, #0
 800260e:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002610:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002612:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002614:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002616:	330c      	adds	r3, #12
 8002618:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 800261a:	f000 fc41 	bl	8002ea0 <HAL_UART_Init>
}
 800261e:	b008      	add	sp, #32
 8002620:	bd70      	pop	{r4, r5, r6, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	40021000 	.word	0x40021000
 8002628:	2000029c 	.word	0x2000029c
 800262c:	40013800 	.word	0x40013800

08002630 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002630:	2080      	movs	r0, #128	; 0x80
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <trigger_setup+0x44>)
{
 8002634:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	6951      	ldr	r1, [r2, #20]
 8002638:	0280      	lsls	r0, r0, #10
 800263a:	4301      	orrs	r1, r0
 800263c:	6151      	str	r1, [r2, #20]
 800263e:	6953      	ldr	r3, [r2, #20]
{
 8002640:	b086      	sub	sp, #24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	4003      	ands	r3, r0
 8002644:	9300      	str	r3, [sp, #0]
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002646:	2490      	movs	r4, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
	GpioInit.Pin       = GPIO_PIN_7;
 800264c:	2580      	movs	r5, #128	; 0x80
	GpioInit.Pull      = GPIO_NOPULL;
 800264e:	2600      	movs	r6, #0
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002650:	05e4      	lsls	r4, r4, #23
 8002652:	0020      	movs	r0, r4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002654:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002656:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002658:	3302      	adds	r3, #2
 800265a:	9304      	str	r3, [sp, #16]
	GpioInit.Pin       = GPIO_PIN_7;
 800265c:	9501      	str	r5, [sp, #4]
	GpioInit.Pull      = GPIO_NOPULL;
 800265e:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002660:	f000 fab4 	bl	8002bcc <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8002664:	0032      	movs	r2, r6
 8002666:	0029      	movs	r1, r5
 8002668:	0020      	movs	r0, r4
 800266a:	f000 fb61 	bl	8002d30 <HAL_GPIO_WritePin>
}
 800266e:	b006      	add	sp, #24
 8002670:	bd70      	pop	{r4, r5, r6, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	40021000 	.word	0x40021000

08002678 <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8002678:	2090      	movs	r0, #144	; 0x90
{
 800267a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800267c:	2201      	movs	r2, #1
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	05c0      	lsls	r0, r0, #23
 8002682:	f000 fb55 	bl	8002d30 <HAL_GPIO_WritePin>
}
 8002686:	bd10      	pop	{r4, pc}

08002688 <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8002688:	2090      	movs	r0, #144	; 0x90
{
 800268a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800268c:	2200      	movs	r2, #0
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	05c0      	lsls	r0, r0, #23
 8002692:	f000 fb4d 	bl	8002d30 <HAL_GPIO_WritePin>
}   
 8002696:	bd10      	pop	{r4, pc}

08002698 <getch>:

char getch(void)
{
 8002698:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 800269a:	2508      	movs	r5, #8
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 800269c:	466b      	mov	r3, sp
 800269e:	1ddc      	adds	r4, r3, #7
 80026a0:	2201      	movs	r2, #1
 80026a2:	2332      	movs	r3, #50	; 0x32
 80026a4:	0021      	movs	r1, r4
 80026a6:	4806      	ldr	r0, [pc, #24]	; (80026c0 <getch+0x28>)
 80026a8:	f000 fc2c 	bl	8002f04 <HAL_UART_Receive>
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d101      	bne.n	80026b4 <getch+0x1c>
	return d;
 80026b0:	7820      	ldrb	r0, [r4, #0]
}
 80026b2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <getch+0x2c>)
 80026b6:	6a13      	ldr	r3, [r2, #32]
 80026b8:	432b      	orrs	r3, r5
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	e7ee      	b.n	800269c <getch+0x4>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	2000029c 	.word	0x2000029c
 80026c4:	40013800 	.word	0x40013800

080026c8 <putch>:

void putch(char c)
{
 80026c8:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
 80026ca:	466b      	mov	r3, sp
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80026cc:	2201      	movs	r2, #1
	uint8_t d  = c;
 80026ce:	1dd9      	adds	r1, r3, #7
 80026d0:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80026d2:	4b02      	ldr	r3, [pc, #8]	; (80026dc <putch+0x14>)
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <putch+0x18>)
 80026d6:	f000 fc8d 	bl	8002ff4 <HAL_UART_Transmit>
}
 80026da:	bd07      	pop	{r0, r1, r2, pc}
 80026dc:	00001388 	.word	0x00001388
 80026e0:	2000029c 	.word	0x2000029c

080026e4 <HAL_GetTick>:
#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 80026e4:	4b02      	ldr	r3, [pc, #8]	; (80026f0 <HAL_GetTick+0xc>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	1c42      	adds	r2, r0, #1
 80026ea:	601a      	str	r2, [r3, #0]
}
 80026ec:	4770      	bx	lr
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	2000028c 	.word	0x2000028c

080026f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f6:	6803      	ldr	r3, [r0, #0]
{
 80026f8:	0005      	movs	r5, r0
 80026fa:	b085      	sub	sp, #20
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fc:	07db      	lsls	r3, r3, #31
 80026fe:	d42f      	bmi.n	8002760 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	079b      	lsls	r3, r3, #30
 8002704:	d500      	bpl.n	8002708 <HAL_RCC_OscConfig+0x14>
 8002706:	e081      	b.n	800280c <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	071b      	lsls	r3, r3, #28
 800270c:	d500      	bpl.n	8002710 <HAL_RCC_OscConfig+0x1c>
 800270e:	e0bc      	b.n	800288a <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	075b      	lsls	r3, r3, #29
 8002714:	d500      	bpl.n	8002718 <HAL_RCC_OscConfig+0x24>
 8002716:	e0df      	b.n	80028d8 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	06db      	lsls	r3, r3, #27
 800271c:	d51a      	bpl.n	8002754 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800271e:	696a      	ldr	r2, [r5, #20]
 8002720:	2304      	movs	r3, #4
 8002722:	4cb5      	ldr	r4, [pc, #724]	; (80029f8 <HAL_RCC_OscConfig+0x304>)
 8002724:	2a01      	cmp	r2, #1
 8002726:	d000      	beq.n	800272a <HAL_RCC_OscConfig+0x36>
 8002728:	e14a      	b.n	80029c0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800272a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800272c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800272e:	430b      	orrs	r3, r1
 8002730:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002734:	431a      	orrs	r2, r3
 8002736:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002738:	f7ff ffd4 	bl	80026e4 <HAL_GetTick>
 800273c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800273e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002740:	423b      	tst	r3, r7
 8002742:	d100      	bne.n	8002746 <HAL_RCC_OscConfig+0x52>
 8002744:	e135      	b.n	80029b2 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002746:	21f8      	movs	r1, #248	; 0xf8
 8002748:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800274a:	69ab      	ldr	r3, [r5, #24]
 800274c:	438a      	bics	r2, r1
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4313      	orrs	r3, r2
 8002752:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002754:	6a29      	ldr	r1, [r5, #32]
 8002756:	2900      	cmp	r1, #0
 8002758:	d000      	beq.n	800275c <HAL_RCC_OscConfig+0x68>
 800275a:	e159      	b.n	8002a10 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800275c:	2000      	movs	r0, #0
 800275e:	e013      	b.n	8002788 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002760:	210c      	movs	r1, #12
 8002762:	4ca5      	ldr	r4, [pc, #660]	; (80029f8 <HAL_RCC_OscConfig+0x304>)
 8002764:	6862      	ldr	r2, [r4, #4]
 8002766:	400a      	ands	r2, r1
 8002768:	2a04      	cmp	r2, #4
 800276a:	d006      	beq.n	800277a <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800276c:	6863      	ldr	r3, [r4, #4]
 800276e:	400b      	ands	r3, r1
 8002770:	2b08      	cmp	r3, #8
 8002772:	d10b      	bne.n	800278c <HAL_RCC_OscConfig+0x98>
 8002774:	6863      	ldr	r3, [r4, #4]
 8002776:	03db      	lsls	r3, r3, #15
 8002778:	d508      	bpl.n	800278c <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	039b      	lsls	r3, r3, #14
 800277e:	d5bf      	bpl.n	8002700 <HAL_RCC_OscConfig+0xc>
 8002780:	686b      	ldr	r3, [r5, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1bc      	bne.n	8002700 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002786:	2001      	movs	r0, #1
}
 8002788:	b005      	add	sp, #20
 800278a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278c:	686b      	ldr	r3, [r5, #4]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d113      	bne.n	80027ba <HAL_RCC_OscConfig+0xc6>
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	6822      	ldr	r2, [r4, #0]
 8002796:	025b      	lsls	r3, r3, #9
 8002798:	4313      	orrs	r3, r2
 800279a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800279c:	f7ff ffa2 	bl	80026e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80027a2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a4:	02bf      	lsls	r7, r7, #10
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	423b      	tst	r3, r7
 80027aa:	d1a9      	bne.n	8002700 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ac:	f7ff ff9a 	bl	80026e4 <HAL_GetTick>
 80027b0:	1b80      	subs	r0, r0, r6
 80027b2:	2864      	cmp	r0, #100	; 0x64
 80027b4:	d9f7      	bls.n	80027a6 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80027b6:	2003      	movs	r0, #3
 80027b8:	e7e6      	b.n	8002788 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0xf8>
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	4a8e      	ldr	r2, [pc, #568]	; (80029fc <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c4:	4013      	ands	r3, r2
 80027c6:	6023      	str	r3, [r4, #0]
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	4a8d      	ldr	r2, [pc, #564]	; (8002a00 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027cc:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ce:	4013      	ands	r3, r2
 80027d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027d2:	f7ff ff87 	bl	80026e4 <HAL_GetTick>
 80027d6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	423b      	tst	r3, r7
 80027dc:	d100      	bne.n	80027e0 <HAL_RCC_OscConfig+0xec>
 80027de:	e78f      	b.n	8002700 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff ff80 	bl	80026e4 <HAL_GetTick>
 80027e4:	1b80      	subs	r0, r0, r6
 80027e6:	2864      	cmp	r0, #100	; 0x64
 80027e8:	d9f6      	bls.n	80027d8 <HAL_RCC_OscConfig+0xe4>
 80027ea:	e7e4      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x108>
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	02db      	lsls	r3, r3, #11
 80027f6:	4313      	orrs	r3, r2
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	e7ca      	b.n	8002792 <HAL_RCC_OscConfig+0x9e>
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	4a7f      	ldr	r2, [pc, #508]	; (80029fc <HAL_RCC_OscConfig+0x308>)
 8002800:	4013      	ands	r3, r2
 8002802:	6023      	str	r3, [r4, #0]
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	4a7e      	ldr	r2, [pc, #504]	; (8002a00 <HAL_RCC_OscConfig+0x30c>)
 8002808:	4013      	ands	r3, r2
 800280a:	e7c6      	b.n	800279a <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800280c:	220c      	movs	r2, #12
 800280e:	4c7a      	ldr	r4, [pc, #488]	; (80029f8 <HAL_RCC_OscConfig+0x304>)
 8002810:	6863      	ldr	r3, [r4, #4]
 8002812:	4213      	tst	r3, r2
 8002814:	d006      	beq.n	8002824 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002816:	6863      	ldr	r3, [r4, #4]
 8002818:	4013      	ands	r3, r2
 800281a:	2b08      	cmp	r3, #8
 800281c:	d110      	bne.n	8002840 <HAL_RCC_OscConfig+0x14c>
 800281e:	6863      	ldr	r3, [r4, #4]
 8002820:	03db      	lsls	r3, r3, #15
 8002822:	d40d      	bmi.n	8002840 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	079b      	lsls	r3, r3, #30
 8002828:	d502      	bpl.n	8002830 <HAL_RCC_OscConfig+0x13c>
 800282a:	68eb      	ldr	r3, [r5, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d1aa      	bne.n	8002786 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002830:	21f8      	movs	r1, #248	; 0xf8
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	692b      	ldr	r3, [r5, #16]
 8002836:	438a      	bics	r2, r1
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4313      	orrs	r3, r2
 800283c:	6023      	str	r3, [r4, #0]
 800283e:	e763      	b.n	8002708 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002840:	68ea      	ldr	r2, [r5, #12]
 8002842:	2301      	movs	r3, #1
 8002844:	2a00      	cmp	r2, #0
 8002846:	d00f      	beq.n	8002868 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8002848:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800284c:	4313      	orrs	r3, r2
 800284e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002850:	f7ff ff48 	bl	80026e4 <HAL_GetTick>
 8002854:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	423b      	tst	r3, r7
 800285a:	d1e9      	bne.n	8002830 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285c:	f7ff ff42 	bl	80026e4 <HAL_GetTick>
 8002860:	1b80      	subs	r0, r0, r6
 8002862:	2802      	cmp	r0, #2
 8002864:	d9f7      	bls.n	8002856 <HAL_RCC_OscConfig+0x162>
 8002866:	e7a6      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8002868:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800286c:	439a      	bics	r2, r3
 800286e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8002870:	f7ff ff38 	bl	80026e4 <HAL_GetTick>
 8002874:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	423b      	tst	r3, r7
 800287a:	d100      	bne.n	800287e <HAL_RCC_OscConfig+0x18a>
 800287c:	e744      	b.n	8002708 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287e:	f7ff ff31 	bl	80026e4 <HAL_GetTick>
 8002882:	1b80      	subs	r0, r0, r6
 8002884:	2802      	cmp	r0, #2
 8002886:	d9f6      	bls.n	8002876 <HAL_RCC_OscConfig+0x182>
 8002888:	e795      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800288a:	69ea      	ldr	r2, [r5, #28]
 800288c:	2301      	movs	r3, #1
 800288e:	4c5a      	ldr	r4, [pc, #360]	; (80029f8 <HAL_RCC_OscConfig+0x304>)
 8002890:	2a00      	cmp	r2, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8002894:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002898:	4313      	orrs	r3, r2
 800289a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800289c:	f7ff ff22 	bl	80026e4 <HAL_GetTick>
 80028a0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028a4:	423b      	tst	r3, r7
 80028a6:	d000      	beq.n	80028aa <HAL_RCC_OscConfig+0x1b6>
 80028a8:	e732      	b.n	8002710 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028aa:	f7ff ff1b 	bl	80026e4 <HAL_GetTick>
 80028ae:	1b80      	subs	r0, r0, r6
 80028b0:	2802      	cmp	r0, #2
 80028b2:	d9f6      	bls.n	80028a2 <HAL_RCC_OscConfig+0x1ae>
 80028b4:	e77f      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80028b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80028ba:	439a      	bics	r2, r3
 80028bc:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80028be:	f7ff ff11 	bl	80026e4 <HAL_GetTick>
 80028c2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028c6:	423b      	tst	r3, r7
 80028c8:	d100      	bne.n	80028cc <HAL_RCC_OscConfig+0x1d8>
 80028ca:	e721      	b.n	8002710 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028cc:	f7ff ff0a 	bl	80026e4 <HAL_GetTick>
 80028d0:	1b80      	subs	r0, r0, r6
 80028d2:	2802      	cmp	r0, #2
 80028d4:	d9f6      	bls.n	80028c4 <HAL_RCC_OscConfig+0x1d0>
 80028d6:	e76e      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028dc:	4c46      	ldr	r4, [pc, #280]	; (80029f8 <HAL_RCC_OscConfig+0x304>)
 80028de:	0552      	lsls	r2, r2, #21
 80028e0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e4:	4213      	tst	r3, r2
 80028e6:	d108      	bne.n	80028fa <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e8:	69e3      	ldr	r3, [r4, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61e3      	str	r3, [r4, #28]
 80028ee:	69e3      	ldr	r3, [r4, #28]
 80028f0:	4013      	ands	r3, r2
 80028f2:	9303      	str	r3, [sp, #12]
 80028f4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	2780      	movs	r7, #128	; 0x80
 80028fc:	4e41      	ldr	r6, [pc, #260]	; (8002a04 <HAL_RCC_OscConfig+0x310>)
 80028fe:	007f      	lsls	r7, r7, #1
 8002900:	6833      	ldr	r3, [r6, #0]
 8002902:	423b      	tst	r3, r7
 8002904:	d006      	beq.n	8002914 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002906:	68ab      	ldr	r3, [r5, #8]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d113      	bne.n	8002934 <HAL_RCC_OscConfig+0x240>
 800290c:	6a22      	ldr	r2, [r4, #32]
 800290e:	4313      	orrs	r3, r2
 8002910:	6223      	str	r3, [r4, #32]
 8002912:	e030      	b.n	8002976 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002914:	6833      	ldr	r3, [r6, #0]
 8002916:	433b      	orrs	r3, r7
 8002918:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800291a:	f7ff fee3 	bl	80026e4 <HAL_GetTick>
 800291e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	6833      	ldr	r3, [r6, #0]
 8002922:	423b      	tst	r3, r7
 8002924:	d1ef      	bne.n	8002906 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002926:	f7ff fedd 	bl	80026e4 <HAL_GetTick>
 800292a:	9b01      	ldr	r3, [sp, #4]
 800292c:	1ac0      	subs	r0, r0, r3
 800292e:	2864      	cmp	r0, #100	; 0x64
 8002930:	d9f6      	bls.n	8002920 <HAL_RCC_OscConfig+0x22c>
 8002932:	e740      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002934:	2201      	movs	r2, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d114      	bne.n	8002964 <HAL_RCC_OscConfig+0x270>
 800293a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293e:	4393      	bics	r3, r2
 8002940:	6223      	str	r3, [r4, #32]
 8002942:	6a23      	ldr	r3, [r4, #32]
 8002944:	3203      	adds	r2, #3
 8002946:	4393      	bics	r3, r2
 8002948:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800294a:	f7ff fecb 	bl	80026e4 <HAL_GetTick>
 800294e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	6a23      	ldr	r3, [r4, #32]
 8002952:	423b      	tst	r3, r7
 8002954:	d016      	beq.n	8002984 <HAL_RCC_OscConfig+0x290>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7ff fec5 	bl	80026e4 <HAL_GetTick>
 800295a:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_RCC_OscConfig+0x314>)
 800295c:	1b80      	subs	r0, r0, r6
 800295e:	4298      	cmp	r0, r3
 8002960:	d9f6      	bls.n	8002950 <HAL_RCC_OscConfig+0x25c>
 8002962:	e728      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	2b05      	cmp	r3, #5
 8002966:	d116      	bne.n	8002996 <HAL_RCC_OscConfig+0x2a2>
 8002968:	6a21      	ldr	r1, [r4, #32]
 800296a:	3b01      	subs	r3, #1
 800296c:	430b      	orrs	r3, r1
 800296e:	6223      	str	r3, [r4, #32]
 8002970:	6a23      	ldr	r3, [r4, #32]
 8002972:	431a      	orrs	r2, r3
 8002974:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8002976:	f7ff feb5 	bl	80026e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800297c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297e:	6a23      	ldr	r3, [r4, #32]
 8002980:	423b      	tst	r3, r7
 8002982:	d00f      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8002984:	9b00      	ldr	r3, [sp, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d000      	beq.n	800298c <HAL_RCC_OscConfig+0x298>
 800298a:	e6c5      	b.n	8002718 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	69e3      	ldr	r3, [r4, #28]
 800298e:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <HAL_RCC_OscConfig+0x318>)
 8002990:	4013      	ands	r3, r2
 8002992:	61e3      	str	r3, [r4, #28]
 8002994:	e6c0      	b.n	8002718 <HAL_RCC_OscConfig+0x24>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002996:	6a23      	ldr	r3, [r4, #32]
 8002998:	4393      	bics	r3, r2
 800299a:	2204      	movs	r2, #4
 800299c:	6223      	str	r3, [r4, #32]
 800299e:	6a23      	ldr	r3, [r4, #32]
 80029a0:	4393      	bics	r3, r2
 80029a2:	e7b5      	b.n	8002910 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7ff fe9e 	bl	80026e4 <HAL_GetTick>
 80029a8:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <HAL_RCC_OscConfig+0x314>)
 80029aa:	1b80      	subs	r0, r0, r6
 80029ac:	4298      	cmp	r0, r3
 80029ae:	d9e6      	bls.n	800297e <HAL_RCC_OscConfig+0x28a>
 80029b0:	e701      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029b2:	f7ff fe97 	bl	80026e4 <HAL_GetTick>
 80029b6:	1b80      	subs	r0, r0, r6
 80029b8:	2802      	cmp	r0, #2
 80029ba:	d800      	bhi.n	80029be <HAL_RCC_OscConfig+0x2ca>
 80029bc:	e6bf      	b.n	800273e <HAL_RCC_OscConfig+0x4a>
 80029be:	e6fa      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80029c0:	3205      	adds	r2, #5
 80029c2:	d103      	bne.n	80029cc <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80029c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80029c6:	439a      	bics	r2, r3
 80029c8:	6362      	str	r2, [r4, #52]	; 0x34
 80029ca:	e6bc      	b.n	8002746 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80029cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029ce:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80029d0:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80029d2:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80029d4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80029d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029d8:	4393      	bics	r3, r2
 80029da:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80029dc:	f7ff fe82 	bl	80026e4 <HAL_GetTick>
 80029e0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029e4:	423b      	tst	r3, r7
 80029e6:	d100      	bne.n	80029ea <HAL_RCC_OscConfig+0x2f6>
 80029e8:	e6b4      	b.n	8002754 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029ea:	f7ff fe7b 	bl	80026e4 <HAL_GetTick>
 80029ee:	1b80      	subs	r0, r0, r6
 80029f0:	2802      	cmp	r0, #2
 80029f2:	d9f6      	bls.n	80029e2 <HAL_RCC_OscConfig+0x2ee>
 80029f4:	e6df      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	40021000 	.word	0x40021000
 80029fc:	fffeffff 	.word	0xfffeffff
 8002a00:	fffbffff 	.word	0xfffbffff
 8002a04:	40007000 	.word	0x40007000
 8002a08:	00001388 	.word	0x00001388
 8002a0c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a10:	220c      	movs	r2, #12
 8002a12:	4c26      	ldr	r4, [pc, #152]	; (8002aac <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a16:	6863      	ldr	r3, [r4, #4]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d100      	bne.n	8002a20 <HAL_RCC_OscConfig+0x32c>
 8002a1e:	e6b3      	b.n	8002788 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <HAL_RCC_OscConfig+0x3bc>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a28:	2902      	cmp	r1, #2
 8002a2a:	d12f      	bne.n	8002a8c <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fe5a 	bl	80026e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a30:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002a32:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	04bf      	lsls	r7, r7, #18
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	423b      	tst	r3, r7
 8002a3a:	d121      	bne.n	8002a80 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a40:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a42:	4393      	bics	r3, r2
 8002a44:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a46:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002a4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002a50:	6862      	ldr	r2, [r4, #4]
 8002a52:	430b      	orrs	r3, r1
 8002a54:	4917      	ldr	r1, [pc, #92]	; (8002ab4 <HAL_RCC_OscConfig+0x3c0>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	045b      	lsls	r3, r3, #17
 8002a62:	4313      	orrs	r3, r2
 8002a64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002a66:	f7ff fe3d 	bl	80026e4 <HAL_GetTick>
 8002a6a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	4233      	tst	r3, r6
 8002a70:	d000      	beq.n	8002a74 <HAL_RCC_OscConfig+0x380>
 8002a72:	e673      	b.n	800275c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7ff fe36 	bl	80026e4 <HAL_GetTick>
 8002a78:	1b40      	subs	r0, r0, r5
 8002a7a:	2802      	cmp	r0, #2
 8002a7c:	d9f6      	bls.n	8002a6c <HAL_RCC_OscConfig+0x378>
 8002a7e:	e69a      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7ff fe30 	bl	80026e4 <HAL_GetTick>
 8002a84:	1b80      	subs	r0, r0, r6
 8002a86:	2802      	cmp	r0, #2
 8002a88:	d9d5      	bls.n	8002a36 <HAL_RCC_OscConfig+0x342>
 8002a8a:	e694      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002a8c:	f7ff fe2a 	bl	80026e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a90:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002a92:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	04b6      	lsls	r6, r6, #18
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	4233      	tst	r3, r6
 8002a9a:	d100      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3aa>
 8002a9c:	e65e      	b.n	800275c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7ff fe21 	bl	80026e4 <HAL_GetTick>
 8002aa2:	1b40      	subs	r0, r0, r5
 8002aa4:	2802      	cmp	r0, #2
 8002aa6:	d9f6      	bls.n	8002a96 <HAL_RCC_OscConfig+0x3a2>
 8002aa8:	e685      	b.n	80027b6 <HAL_RCC_OscConfig+0xc2>
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	feffffff 	.word	0xfeffffff
 8002ab4:	ffc2ffff 	.word	0xffc2ffff

08002ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002aba:	2201      	movs	r2, #1
 8002abc:	4c3e      	ldr	r4, [pc, #248]	; (8002bb8 <HAL_RCC_ClockConfig+0x100>)
{
 8002abe:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ac0:	6823      	ldr	r3, [r4, #0]
{
 8002ac2:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	428b      	cmp	r3, r1
 8002ac8:	d312      	bcc.n	8002af0 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aca:	682a      	ldr	r2, [r5, #0]
 8002acc:	0793      	lsls	r3, r2, #30
 8002ace:	d419      	bmi.n	8002b04 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad0:	07d3      	lsls	r3, r2, #31
 8002ad2:	d41f      	bmi.n	8002b14 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	401a      	ands	r2, r3
 8002ada:	42ba      	cmp	r2, r7
 8002adc:	d85d      	bhi.n	8002b9a <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	075b      	lsls	r3, r3, #29
 8002ae2:	d461      	bmi.n	8002ba8 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 8002ae4:	22e1      	movs	r2, #225	; 0xe1
 8002ae6:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <HAL_RCC_ClockConfig+0x104>)
 8002ae8:	03d2      	lsls	r2, r2, #15
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8002aea:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 8002aec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	4393      	bics	r3, r2
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	4013      	ands	r3, r2
 8002afc:	428b      	cmp	r3, r1
 8002afe:	d0e4      	beq.n	8002aca <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8002b00:	2001      	movs	r0, #1
}
 8002b02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	20f0      	movs	r0, #240	; 0xf0
 8002b06:	492e      	ldr	r1, [pc, #184]	; (8002bc0 <HAL_RCC_ClockConfig+0x108>)
 8002b08:	684b      	ldr	r3, [r1, #4]
 8002b0a:	4383      	bics	r3, r0
 8002b0c:	68a8      	ldr	r0, [r5, #8]
 8002b0e:	4303      	orrs	r3, r0
 8002b10:	604b      	str	r3, [r1, #4]
 8002b12:	e7dd      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b14:	4e2a      	ldr	r6, [pc, #168]	; (8002bc0 <HAL_RCC_ClockConfig+0x108>)
 8002b16:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b18:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	2a01      	cmp	r2, #1
 8002b1c:	d11a      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	039b      	lsls	r3, r3, #14
 8002b20:	d5ee      	bpl.n	8002b00 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	2103      	movs	r1, #3
 8002b24:	6873      	ldr	r3, [r6, #4]
 8002b26:	438b      	bics	r3, r1
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002b2c:	f7ff fdda 	bl	80026e4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b30:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002b32:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d115      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b38:	220c      	movs	r2, #12
 8002b3a:	6873      	ldr	r3, [r6, #4]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d0c8      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b42:	f7ff fdcf 	bl	80026e4 <HAL_GetTick>
 8002b46:	9b01      	ldr	r3, [sp, #4]
 8002b48:	1ac0      	subs	r0, r0, r3
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCC_ClockConfig+0x10c>)
 8002b4c:	4298      	cmp	r0, r3
 8002b4e:	d9f3      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x80>
          return HAL_TIMEOUT;
 8002b50:	2003      	movs	r0, #3
 8002b52:	e7d6      	b.n	8002b02 <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b54:	2a02      	cmp	r2, #2
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	d4e2      	bmi.n	8002b22 <HAL_RCC_ClockConfig+0x6a>
 8002b5c:	e7d0      	b.n	8002b00 <HAL_RCC_ClockConfig+0x48>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	079b      	lsls	r3, r3, #30
 8002b60:	d4df      	bmi.n	8002b22 <HAL_RCC_ClockConfig+0x6a>
 8002b62:	e7cd      	b.n	8002b00 <HAL_RCC_ClockConfig+0x48>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d012      	beq.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b68:	220c      	movs	r2, #12
 8002b6a:	6873      	ldr	r3, [r6, #4]
 8002b6c:	4213      	tst	r3, r2
 8002b6e:	d0b1      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7ff fdb8 	bl	80026e4 <HAL_GetTick>
 8002b74:	9b01      	ldr	r3, [sp, #4]
 8002b76:	1ac0      	subs	r0, r0, r3
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_RCC_ClockConfig+0x10c>)
 8002b7a:	4298      	cmp	r0, r3
 8002b7c:	d9f4      	bls.n	8002b68 <HAL_RCC_ClockConfig+0xb0>
 8002b7e:	e7e7      	b.n	8002b50 <HAL_RCC_ClockConfig+0x98>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7ff fdb0 	bl	80026e4 <HAL_GetTick>
 8002b84:	9b01      	ldr	r3, [sp, #4]
 8002b86:	1ac0      	subs	r0, r0, r3
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_RCC_ClockConfig+0x10c>)
 8002b8a:	4298      	cmp	r0, r3
 8002b8c:	d8e0      	bhi.n	8002b50 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b8e:	220c      	movs	r2, #12
 8002b90:	6873      	ldr	r3, [r6, #4]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d1f3      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xc8>
 8002b98:	e79c      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	439a      	bics	r2, r3
 8002b9e:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ba0:	6822      	ldr	r2, [r4, #0]
 8002ba2:	421a      	tst	r2, r3
 8002ba4:	d09b      	beq.n	8002ade <HAL_RCC_ClockConfig+0x26>
 8002ba6:	e7ab      	b.n	8002b00 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_RCC_ClockConfig+0x108>)
 8002baa:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <HAL_RCC_ClockConfig+0x110>)
 8002bac:	6853      	ldr	r3, [r2, #4]
 8002bae:	400b      	ands	r3, r1
 8002bb0:	68e9      	ldr	r1, [r5, #12]
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	6053      	str	r3, [r2, #4]
 8002bb6:	e795      	b.n	8002ae4 <HAL_RCC_ClockConfig+0x2c>
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	20000104 	.word	0x20000104
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	00001388 	.word	0x00001388
 8002bc8:	fffff8ff 	.word	0xfffff8ff

08002bcc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00U;
 8002bcc:	2300      	movs	r3, #0
{ 
 8002bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002bd2:	680a      	ldr	r2, [r1, #0]
 8002bd4:	0014      	movs	r4, r2
 8002bd6:	40dc      	lsrs	r4, r3
 8002bd8:	d101      	bne.n	8002bde <HAL_GPIO_Init+0x12>
      }
    }
    
    position++;
  } 
}
 8002bda:	b007      	add	sp, #28
 8002bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002bde:	2601      	movs	r6, #1
 8002be0:	0014      	movs	r4, r2
 8002be2:	409e      	lsls	r6, r3
 8002be4:	4034      	ands	r4, r6
 8002be6:	9402      	str	r4, [sp, #8]
    if(iocurrent)
 8002be8:	4232      	tst	r2, r6
 8002bea:	d100      	bne.n	8002bee <HAL_GPIO_Init+0x22>
 8002bec:	e092      	b.n	8002d14 <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002bee:	684a      	ldr	r2, [r1, #4]
 8002bf0:	0015      	movs	r5, r2
 8002bf2:	9201      	str	r2, [sp, #4]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	4395      	bics	r5, r2
 8002bf8:	9503      	str	r5, [sp, #12]
 8002bfa:	2d02      	cmp	r5, #2
 8002bfc:	d10d      	bne.n	8002c1a <HAL_GPIO_Init+0x4e>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002bfe:	2407      	movs	r4, #7
 8002c00:	250f      	movs	r5, #15
 8002c02:	401c      	ands	r4, r3
 8002c04:	00a4      	lsls	r4, r4, #2
 8002c06:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3];
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	1882      	adds	r2, r0, r2
 8002c0e:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002c10:	43af      	bics	r7, r5
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002c12:	690d      	ldr	r5, [r1, #16]
 8002c14:	40a5      	lsls	r5, r4
 8002c16:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8002c18:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	005c      	lsls	r4, r3, #1
 8002c1e:	40a2      	lsls	r2, r4
 8002c20:	43d5      	mvns	r5, r2
 8002c22:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c24:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002c26:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002c28:	4397      	bics	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2a:	9a01      	ldr	r2, [sp, #4]
 8002c2c:	402a      	ands	r2, r5
 8002c2e:	40a2      	lsls	r2, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c30:	9d03      	ldr	r5, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c32:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c34:	3d01      	subs	r5, #1
      GPIOx->MODER = temp;
 8002c36:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c38:	2d01      	cmp	r5, #1
 8002c3a:	d80f      	bhi.n	8002c5c <HAL_GPIO_Init+0x90>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c3c:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR; 
 8002c3e:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c40:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002c42:	68ca      	ldr	r2, [r1, #12]
 8002c44:	40a2      	lsls	r2, r4
 8002c46:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8002c48:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8002c4a:	6845      	ldr	r5, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c4c:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002c4e:	43b5      	bics	r5, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c50:	2601      	movs	r6, #1
 8002c52:	0912      	lsrs	r2, r2, #4
 8002c54:	4032      	ands	r2, r6
 8002c56:	409a      	lsls	r2, r3
 8002c58:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8002c5a:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5c:	4665      	mov	r5, ip
      temp = GPIOx->PUPDR;
 8002c5e:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c60:	402a      	ands	r2, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002c62:	688d      	ldr	r5, [r1, #8]
 8002c64:	40a5      	lsls	r5, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002c66:	2480      	movs	r4, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002c68:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8002c6a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002c6c:	9a01      	ldr	r2, [sp, #4]
 8002c6e:	0564      	lsls	r4, r4, #21
 8002c70:	4222      	tst	r2, r4
 8002c72:	d04f      	beq.n	8002d14 <HAL_GPIO_Init+0x148>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c74:	2501      	movs	r5, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002c76:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <HAL_GPIO_Init+0x14c>)
 8002c7a:	6994      	ldr	r4, [r2, #24]
 8002c7c:	432c      	orrs	r4, r5
 8002c7e:	6194      	str	r4, [r2, #24]
 8002c80:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8002c82:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c84:	402a      	ands	r2, r5
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002c86:	3502      	adds	r5, #2
 8002c88:	401d      	ands	r5, r3
 8002c8a:	00ad      	lsls	r5, r5, #2
 8002c8c:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8e:	9205      	str	r2, [sp, #20]
 8002c90:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8002c92:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_GPIO_Init+0x150>)
 8002c94:	00a4      	lsls	r4, r4, #2
 8002c96:	18a4      	adds	r4, r4, r2
 8002c98:	68a6      	ldr	r6, [r4, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9a:	2200      	movs	r2, #0
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002c9c:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	2790      	movs	r7, #144	; 0x90
 8002ca0:	05ff      	lsls	r7, r7, #23
 8002ca2:	42b8      	cmp	r0, r7
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_GPIO_Init+0xf4>
 8002ca6:	4f1e      	ldr	r7, [pc, #120]	; (8002d20 <HAL_GPIO_Init+0x154>)
 8002ca8:	3201      	adds	r2, #1
 8002caa:	42b8      	cmp	r0, r7
 8002cac:	d008      	beq.n	8002cc0 <HAL_GPIO_Init+0xf4>
 8002cae:	4f1d      	ldr	r7, [pc, #116]	; (8002d24 <HAL_GPIO_Init+0x158>)
 8002cb0:	3201      	adds	r2, #1
 8002cb2:	42b8      	cmp	r0, r7
 8002cb4:	d004      	beq.n	8002cc0 <HAL_GPIO_Init+0xf4>
 8002cb6:	4f1c      	ldr	r7, [pc, #112]	; (8002d28 <HAL_GPIO_Init+0x15c>)
 8002cb8:	3201      	adds	r2, #1
 8002cba:	42b8      	cmp	r0, r7
 8002cbc:	d000      	beq.n	8002cc0 <HAL_GPIO_Init+0xf4>
 8002cbe:	3202      	adds	r2, #2
 8002cc0:	40aa      	lsls	r2, r5
 8002cc2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cc4:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8002cc6:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cc8:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8002cca:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8002ccc:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cce:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cd0:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 8002cd2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd4:	03ff      	lsls	r7, r7, #15
 8002cd6:	d401      	bmi.n	8002cdc <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cd8:	0035      	movs	r5, r6
 8002cda:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8002cdc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002cde:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8002ce0:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce2:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8002ce4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce6:	03bf      	lsls	r7, r7, #14
 8002ce8:	d401      	bmi.n	8002cee <HAL_GPIO_Init+0x122>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002cea:	0035      	movs	r5, r6
 8002cec:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8002cee:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002cf0:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8002cf2:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf4:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8002cf6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf8:	02ff      	lsls	r7, r7, #11
 8002cfa:	d401      	bmi.n	8002d00 <HAL_GPIO_Init+0x134>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002cfc:	0035      	movs	r5, r6
 8002cfe:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002d00:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002d02:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8002d04:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d06:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8002d08:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d0a:	02bf      	lsls	r7, r7, #10
 8002d0c:	d401      	bmi.n	8002d12 <HAL_GPIO_Init+0x146>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002d0e:	4025      	ands	r5, r4
 8002d10:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002d12:	60d6      	str	r6, [r2, #12]
    position++;
 8002d14:	3301      	adds	r3, #1
 8002d16:	e75c      	b.n	8002bd2 <HAL_GPIO_Init+0x6>
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	48000400 	.word	0x48000400
 8002d24:	48000800 	.word	0x48000800
 8002d28:	48000c00 	.word	0x48000c00
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d30:	2a00      	cmp	r2, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d34:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8002d36:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d38:	6281      	str	r1, [r0, #40]	; 0x28
}										  
 8002d3a:	e7fc      	b.n	8002d36 <HAL_GPIO_WritePin+0x6>

08002d3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	0004      	movs	r4, r0
 8002d40:	000d      	movs	r5, r1
 8002d42:	0017      	movs	r7, r2
 8002d44:	001e      	movs	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	69d3      	ldr	r3, [r2, #28]
 8002d4a:	402b      	ands	r3, r5
 8002d4c:	1b5b      	subs	r3, r3, r5
 8002d4e:	4259      	negs	r1, r3
 8002d50:	414b      	adcs	r3, r1
 8002d52:	42bb      	cmp	r3, r7
 8002d54:	d001      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d56:	2000      	movs	r0, #0
 8002d58:	e018      	b.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8002d5a:	9b06      	ldr	r3, [sp, #24]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	d0f3      	beq.n	8002d48 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d60:	9b06      	ldr	r3, [sp, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d113      	bne.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	490c      	ldr	r1, [pc, #48]	; (8002d9c <UART_WaitOnFlagUntilTimeout+0x60>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8002d6c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d6e:	400a      	ands	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	31a3      	adds	r1, #163	; 0xa3
 8002d76:	31ff      	adds	r1, #255	; 0xff
 8002d78:	438a      	bics	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002d7c:	0022      	movs	r2, r4
 8002d7e:	2320      	movs	r3, #32
 8002d80:	3269      	adds	r2, #105	; 0x69
 8002d82:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8002d84:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8002d86:	2300      	movs	r3, #0
 8002d88:	3468      	adds	r4, #104	; 0x68
 8002d8a:	7023      	strb	r3, [r4, #0]
}
 8002d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d8e:	f7ff fca9 	bl	80026e4 <HAL_GetTick>
 8002d92:	9b06      	ldr	r3, [sp, #24]
 8002d94:	1b80      	subs	r0, r0, r6
 8002d96:	4298      	cmp	r0, r3
 8002d98:	d9d5      	bls.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xa>
 8002d9a:	e7e4      	b.n	8002d66 <UART_WaitOnFlagUntilTimeout+0x2a>
 8002d9c:	fffffe5f 	.word	0xfffffe5f

08002da0 <UART_SetConfig>:

  return HAL_OK;
}

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da0:	0003      	movs	r3, r0
 8002da2:	b570      	push	{r4, r5, r6, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	691d      	ldr	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002da8:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002daa:	432a      	orrs	r2, r5
 8002dac:	695d      	ldr	r5, [r3, #20]
 8002dae:	69c1      	ldr	r1, [r0, #28]
 8002db0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002db2:	6820      	ldr	r0, [r4, #0]
 8002db4:	4d33      	ldr	r5, [pc, #204]	; (8002e84 <UART_SetConfig+0xe4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002db6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002db8:	4028      	ands	r0, r5
 8002dba:	4302      	orrs	r2, r0
 8002dbc:	6022      	str	r2, [r4, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dbe:	6862      	ldr	r2, [r4, #4]
 8002dc0:	4831      	ldr	r0, [pc, #196]	; (8002e88 <UART_SetConfig+0xe8>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002dc2:	6a1d      	ldr	r5, [r3, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc4:	4002      	ands	r2, r0
 8002dc6:	68d8      	ldr	r0, [r3, #12]
 8002dc8:	4302      	orrs	r2, r0
 8002dca:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002dcc:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002dce:	68a0      	ldr	r0, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002dd0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002dd2:	4d2e      	ldr	r5, [pc, #184]	; (8002e8c <UART_SetConfig+0xec>)
 8002dd4:	4028      	ands	r0, r5
 8002dd6:	4302      	orrs	r2, r0

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dd8:	2003      	movs	r0, #3
 8002dda:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002ddc:	60a2      	str	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dde:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <UART_SetConfig+0xf0>)
 8002de0:	022d      	lsls	r5, r5, #8
 8002de2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002de4:	4002      	ands	r2, r0
 8002de6:	3a01      	subs	r2, #1
 8002de8:	2a02      	cmp	r2, #2
 8002dea:	d843      	bhi.n	8002e74 <UART_SetConfig+0xd4>
 8002dec:	4829      	ldr	r0, [pc, #164]	; (8002e94 <UART_SetConfig+0xf4>)
 8002dee:	5c80      	ldrb	r0, [r0, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df0:	42a9      	cmp	r1, r5
 8002df2:	d120      	bne.n	8002e36 <UART_SetConfig+0x96>
  {
    switch (clocksource)
 8002df4:	2808      	cmp	r0, #8
 8002df6:	d81b      	bhi.n	8002e30 <UART_SetConfig+0x90>
 8002df8:	f7fd fa12 	bl	8000220 <__gnu_thumb1_case_uqi>
 8002dfc:	1a051a3e 	.word	0x1a051a3e
 8002e00:	1a1a1a3e 	.word	0x1a1a1a3e
 8002e04:	15          	.byte	0x15
 8002e05:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <UART_SetConfig+0xf8>)
 8002e0a:	0848      	lsrs	r0, r1, #1
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e0c:	18c0      	adds	r0, r0, r3
 8002e0e:	f7fd fa11 	bl	8000234 <__udivsi3>
 8002e12:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e14:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002e16:	0019      	movs	r1, r3
 8002e18:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e1a:	071b      	lsls	r3, r3, #28
    brrtemp = usartdiv & 0xFFF0U;
 8002e1c:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e1e:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8002e20:	430b      	orrs	r3, r1
 8002e22:	60e3      	str	r3, [r4, #12]
    }
  }

  return ret;

}
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	0848      	lsrs	r0, r1, #1
 8002e2c:	025b      	lsls	r3, r3, #9
 8002e2e:	e7ed      	b.n	8002e0c <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e30:	2001      	movs	r0, #1
 8002e32:	2300      	movs	r3, #0
 8002e34:	e7ef      	b.n	8002e16 <UART_SetConfig+0x76>
    switch (clocksource)
 8002e36:	2808      	cmp	r0, #8
 8002e38:	d81a      	bhi.n	8002e70 <UART_SetConfig+0xd0>
 8002e3a:	f7fd f9f1 	bl	8000220 <__gnu_thumb1_case_uqi>
 8002e3e:	190f      	.short	0x190f
 8002e40:	190f1905 	.word	0x190f1905
 8002e44:	1919      	.short	0x1919
 8002e46:	14          	.byte	0x14
 8002e47:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <UART_SetConfig+0xfc>)
 8002e4c:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e4e:	18c0      	adds	r0, r0, r3
 8002e50:	f7fd f9f0 	bl	8000234 <__udivsi3>
 8002e54:	b280      	uxth	r0, r0
 8002e56:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e58:	2000      	movs	r0, #0
        break;
 8002e5a:	e7e3      	b.n	8002e24 <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	23e1      	movs	r3, #225	; 0xe1
 8002e60:	0848      	lsrs	r0, r1, #1
 8002e62:	03db      	lsls	r3, r3, #15
 8002e64:	e7f3      	b.n	8002e4e <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	0848      	lsrs	r0, r1, #1
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	e7ee      	b.n	8002e4e <UART_SetConfig+0xae>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e70:	2001      	movs	r0, #1
  return ret;
 8002e72:	e7d7      	b.n	8002e24 <UART_SetConfig+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e74:	42a9      	cmp	r1, r5
 8002e76:	d1f1      	bne.n	8002e5c <UART_SetConfig+0xbc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	23e1      	movs	r3, #225	; 0xe1
 8002e7c:	0848      	lsrs	r0, r1, #1
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	e7c4      	b.n	8002e0c <UART_SetConfig+0x6c>
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	ffff69f3 	.word	0xffff69f3
 8002e88:	ffffcfff 	.word	0xffffcfff
 8002e8c:	fffff4ff 	.word	0xfffff4ff
 8002e90:	40021000 	.word	0x40021000
 8002e94:	0800313c 	.word	0x0800313c
 8002e98:	01e84800 	.word	0x01e84800
 8002e9c:	00f42400 	.word	0x00f42400

08002ea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0xa>
  {
    return HAL_ERROR;
 8002ea6:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8002eaa:	0005      	movs	r5, r0
 8002eac:	3569      	adds	r5, #105	; 0x69
 8002eae:	782b      	ldrb	r3, [r5, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	3368      	adds	r3, #104	; 0x68
 8002eba:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002ebc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002ebe:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002ec0:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8002ec2:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	43b3      	bics	r3, r6
 8002eca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ecc:	f7ff ff68 	bl	8002da0 <UART_SetConfig>
 8002ed0:	42b0      	cmp	r0, r6
 8002ed2:	d0e8      	beq.n	8002ea6 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	490a      	ldr	r1, [pc, #40]	; (8002f00 <HAL_UART_Init+0x60>)
 8002ed8:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eda:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002edc:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002ede:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002ee0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4316      	orrs	r6, r2
  huart->RxState = HAL_UART_STATE_READY;
 8002eec:	0022      	movs	r2, r4
  __HAL_UART_ENABLE(huart);
 8002eee:	601e      	str	r6, [r3, #0]
  huart->gState  = HAL_UART_STATE_READY;
 8002ef0:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef2:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8002ef6:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8002ef8:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8002efa:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8002efc:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002efe:	e7d3      	b.n	8002ea8 <HAL_UART_Init+0x8>
 8002f00:	fffff7ff 	.word	0xfffff7ff

08002f04 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f06:	b085      	sub	sp, #20
 8002f08:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	336a      	adds	r3, #106	; 0x6a
{
 8002f0e:	0017      	movs	r7, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002f10:	781a      	ldrb	r2, [r3, #0]
{
 8002f12:	0004      	movs	r4, r0
 8002f14:	000d      	movs	r5, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002f18:	2a20      	cmp	r2, #32
 8002f1a:	d139      	bne.n	8002f90 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 8002f1c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8002f1e:	2900      	cmp	r1, #0
 8002f20:	d036      	beq.n	8002f90 <HAL_UART_Receive+0x8c>
 8002f22:	2f00      	cmp	r7, #0
 8002f24:	d034      	beq.n	8002f90 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	68a1      	ldr	r1, [r4, #8]
 8002f2a:	0152      	lsls	r2, r2, #5
 8002f2c:	4291      	cmp	r1, r2
 8002f2e:	d104      	bne.n	8002f3a <HAL_UART_Receive+0x36>
 8002f30:	6922      	ldr	r2, [r4, #16]
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8002f36:	4205      	tst	r5, r0
 8002f38:	d12a      	bne.n	8002f90 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 8002f3a:	0022      	movs	r2, r4
 8002f3c:	3268      	adds	r2, #104	; 0x68
 8002f3e:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 8002f40:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002f42:	2901      	cmp	r1, #1
 8002f44:	d024      	beq.n	8002f90 <HAL_UART_Receive+0x8c>
 8002f46:	2101      	movs	r1, #1
 8002f48:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f4e:	3222      	adds	r2, #34	; 0x22
 8002f50:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002f52:	f7ff fbc7 	bl	80026e4 <HAL_GetTick>
    huart->RxXferSize = Size;
 8002f56:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8002f5c:	3358      	adds	r3, #88	; 0x58
 8002f5e:	801f      	strh	r7, [r3, #0]
    huart->RxXferCount = Size;
 8002f60:	805f      	strh	r7, [r3, #2]
    tickstart = HAL_GetTick();
 8002f62:	0006      	movs	r6, r0
    UART_MASK_COMPUTATION(huart);
 8002f64:	0149      	lsls	r1, r1, #5
 8002f66:	3304      	adds	r3, #4
 8002f68:	428a      	cmp	r2, r1
 8002f6a:	d115      	bne.n	8002f98 <HAL_UART_Receive+0x94>
 8002f6c:	6922      	ldr	r2, [r4, #16]
 8002f6e:	2a00      	cmp	r2, #0
 8002f70:	d110      	bne.n	8002f94 <HAL_UART_Receive+0x90>
 8002f72:	4a1f      	ldr	r2, [pc, #124]	; (8002ff0 <HAL_UART_Receive+0xec>)
 8002f74:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 8002f76:	881f      	ldrh	r7, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002f78:	0022      	movs	r2, r4
 8002f7a:	325a      	adds	r2, #90	; 0x5a
 8002f7c:	8813      	ldrh	r3, [r2, #0]
 8002f7e:	b298      	uxth	r0, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d110      	bne.n	8002fa6 <HAL_UART_Receive+0xa2>
    huart->RxState = HAL_UART_STATE_READY;
 8002f84:	0023      	movs	r3, r4
 8002f86:	2220      	movs	r2, #32
 8002f88:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 8002f8a:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002f8e:	7020      	strb	r0, [r4, #0]
  }
}
 8002f90:	b005      	add	sp, #20
 8002f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8002f94:	22ff      	movs	r2, #255	; 0xff
 8002f96:	e7ed      	b.n	8002f74 <HAL_UART_Receive+0x70>
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	d1ec      	bne.n	8002f76 <HAL_UART_Receive+0x72>
 8002f9c:	6922      	ldr	r2, [r4, #16]
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d0f8      	beq.n	8002f94 <HAL_UART_Receive+0x90>
 8002fa2:	227f      	movs	r2, #127	; 0x7f
 8002fa4:	e7e6      	b.n	8002f74 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 8002fa6:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa8:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fb0:	9b03      	ldr	r3, [sp, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	0020      	movs	r0, r4
 8002fb8:	0033      	movs	r3, r6
 8002fba:	f7ff febf 	bl	8002d3c <UART_WaitOnFlagUntilTimeout>
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	d113      	bne.n	8002fea <HAL_UART_Receive+0xe6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc2:	68a2      	ldr	r2, [r4, #8]
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	0152      	lsls	r2, r2, #5
 8002fcc:	4291      	cmp	r1, r2
 8002fce:	d107      	bne.n	8002fe0 <HAL_UART_Receive+0xdc>
 8002fd0:	6922      	ldr	r2, [r4, #16]
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_UART_Receive+0xdc>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fd8:	403b      	ands	r3, r7
 8002fda:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 8002fdc:	3502      	adds	r5, #2
 8002fde:	e7cb      	b.n	8002f78 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fe0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fe2:	403b      	ands	r3, r7
 8002fe4:	702b      	strb	r3, [r5, #0]
 8002fe6:	3501      	adds	r5, #1
 8002fe8:	e7c6      	b.n	8002f78 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8002fea:	2003      	movs	r0, #3
 8002fec:	e7d0      	b.n	8002f90 <HAL_UART_Receive+0x8c>
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	000001ff 	.word	0x000001ff

08002ff4 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	3369      	adds	r3, #105	; 0x69
 8002ffe:	9302      	str	r3, [sp, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
{
 8003002:	0004      	movs	r4, r0
 8003004:	000d      	movs	r5, r1
 8003006:	0016      	movs	r6, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003008:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 800300a:	2b20      	cmp	r3, #32
 800300c:	d148      	bne.n	80030a0 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800300e:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8003010:	2900      	cmp	r1, #0
 8003012:	d045      	beq.n	80030a0 <HAL_UART_Transmit+0xac>
 8003014:	2a00      	cmp	r2, #0
 8003016:	d043      	beq.n	80030a0 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	68a2      	ldr	r2, [r4, #8]
 800301c:	015b      	lsls	r3, r3, #5
 800301e:	429a      	cmp	r2, r3
 8003020:	d104      	bne.n	800302c <HAL_UART_Transmit+0x38>
 8003022:	6923      	ldr	r3, [r4, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_UART_Transmit+0x38>
      if((((uint32_t)pData)&1U) != 0U)
 8003028:	4201      	tst	r1, r0
 800302a:	d139      	bne.n	80030a0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800302c:	0023      	movs	r3, r4
 800302e:	3368      	adds	r3, #104	; 0x68
 8003030:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8003032:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003034:	2a01      	cmp	r2, #1
 8003036:	d033      	beq.n	80030a0 <HAL_UART_Transmit+0xac>
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303c:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800303e:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003042:	3321      	adds	r3, #33	; 0x21
 8003044:	7013      	strb	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003046:	f7ff fb4d 	bl	80026e4 <HAL_GetTick>
    huart->TxXferSize = Size;
 800304a:	0023      	movs	r3, r4
 800304c:	3350      	adds	r3, #80	; 0x50
 800304e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003050:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003052:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8003054:	0007      	movs	r7, r0
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003056:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8003058:	0021      	movs	r1, r4
 800305a:	3152      	adds	r1, #82	; 0x52
 800305c:	880b      	ldrh	r3, [r1, #0]
 800305e:	b29a      	uxth	r2, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10e      	bne.n	8003082 <HAL_UART_Transmit+0x8e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003064:	9b03      	ldr	r3, [sp, #12]
 8003066:	2140      	movs	r1, #64	; 0x40
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	0020      	movs	r0, r4
 800306c:	003b      	movs	r3, r7
 800306e:	f7ff fe65 	bl	8002d3c <UART_WaitOnFlagUntilTimeout>
 8003072:	2800      	cmp	r0, #0
 8003074:	d113      	bne.n	800309e <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8003076:	2320      	movs	r3, #32
 8003078:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(huart);
 800307a:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800307c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 800307e:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003080:	e00e      	b.n	80030a0 <HAL_UART_Transmit+0xac>
      huart->TxXferCount--;
 8003082:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003084:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8003086:	3b01      	subs	r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800308c:	9b03      	ldr	r3, [sp, #12]
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	0020      	movs	r0, r4
 8003094:	003b      	movs	r3, r7
 8003096:	f7ff fe51 	bl	8002d3c <UART_WaitOnFlagUntilTimeout>
 800309a:	2800      	cmp	r0, #0
 800309c:	d002      	beq.n	80030a4 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 800309e:	2003      	movs	r0, #3
  }
}
 80030a0:	b005      	add	sp, #20
 80030a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a4:	68a3      	ldr	r3, [r4, #8]
 80030a6:	6822      	ldr	r2, [r4, #0]
 80030a8:	42b3      	cmp	r3, r6
 80030aa:	d108      	bne.n	80030be <HAL_UART_Transmit+0xca>
 80030ac:	6923      	ldr	r3, [r4, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80030b2:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80030b4:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80030b6:	05db      	lsls	r3, r3, #23
 80030b8:	0ddb      	lsrs	r3, r3, #23
 80030ba:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80030bc:	e7cc      	b.n	8003058 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80030be:	782b      	ldrb	r3, [r5, #0]
 80030c0:	3501      	adds	r5, #1
 80030c2:	8513      	strh	r3, [r2, #40]	; 0x28
 80030c4:	e7c8      	b.n	8003058 <HAL_UART_Transmit+0x64>
 80030c6:	0000      	movs	r0, r0

080030c8 <Reset_Handler>:
 80030c8:	2100      	movs	r1, #0
 80030ca:	e003      	b.n	80030d4 <LoopCopyDataInit>

080030cc <CopyDataInit>:
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <LoopForever+0x2>)
 80030ce:	585b      	ldr	r3, [r3, r1]
 80030d0:	5043      	str	r3, [r0, r1]
 80030d2:	3104      	adds	r1, #4

080030d4 <LoopCopyDataInit>:
 80030d4:	480a      	ldr	r0, [pc, #40]	; (8003100 <LoopForever+0x6>)
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <LoopForever+0xa>)
 80030d8:	1842      	adds	r2, r0, r1
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3f6      	bcc.n	80030cc <CopyDataInit>
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <LoopForever+0xe>)
 80030e0:	e002      	b.n	80030e8 <LoopFillZerobss>

080030e2 <FillZerobss>:
 80030e2:	2300      	movs	r3, #0
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	3204      	adds	r2, #4

080030e8 <LoopFillZerobss>:
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <LoopForever+0x12>)
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d3f9      	bcc.n	80030e2 <FillZerobss>
 80030ee:	e000      	b.n	80030f2 <LoopFillZerobss+0xa>
 80030f0:	bf00      	nop
 80030f2:	f7fd f92b 	bl	800034c <__libc_init_array>
 80030f6:	f7ff f8e3 	bl	80022c0 <main>

080030fa <LoopForever>:
 80030fa:	e7fe      	b.n	80030fa <LoopForever>
 80030fc:	08003274 	.word	0x08003274
 8003100:	20000000 	.word	0x20000000
 8003104:	2000016c 	.word	0x2000016c
 8003108:	2000016c 	.word	0x2000016c
 800310c:	20000310 	.word	0x20000310

08003110 <BusFault_Handler>:
 8003110:	e7fe      	b.n	8003110 <BusFault_Handler>
 8003112:	0000      	movs	r0, r0

08003114 <_init>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

08003120 <_fini>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr
