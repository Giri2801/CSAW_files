
basic-passwdcheck-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800122c  0800122c  0001122c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800134c  0800134c  00011354  2**0
                  CONTENTS
  4 .ARM          00000000  0800134c  0800134c  00011354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800134c  08001354  00011354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800134c  0800134c  0001134c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001350  08001350  00011350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000000  08001354  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000094  08001354  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00011354  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  0001137e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000056da  00000000  00000000  00011425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bbb  00000000  00000000  00016aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001b2b  00000000  00000000  000176ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000148  00000000  00000000  000191e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000370  00000000  00000000  0001932d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e9e  00000000  00000000  0001969d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000175c  00000000  00000000  0001b53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000036c  00000000  00000000  0001cc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0001d004  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  0001d148  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000000 	.word	0x20000000
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000000 	.word	0x20000000
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08001214 	.word	0x08001214

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	08001214 	.word	0x08001214

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4e0d      	ldr	r6, [pc, #52]	; (8000248 <__libc_init_array+0x38>)
 8000214:	4d0d      	ldr	r5, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x1a>
 800021c:	2400      	movs	r4, #0
 800021e:	3401      	adds	r4, #1
 8000220:	f855 3b04 	ldr.w	r3, [r5], #4
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0xe>
 800022a:	4e09      	ldr	r6, [pc, #36]	; (8000250 <__libc_init_array+0x40>)
 800022c:	4d09      	ldr	r5, [pc, #36]	; (8000254 <__libc_init_array+0x44>)
 800022e:	1b76      	subs	r6, r6, r5
 8000230:	f000 fff0 	bl	8001214 <_init>
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	d006      	beq.n	8000246 <__libc_init_array+0x36>
 8000238:	2400      	movs	r4, #0
 800023a:	3401      	adds	r4, #1
 800023c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000240:	4798      	blx	r3
 8000242:	42a6      	cmp	r6, r4
 8000244:	d1f9      	bne.n	800023a <__libc_init_array+0x2a>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	0800134c 	.word	0x0800134c
 800024c:	0800134c 	.word	0x0800134c
 8000250:	08001350 	.word	0x08001350
 8000254:	0800134c 	.word	0x0800134c

08000258 <delay_2_ms>:

  } while (*++c);
}

static void delay_2_ms()
{
 8000258:	b082      	sub	sp, #8
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 800025a:	2300      	movs	r3, #0
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000262:	9b01      	ldr	r3, [sp, #4]
 8000264:	4293      	cmp	r3, r2
 8000266:	d901      	bls.n	800026c <delay_2_ms+0x14>
    ;
  }
}
 8000268:	b002      	add	sp, #8
 800026a:	4770      	bx	lr
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 800026c:	9b01      	ldr	r3, [sp, #4]
 800026e:	3301      	adds	r3, #1
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	e7f6      	b.n	8000262 <delay_2_ms+0xa>

08000274 <my_puts>:
{
 8000274:	b510      	push	{r4, lr}
 8000276:	4604      	mov	r4, r0
    putch(*c);
 8000278:	7820      	ldrb	r0, [r4, #0]
 800027a:	f000 f95d 	bl	8000538 <putch>
  } while (*++c);
 800027e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1f8      	bne.n	8000278 <my_puts+0x4>
}
 8000286:	bd10      	pop	{r4, pc}

08000288 <my_read>:

void my_read(char *buf, int len)
{
 8000288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028a:	4604      	mov	r4, r0
 800028c:	460e      	mov	r6, r1
  for(int i = 0; i < len; i++) {
 800028e:	4605      	mov	r5, r0
 8000290:	1b2b      	subs	r3, r5, r4
 8000292:	429e      	cmp	r6, r3
 8000294:	dd0c      	ble.n	80002b0 <my_read+0x28>
    while (buf[i] = getch(), buf[i] == '\0');
 8000296:	462f      	mov	r7, r5
 8000298:	f000 f934 	bl	8000504 <getch>
 800029c:	7028      	strb	r0, [r5, #0]
 800029e:	2800      	cmp	r0, #0
 80002a0:	d0fa      	beq.n	8000298 <my_read+0x10>

    if (buf[i] == '\n') {
 80002a2:	280a      	cmp	r0, #10
 80002a4:	f105 0501 	add.w	r5, r5, #1
 80002a8:	d1f2      	bne.n	8000290 <my_read+0x8>
      buf[i] = '\0';
 80002aa:	2300      	movs	r3, #0
 80002ac:	703b      	strb	r3, [r7, #0]
      return;
    }
  }
  buf[len - 1] = '\0';
}
 80002ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  buf[len - 1] = '\0';
 80002b0:	4434      	add	r4, r6
 80002b2:	2300      	movs	r3, #0
 80002b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80002b8:	e7f9      	b.n	80002ae <my_read+0x26>
 80002ba:	0000      	movs	r0, r0

080002bc <main>:

int main(void)
  {
 80002bc:	b510      	push	{r4, lr}
 80002be:	b08c      	sub	sp, #48	; 0x30
    platform_init();
 80002c0:	f000 f870 	bl	80003a4 <platform_init>
  init_uart();
 80002c4:	f000 f8ae 	bl	8000424 <init_uart>
  trigger_setup();
 80002c8:	f000 f8ea 	bl	80004a0 <trigger_setup>

    char passwd[32];
    char correct_passwd[] = "h0px3";
 80002cc:	4b2a      	ldr	r3, [pc, #168]	; (8000378 <main+0xbc>)
 80002ce:	6818      	ldr	r0, [r3, #0]
 80002d0:	9002      	str	r0, [sp, #8]
 80002d2:	889b      	ldrh	r3, [r3, #4]

  while(1){

        my_puts("*****Safe-o-matic 3000 Booting...\n");
 80002d4:	4829      	ldr	r0, [pc, #164]	; (800037c <main+0xc0>)
    char correct_passwd[] = "h0px3";
 80002d6:	f8ad 300c 	strh.w	r3, [sp, #12]
        my_puts("*****Safe-o-matic 3000 Booting...\n");
 80002da:	f7ff ffcb 	bl	8000274 <my_puts>
        //Print some fancy-sounding stuff so that attackers
        //will get scared and leave us alone
        my_puts("Aligning bits........[DONE]\n");
 80002de:	4828      	ldr	r0, [pc, #160]	; (8000380 <main+0xc4>)
 80002e0:	f7ff ffc8 	bl	8000274 <my_puts>
        delay_2_ms();
 80002e4:	f7ff ffb8 	bl	8000258 <delay_2_ms>
        my_puts("Checking Cesium RNG..[DONE]\n");
 80002e8:	4826      	ldr	r0, [pc, #152]	; (8000384 <main+0xc8>)
 80002ea:	f7ff ffc3 	bl	8000274 <my_puts>
        delay_2_ms();
 80002ee:	f7ff ffb3 	bl	8000258 <delay_2_ms>
        my_puts("Masquerading flash...[DONE]\n");
 80002f2:	4825      	ldr	r0, [pc, #148]	; (8000388 <main+0xcc>)
 80002f4:	f7ff ffbe 	bl	8000274 <my_puts>
        delay_2_ms();
 80002f8:	f7ff ffae 	bl	8000258 <delay_2_ms>
        my_puts("Decrypting database..[DONE]\n");
 80002fc:	4823      	ldr	r0, [pc, #140]	; (800038c <main+0xd0>)
 80002fe:	f7ff ffb9 	bl	8000274 <my_puts>
        delay_2_ms();
 8000302:	f7ff ffa9 	bl	8000258 <delay_2_ms>
        my_puts("\n\n");
 8000306:	4822      	ldr	r0, [pc, #136]	; (8000390 <main+0xd4>)
 8000308:	f7ff ffb4 	bl	8000274 <my_puts>

        //Give them one last warning
        my_puts("WARNING: UNAUTHORIZED ACCESS WILL BE PUNISHED\n");
 800030c:	4821      	ldr	r0, [pc, #132]	; (8000394 <main+0xd8>)
 800030e:	f7ff ffb1 	bl	8000274 <my_puts>

        trigger_low();
 8000312:	f000 f8f0 	bl	80004f6 <trigger_low>

        //Get password
        my_puts("Please enter password to continue: ");
 8000316:	4820      	ldr	r0, [pc, #128]	; (8000398 <main+0xdc>)
 8000318:	f7ff ffac 	bl	8000274 <my_puts>
        my_read(passwd, 32);
 800031c:	2120      	movs	r1, #32
 800031e:	a804      	add	r0, sp, #16
 8000320:	f7ff ffb2 	bl	8000288 <my_read>

        uint8_t passbad = 0;

        trigger_high();
 8000324:	f000 f8e0 	bl	80004e8 <trigger_high>

        for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
 8000328:	a902      	add	r1, sp, #8
 800032a:	aa04      	add	r2, sp, #16
        trigger_high();
 800032c:	2306      	movs	r3, #6
            if (correct_passwd[i] != passwd[i]){
 800032e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000332:	f812 0b01 	ldrb.w	r0, [r2], #1
 8000336:	4284      	cmp	r4, r0
 8000338:	d11b      	bne.n	8000372 <main+0xb6>
        for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
 800033a:	3b01      	subs	r3, #1
 800033c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000340:	d1f5      	bne.n	800032e <main+0x72>
            delay_2_ms();
            delay_2_ms();
            my_puts("PASSWORD FAIL\n");
            led_error(1);
        } else {
            my_puts("Access granted, Welcome!\n");
 8000342:	4816      	ldr	r0, [pc, #88]	; (800039c <main+0xe0>)
 8000344:	f7ff ff96 	bl	8000274 <my_puts>
            led_ok(1);
 8000348:	2001      	movs	r0, #1
 800034a:	f000 f911 	bl	8000570 <change_ok_led>
 800034e:	e00f      	b.n	8000370 <main+0xb4>
            for(volatile int i = 0; i < wait; i++){
 8000350:	9b01      	ldr	r3, [sp, #4]
 8000352:	3301      	adds	r3, #1
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	9b01      	ldr	r3, [sp, #4]
 8000358:	2b00      	cmp	r3, #0
 800035a:	ddf9      	ble.n	8000350 <main+0x94>
            delay_2_ms();
 800035c:	f7ff ff7c 	bl	8000258 <delay_2_ms>
            delay_2_ms();
 8000360:	f7ff ff7a 	bl	8000258 <delay_2_ms>
            my_puts("PASSWORD FAIL\n");
 8000364:	480e      	ldr	r0, [pc, #56]	; (80003a0 <main+0xe4>)
 8000366:	f7ff ff85 	bl	8000274 <my_puts>
            led_error(1);
 800036a:	2001      	movs	r0, #1
 800036c:	f000 f8f4 	bl	8000558 <change_err_led>
        }

        //All done;
        while(1);
 8000370:	e7fe      	b.n	8000370 <main+0xb4>
            for(volatile int i = 0; i < wait; i++){
 8000372:	2300      	movs	r3, #0
 8000374:	e7ee      	b.n	8000354 <main+0x98>
 8000376:	bf00      	nop
 8000378:	08001345 	.word	0x08001345
 800037c:	0800122f 	.word	0x0800122f
 8000380:	08001252 	.word	0x08001252
 8000384:	0800126f 	.word	0x0800126f
 8000388:	0800128c 	.word	0x0800128c
 800038c:	080012a9 	.word	0x080012a9
 8000390:	080012c6 	.word	0x080012c6
 8000394:	080012c9 	.word	0x080012c9
 8000398:	080012f8 	.word	0x080012f8
 800039c:	0800132b 	.word	0x0800132b
 80003a0:	0800131c 	.word	0x0800131c

080003a4 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80003a8:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80003aa:	2603      	movs	r6, #3
 80003ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80003b0:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80003b2:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80003b4:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80003b8:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80003ba:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80003bc:	f000 f8ec 	bl	8000598 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80003c0:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80003c2:	4621      	mov	r1, r4
 80003c4:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80003c6:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ca:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80003d0:	f000 fb50 	bl	8000a74 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <platform_init+0x78>)
 80003d6:	695a      	ldr	r2, [r3, #20]
 80003d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80003dc:	615a      	str	r2, [r3, #20]
 80003de:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80003e0:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80003e8:	4c0d      	ldr	r4, [pc, #52]	; (8000420 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80003ee:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80003f0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80003f4:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80003f6:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80003fa:	f000 fbe1 	bl	8000bc0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80003fe:	462a      	mov	r2, r5
 8000400:	4620      	mov	r0, r4
 8000402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000406:	f000 fc9f 	bl	8000d48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 800040a:	462a      	mov	r2, r5
 800040c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000410:	4620      	mov	r0, r4
 8000412:	f000 fc99 	bl	8000d48 <HAL_GPIO_WritePin>
#endif
}
 8000416:	b016      	add	sp, #88	; 0x58
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000
 8000420:	48000800 	.word	0x48000800

08000424 <init_uart>:

void init_uart(void)
{
 8000424:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000426:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 800042a:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800042c:	2302      	movs	r3, #2
 800042e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000432:	2101      	movs	r1, #1
 8000434:	2303      	movs	r3, #3
 8000436:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 800043a:	4c16      	ldr	r4, [pc, #88]	; (8000494 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 800043c:	2307      	movs	r3, #7
 800043e:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000440:	6963      	ldr	r3, [r4, #20]
 8000442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000446:	6163      	str	r3, [r4, #20]
 8000448:	6963      	ldr	r3, [r4, #20]
 800044a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800044e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000450:	a903      	add	r1, sp, #12
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8000456:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000458:	f000 fbb2 	bl	8000bc0 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 800045c:	480e      	ldr	r0, [pc, #56]	; (8000498 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 800045e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 800049c <init_uart+0x78>
 8000462:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000466:	e9c0 c300 	strd	ip, r3, [r0]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800046a:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800046c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000470:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000472:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000474:	230c      	movs	r3, #12
 8000476:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8000478:	69a3      	ldr	r3, [r4, #24]
 800047a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800047e:	61a3      	str	r3, [r4, #24]
 8000480:	69a3      	ldr	r3, [r4, #24]
 8000482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000486:	9302      	str	r3, [sp, #8]
 8000488:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 800048a:	f000 fdb1 	bl	8000ff0 <HAL_UART_Init>
}
 800048e:	b008      	add	sp, #32
 8000490:	bd10      	pop	{r4, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	20000024 	.word	0x20000024
 800049c:	40013800 	.word	0x40013800

080004a0 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <trigger_setup+0x44>)
{
 80004a2:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	695b      	ldr	r3, [r3, #20]
{
 80004ae:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80004b8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80004bc:	2301      	movs	r3, #1
 80004be:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004c2:	2500      	movs	r5, #0
 80004c4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80004c6:	a901      	add	r1, sp, #4
 80004c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004cc:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80004d0:	f000 fb76 	bl	8000bc0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80004d4:	462a      	mov	r2, r5
 80004d6:	4621      	mov	r1, r4
 80004d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004dc:	f000 fc34 	bl	8000d48 <HAL_GPIO_WritePin>
}
 80004e0:	b007      	add	sp, #28
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	40021000 	.word	0x40021000

080004e8 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 bc29 	b.w	8000d48 <HAL_GPIO_WritePin>

080004f6 <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f000 bc22 	b.w	8000d48 <HAL_GPIO_WritePin>

08000504 <getch>:
}

char getch(void)
{
 8000504:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000506:	4d0a      	ldr	r5, [pc, #40]	; (8000530 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8000508:	4c0a      	ldr	r4, [pc, #40]	; (8000534 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 800050a:	f241 3388 	movw	r3, #5000	; 0x1388
 800050e:	2201      	movs	r2, #1
 8000510:	f10d 0107 	add.w	r1, sp, #7
 8000514:	4628      	mov	r0, r5
 8000516:	f000 fdec 	bl	80010f2 <HAL_UART_Receive>
 800051a:	b918      	cbnz	r0, 8000524 <getch+0x20>
  //putch(d);
  return d;
}
 800051c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000520:	b003      	add	sp, #12
 8000522:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8000524:	6a23      	ldr	r3, [r4, #32]
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6223      	str	r3, [r4, #32]
 800052c:	e7ed      	b.n	800050a <getch+0x6>
 800052e:	bf00      	nop
 8000530:	20000024 	.word	0x20000024
 8000534:	40013800 	.word	0x40013800

08000538 <putch>:

void putch(char c)
{
 8000538:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800053a:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 800053e:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000542:	2201      	movs	r2, #1
 8000544:	f10d 0107 	add.w	r1, sp, #7
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <putch+0x1c>)
 800054a:	f000 fd7c 	bl	8001046 <HAL_UART_Transmit>
}
 800054e:	b003      	add	sp, #12
 8000550:	f85d fb04 	ldr.w	pc, [sp], #4
 8000554:	20000024 	.word	0x20000024

08000558 <change_err_led>:
#if (PLATFORM==CWLITEARM)
void change_err_led(int x)
{
    if (x)
 8000558:	b128      	cbz	r0, 8000566 <change_err_led+0xe>
         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800055a:	2200      	movs	r2, #0
    else
         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <change_err_led+0x14>)
 800055e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000562:	f000 bbf1 	b.w	8000d48 <HAL_GPIO_WritePin>
 8000566:	2201      	movs	r2, #1
 8000568:	e7f8      	b.n	800055c <change_err_led+0x4>
 800056a:	bf00      	nop
 800056c:	48000800 	.word	0x48000800

08000570 <change_ok_led>:
}

void change_ok_led(int x)
{
     if (x)
 8000570:	b128      	cbz	r0, 800057e <change_ok_led+0xe>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000572:	2200      	movs	r2, #0
     else
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <change_ok_led+0x14>)
 8000576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057a:	f000 bbe5 	b.w	8000d48 <HAL_GPIO_WritePin>
 800057e:	2201      	movs	r2, #1
 8000580:	e7f8      	b.n	8000574 <change_ok_led+0x4>
 8000582:	bf00      	nop
 8000584:	48000800 	.word	0x48000800

08000588 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000588:	4b02      	ldr	r3, [pc, #8]	; (8000594 <HAL_GetTick+0xc>)
 800058a:	6818      	ldr	r0, [r3, #0]
 800058c:	1c42      	adds	r2, r0, #1
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000001c 	.word	0x2000001c

08000598 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000598:	6803      	ldr	r3, [r0, #0]
{
 800059a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800059e:	07d9      	lsls	r1, r3, #31
{
 80005a0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005a2:	d411      	bmi.n	80005c8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005a4:	6823      	ldr	r3, [r4, #0]
 80005a6:	079a      	lsls	r2, r3, #30
 80005a8:	f100 8086 	bmi.w	80006b8 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	071e      	lsls	r6, r3, #28
 80005b0:	f100 80f4 	bmi.w	800079c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	075d      	lsls	r5, r3, #29
 80005b8:	f100 813b 	bmi.w	8000832 <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005bc:	69e2      	ldr	r2, [r4, #28]
 80005be:	2a00      	cmp	r2, #0
 80005c0:	f040 81ce 	bne.w	8000960 <HAL_RCC_OscConfig+0x3c8>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005c4:	2000      	movs	r0, #0
 80005c6:	e021      	b.n	800060c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005c8:	49b7      	ldr	r1, [pc, #732]	; (80008a8 <HAL_RCC_OscConfig+0x310>)
 80005ca:	684b      	ldr	r3, [r1, #4]
 80005cc:	f003 030c 	and.w	r3, r3, #12
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d007      	beq.n	80005e4 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005d4:	684b      	ldr	r3, [r1, #4]
 80005d6:	f003 030c 	and.w	r3, r3, #12
 80005da:	2b08      	cmp	r3, #8
 80005dc:	d119      	bne.n	8000612 <HAL_RCC_OscConfig+0x7a>
 80005de:	684b      	ldr	r3, [r1, #4]
 80005e0:	03db      	lsls	r3, r3, #15
 80005e2:	d516      	bpl.n	8000612 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005e8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005ec:	6809      	ldr	r1, [r1, #0]
 80005ee:	fa93 f3a3 	rbit	r3, r3
 80005f2:	fab3 f383 	clz	r3, r3
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	2201      	movs	r2, #1
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	420b      	tst	r3, r1
 8000602:	d0cf      	beq.n	80005a4 <HAL_RCC_OscConfig+0xc>
 8000604:	6863      	ldr	r3, [r4, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1cc      	bne.n	80005a4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800060a:	2001      	movs	r0, #1
}
 800060c:	b003      	add	sp, #12
 800060e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000612:	6862      	ldr	r2, [r4, #4]
 8000614:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000618:	d124      	bne.n	8000664 <HAL_RCC_OscConfig+0xcc>
 800061a:	680b      	ldr	r3, [r1, #0]
 800061c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000620:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000622:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000624:	68a0      	ldr	r0, [r4, #8]
 8000626:	f023 030f 	bic.w	r3, r3, #15
 800062a:	4303      	orrs	r3, r0
 800062c:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800062e:	b34a      	cbz	r2, 8000684 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8000630:	f7ff ffaa 	bl	8000588 <HAL_GetTick>
 8000634:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000638:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800063a:	2701      	movs	r7, #1
 800063c:	fa96 f3a6 	rbit	r3, r6
 8000640:	680a      	ldr	r2, [r1, #0]
 8000642:	fa96 f3a6 	rbit	r3, r6
 8000646:	fab3 f383 	clz	r3, r3
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	fa07 f303 	lsl.w	r3, r7, r3
 8000652:	4213      	tst	r3, r2
 8000654:	d1a6      	bne.n	80005a4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000656:	f7ff ff97 	bl	8000588 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	2864      	cmp	r0, #100	; 0x64
 800065e:	d9ed      	bls.n	800063c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000660:	2003      	movs	r0, #3
 8000662:	e7d3      	b.n	800060c <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000664:	680b      	ldr	r3, [r1, #0]
 8000666:	b932      	cbnz	r2, 8000676 <HAL_RCC_OscConfig+0xde>
 8000668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800066c:	600b      	str	r3, [r1, #0]
 800066e:	680b      	ldr	r3, [r1, #0]
 8000670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000674:	e7d4      	b.n	8000620 <HAL_RCC_OscConfig+0x88>
 8000676:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800067a:	d1f5      	bne.n	8000668 <HAL_RCC_OscConfig+0xd0>
 800067c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000680:	600b      	str	r3, [r1, #0]
 8000682:	e7ca      	b.n	800061a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000684:	f7ff ff80 	bl	8000588 <HAL_GetTick>
 8000688:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800068c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800068e:	2701      	movs	r7, #1
 8000690:	fa96 f3a6 	rbit	r3, r6
 8000694:	680a      	ldr	r2, [r1, #0]
 8000696:	fa96 f3a6 	rbit	r3, r6
 800069a:	fab3 f383 	clz	r3, r3
 800069e:	f003 031f 	and.w	r3, r3, #31
 80006a2:	fa07 f303 	lsl.w	r3, r7, r3
 80006a6:	4213      	tst	r3, r2
 80006a8:	f43f af7c 	beq.w	80005a4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ac:	f7ff ff6c 	bl	8000588 <HAL_GetTick>
 80006b0:	1b40      	subs	r0, r0, r5
 80006b2:	2864      	cmp	r0, #100	; 0x64
 80006b4:	d9ec      	bls.n	8000690 <HAL_RCC_OscConfig+0xf8>
 80006b6:	e7d3      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006b8:	497b      	ldr	r1, [pc, #492]	; (80008a8 <HAL_RCC_OscConfig+0x310>)
 80006ba:	684b      	ldr	r3, [r1, #4]
 80006bc:	f013 0f0c 	tst.w	r3, #12
 80006c0:	d007      	beq.n	80006d2 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006c2:	684b      	ldr	r3, [r1, #4]
 80006c4:	f003 030c 	and.w	r3, r3, #12
 80006c8:	2b08      	cmp	r3, #8
 80006ca:	d121      	bne.n	8000710 <HAL_RCC_OscConfig+0x178>
 80006cc:	684b      	ldr	r3, [r1, #4]
 80006ce:	03df      	lsls	r7, r3, #15
 80006d0:	d41e      	bmi.n	8000710 <HAL_RCC_OscConfig+0x178>
 80006d2:	2302      	movs	r3, #2
 80006d4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006d8:	6808      	ldr	r0, [r1, #0]
 80006da:	fa93 f3a3 	rbit	r3, r3
 80006de:	fab3 f383 	clz	r3, r3
 80006e2:	f003 031f 	and.w	r3, r3, #31
 80006e6:	2201      	movs	r2, #1
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	4203      	tst	r3, r0
 80006ee:	d002      	beq.n	80006f6 <HAL_RCC_OscConfig+0x15e>
 80006f0:	6923      	ldr	r3, [r4, #16]
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d189      	bne.n	800060a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006f6:	6808      	ldr	r0, [r1, #0]
 80006f8:	23f8      	movs	r3, #248	; 0xf8
 80006fa:	fa93 f3a3 	rbit	r3, r3
 80006fe:	fab3 f283 	clz	r2, r3
 8000702:	6963      	ldr	r3, [r4, #20]
 8000704:	4093      	lsls	r3, r2
 8000706:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 800070a:	4313      	orrs	r3, r2
 800070c:	600b      	str	r3, [r1, #0]
 800070e:	e74d      	b.n	80005ac <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000710:	6922      	ldr	r2, [r4, #16]
 8000712:	2501      	movs	r5, #1
 8000714:	b302      	cbz	r2, 8000758 <HAL_RCC_OscConfig+0x1c0>
 8000716:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800071a:	fab3 f383 	clz	r3, r3
 800071e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000722:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	2702      	movs	r7, #2
 800072a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800072c:	f7ff ff2c 	bl	8000588 <HAL_GetTick>
 8000730:	4606      	mov	r6, r0
 8000732:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000736:	680a      	ldr	r2, [r1, #0]
 8000738:	fa97 f3a7 	rbit	r3, r7
 800073c:	fab3 f383 	clz	r3, r3
 8000740:	f003 031f 	and.w	r3, r3, #31
 8000744:	fa05 f303 	lsl.w	r3, r5, r3
 8000748:	4213      	tst	r3, r2
 800074a:	d1d4      	bne.n	80006f6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800074c:	f7ff ff1c 	bl	8000588 <HAL_GetTick>
 8000750:	1b80      	subs	r0, r0, r6
 8000752:	2802      	cmp	r0, #2
 8000754:	d9ed      	bls.n	8000732 <HAL_RCC_OscConfig+0x19a>
 8000756:	e783      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
 8000758:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 800075c:	fab3 f383 	clz	r3, r3
 8000760:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000764:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	2702      	movs	r7, #2
 800076c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800076e:	f7ff ff0b 	bl	8000588 <HAL_GetTick>
 8000772:	4606      	mov	r6, r0
 8000774:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000778:	680a      	ldr	r2, [r1, #0]
 800077a:	fa97 f3a7 	rbit	r3, r7
 800077e:	fab3 f383 	clz	r3, r3
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	fa05 f303 	lsl.w	r3, r5, r3
 800078a:	4213      	tst	r3, r2
 800078c:	f43f af0e 	beq.w	80005ac <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000790:	f7ff fefa 	bl	8000588 <HAL_GetTick>
 8000794:	1b80      	subs	r0, r0, r6
 8000796:	2802      	cmp	r0, #2
 8000798:	d9ec      	bls.n	8000774 <HAL_RCC_OscConfig+0x1dc>
 800079a:	e761      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800079c:	69a2      	ldr	r2, [r4, #24]
 800079e:	4d42      	ldr	r5, [pc, #264]	; (80008a8 <HAL_RCC_OscConfig+0x310>)
 80007a0:	4842      	ldr	r0, [pc, #264]	; (80008ac <HAL_RCC_OscConfig+0x314>)
 80007a2:	2101      	movs	r1, #1
 80007a4:	b312      	cbz	r2, 80007ec <HAL_RCC_OscConfig+0x254>
 80007a6:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 80007aa:	fab3 f383 	clz	r3, r3
 80007ae:	4403      	add	r3, r0
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	2602      	movs	r6, #2
 80007b4:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 80007b6:	f7ff fee7 	bl	8000588 <HAL_GetTick>
 80007ba:	4607      	mov	r7, r0
 80007bc:	fa96 f3a6 	rbit	r3, r6
 80007c0:	fa96 f3a6 	rbit	r3, r6
 80007c4:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007c8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007ca:	fa96 f3a6 	rbit	r3, r6
 80007ce:	fab3 f383 	clz	r3, r3
 80007d2:	f003 031f 	and.w	r3, r3, #31
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	4213      	tst	r3, r2
 80007dc:	f47f aeea 	bne.w	80005b4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007e0:	f7ff fed2 	bl	8000588 <HAL_GetTick>
 80007e4:	1bc0      	subs	r0, r0, r7
 80007e6:	2802      	cmp	r0, #2
 80007e8:	d9e8      	bls.n	80007bc <HAL_RCC_OscConfig+0x224>
 80007ea:	e739      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
 80007ec:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 80007f0:	fab3 f383 	clz	r3, r3
 80007f4:	4403      	add	r3, r0
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	2602      	movs	r6, #2
 80007fa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007fc:	f7ff fec4 	bl	8000588 <HAL_GetTick>
 8000800:	4607      	mov	r7, r0
 8000802:	fa96 f3a6 	rbit	r3, r6
 8000806:	fa96 f3a6 	rbit	r3, r6
 800080a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800080e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000810:	fa96 f3a6 	rbit	r3, r6
 8000814:	fab3 f383 	clz	r3, r3
 8000818:	f003 031f 	and.w	r3, r3, #31
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	4213      	tst	r3, r2
 8000822:	f43f aec7 	beq.w	80005b4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000826:	f7ff feaf 	bl	8000588 <HAL_GetTick>
 800082a:	1bc0      	subs	r0, r0, r7
 800082c:	2802      	cmp	r0, #2
 800082e:	d9e8      	bls.n	8000802 <HAL_RCC_OscConfig+0x26a>
 8000830:	e716      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000832:	491d      	ldr	r1, [pc, #116]	; (80008a8 <HAL_RCC_OscConfig+0x310>)
 8000834:	69cb      	ldr	r3, [r1, #28]
 8000836:	00d8      	lsls	r0, r3, #3
 8000838:	d434      	bmi.n	80008a4 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	69cb      	ldr	r3, [r1, #28]
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	61cb      	str	r3, [r1, #28]
 8000842:	69cb      	ldr	r3, [r1, #28]
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800084c:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800084e:	4e18      	ldr	r6, [pc, #96]	; (80008b0 <HAL_RCC_OscConfig+0x318>)
 8000850:	6833      	ldr	r3, [r6, #0]
 8000852:	05da      	lsls	r2, r3, #23
 8000854:	d52e      	bpl.n	80008b4 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000856:	68e3      	ldr	r3, [r4, #12]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d13b      	bne.n	80008d4 <HAL_RCC_OscConfig+0x33c>
 800085c:	6a0b      	ldr	r3, [r1, #32]
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000864:	f7ff fe90 	bl	8000588 <HAL_GetTick>
 8000868:	2602      	movs	r6, #2
 800086a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800086c:	46b1      	mov	r9, r6
 800086e:	f04f 0801 	mov.w	r8, #1
 8000872:	fa96 f3a6 	rbit	r3, r6
 8000876:	fa96 f3a6 	rbit	r3, r6
 800087a:	2b00      	cmp	r3, #0
 800087c:	d068      	beq.n	8000950 <HAL_RCC_OscConfig+0x3b8>
 800087e:	6a0a      	ldr	r2, [r1, #32]
 8000880:	fa99 f3a9 	rbit	r3, r9
 8000884:	fab3 f383 	clz	r3, r3
 8000888:	f003 031f 	and.w	r3, r3, #31
 800088c:	fa08 f303 	lsl.w	r3, r8, r3
 8000890:	4213      	tst	r3, r2
 8000892:	d055      	beq.n	8000940 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8000894:	2d00      	cmp	r5, #0
 8000896:	f43f ae91 	beq.w	80005bc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800089a:	69cb      	ldr	r3, [r1, #28]
 800089c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008a0:	61cb      	str	r3, [r1, #28]
 80008a2:	e68b      	b.n	80005bc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80008a4:	2500      	movs	r5, #0
 80008a6:	e7d2      	b.n	800084e <HAL_RCC_OscConfig+0x2b6>
 80008a8:	40021000 	.word	0x40021000
 80008ac:	10908120 	.word	0x10908120
 80008b0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008b4:	6833      	ldr	r3, [r6, #0]
 80008b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80008bc:	f7ff fe64 	bl	8000588 <HAL_GetTick>
 80008c0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008c2:	6833      	ldr	r3, [r6, #0]
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	d4c6      	bmi.n	8000856 <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008c8:	f7ff fe5e 	bl	8000588 <HAL_GetTick>
 80008cc:	1bc0      	subs	r0, r0, r7
 80008ce:	2864      	cmp	r0, #100	; 0x64
 80008d0:	d9f7      	bls.n	80008c2 <HAL_RCC_OscConfig+0x32a>
 80008d2:	e6c5      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d4:	bb33      	cbnz	r3, 8000924 <HAL_RCC_OscConfig+0x38c>
 80008d6:	6a0b      	ldr	r3, [r1, #32]
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	620b      	str	r3, [r1, #32]
 80008de:	6a0b      	ldr	r3, [r1, #32]
 80008e0:	f023 0304 	bic.w	r3, r3, #4
 80008e4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80008e6:	f7ff fe4f 	bl	8000588 <HAL_GetTick>
 80008ea:	2602      	movs	r6, #2
 80008ec:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008ee:	46b1      	mov	r9, r6
 80008f0:	f04f 0801 	mov.w	r8, #1
 80008f4:	fa96 f3a6 	rbit	r3, r6
 80008f8:	fa96 f3a6 	rbit	r3, r6
 80008fc:	b363      	cbz	r3, 8000958 <HAL_RCC_OscConfig+0x3c0>
 80008fe:	6a0a      	ldr	r2, [r1, #32]
 8000900:	fa99 f3a9 	rbit	r3, r9
 8000904:	fab3 f383 	clz	r3, r3
 8000908:	f003 031f 	and.w	r3, r3, #31
 800090c:	fa08 f303 	lsl.w	r3, r8, r3
 8000910:	4213      	tst	r3, r2
 8000912:	d0bf      	beq.n	8000894 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000914:	f7ff fe38 	bl	8000588 <HAL_GetTick>
 8000918:	f241 3388 	movw	r3, #5000	; 0x1388
 800091c:	1bc0      	subs	r0, r0, r7
 800091e:	4298      	cmp	r0, r3
 8000920:	d9e8      	bls.n	80008f4 <HAL_RCC_OscConfig+0x35c>
 8000922:	e69d      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000924:	2b05      	cmp	r3, #5
 8000926:	6a0b      	ldr	r3, [r1, #32]
 8000928:	d103      	bne.n	8000932 <HAL_RCC_OscConfig+0x39a>
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	620b      	str	r3, [r1, #32]
 8000930:	e794      	b.n	800085c <HAL_RCC_OscConfig+0x2c4>
 8000932:	f023 0301 	bic.w	r3, r3, #1
 8000936:	620b      	str	r3, [r1, #32]
 8000938:	6a0b      	ldr	r3, [r1, #32]
 800093a:	f023 0304 	bic.w	r3, r3, #4
 800093e:	e790      	b.n	8000862 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000940:	f7ff fe22 	bl	8000588 <HAL_GetTick>
 8000944:	f241 3388 	movw	r3, #5000	; 0x1388
 8000948:	1bc0      	subs	r0, r0, r7
 800094a:	4298      	cmp	r0, r3
 800094c:	d991      	bls.n	8000872 <HAL_RCC_OscConfig+0x2da>
 800094e:	e687      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
 8000950:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000954:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000956:	e793      	b.n	8000880 <HAL_RCC_OscConfig+0x2e8>
 8000958:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800095c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800095e:	e7cf      	b.n	8000900 <HAL_RCC_OscConfig+0x368>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000960:	4942      	ldr	r1, [pc, #264]	; (8000a6c <HAL_RCC_OscConfig+0x4d4>)
 8000962:	684b      	ldr	r3, [r1, #4]
 8000964:	f003 030c 	and.w	r3, r3, #12
 8000968:	2b08      	cmp	r3, #8
 800096a:	f43f ae4e 	beq.w	800060a <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800096e:	2a02      	cmp	r2, #2
 8000970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000974:	d154      	bne.n	8000a20 <HAL_RCC_OscConfig+0x488>
 8000976:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800097a:	fab3 f383 	clz	r3, r3
 800097e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000982:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800098c:	f7ff fdfc 	bl	8000588 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000990:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8000a70 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8000994:	4606      	mov	r6, r0
 8000996:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800099a:	2501      	movs	r5, #1
 800099c:	fa97 f3a7 	rbit	r3, r7
 80009a0:	680a      	ldr	r2, [r1, #0]
 80009a2:	fa97 f3a7 	rbit	r3, r7
 80009a6:	fab3 f383 	clz	r3, r3
 80009aa:	f003 031f 	and.w	r3, r3, #31
 80009ae:	fa05 f303 	lsl.w	r3, r5, r3
 80009b2:	4213      	tst	r3, r2
 80009b4:	d12e      	bne.n	8000a14 <HAL_RCC_OscConfig+0x47c>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009b6:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 80009ba:	684a      	ldr	r2, [r1, #4]
 80009bc:	4303      	orrs	r3, r0
 80009be:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80009c2:	4313      	orrs	r3, r2
 80009c4:	604b      	str	r3, [r1, #4]
 80009c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80009ce:	fab3 f383 	clz	r3, r3
 80009d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009da:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009dc:	4f24      	ldr	r7, [pc, #144]	; (8000a70 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 80009de:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80009e0:	f7ff fdd2 	bl	8000588 <HAL_GetTick>
 80009e4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009e8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009ea:	2601      	movs	r6, #1
 80009ec:	fa95 f3a5 	rbit	r3, r5
 80009f0:	680a      	ldr	r2, [r1, #0]
 80009f2:	fa95 f3a5 	rbit	r3, r5
 80009f6:	fab3 f383 	clz	r3, r3
 80009fa:	f003 031f 	and.w	r3, r3, #31
 80009fe:	fa06 f303 	lsl.w	r3, r6, r3
 8000a02:	4213      	tst	r3, r2
 8000a04:	f47f adde 	bne.w	80005c4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a08:	f7ff fdbe 	bl	8000588 <HAL_GetTick>
 8000a0c:	1b00      	subs	r0, r0, r4
 8000a0e:	42b8      	cmp	r0, r7
 8000a10:	d9ec      	bls.n	80009ec <HAL_RCC_OscConfig+0x454>
 8000a12:	e625      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a14:	f7ff fdb8 	bl	8000588 <HAL_GetTick>
 8000a18:	1b80      	subs	r0, r0, r6
 8000a1a:	4540      	cmp	r0, r8
 8000a1c:	d9be      	bls.n	800099c <HAL_RCC_OscConfig+0x404>
 8000a1e:	e61f      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
 8000a20:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a24:	fab3 f383 	clz	r3, r3
 8000a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a36:	f7ff fda7 	bl	8000588 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a3a:	4f0d      	ldr	r7, [pc, #52]	; (8000a70 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a42:	2601      	movs	r6, #1
 8000a44:	fa95 f3a5 	rbit	r3, r5
 8000a48:	680a      	ldr	r2, [r1, #0]
 8000a4a:	fa95 f3a5 	rbit	r3, r5
 8000a4e:	fab3 f383 	clz	r3, r3
 8000a52:	f003 031f 	and.w	r3, r3, #31
 8000a56:	fa06 f303 	lsl.w	r3, r6, r3
 8000a5a:	4213      	tst	r3, r2
 8000a5c:	f43f adb2 	beq.w	80005c4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a60:	f7ff fd92 	bl	8000588 <HAL_GetTick>
 8000a64:	1b00      	subs	r0, r0, r4
 8000a66:	42b8      	cmp	r0, r7
 8000a68:	d9ec      	bls.n	8000a44 <HAL_RCC_OscConfig+0x4ac>
 8000a6a:	e5f9      	b.n	8000660 <HAL_RCC_OscConfig+0xc8>
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	00030d40 	.word	0x00030d40

08000a74 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a74:	4a50      	ldr	r2, [pc, #320]	; (8000bb8 <HAL_RCC_ClockConfig+0x144>)
{
 8000a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a78:	6813      	ldr	r3, [r2, #0]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	428b      	cmp	r3, r1
{
 8000a80:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a82:	d31b      	bcc.n	8000abc <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a84:	6822      	ldr	r2, [r4, #0]
 8000a86:	0790      	lsls	r0, r2, #30
 8000a88:	d424      	bmi.n	8000ad4 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a8a:	07d2      	lsls	r2, r2, #31
 8000a8c:	d42a      	bmi.n	8000ae4 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a8e:	4a4a      	ldr	r2, [pc, #296]	; (8000bb8 <HAL_RCC_ClockConfig+0x144>)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d87a      	bhi.n	8000b90 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a9a:	6820      	ldr	r0, [r4, #0]
 8000a9c:	0743      	lsls	r3, r0, #29
 8000a9e:	f100 8082 	bmi.w	8000ba6 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000aa2:	f010 0008 	ands.w	r0, r0, #8
 8000aa6:	d014      	beq.n	8000ad2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000aa8:	4a44      	ldr	r2, [pc, #272]	; (8000bbc <HAL_RCC_ClockConfig+0x148>)
 8000aaa:	6921      	ldr	r1, [r4, #16]
 8000aac:	6853      	ldr	r3, [r2, #4]
 8000aae:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ab2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ab6:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000ab8:	2000      	movs	r0, #0
 8000aba:	e00a      	b.n	8000ad2 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000abc:	6813      	ldr	r3, [r2, #0]
 8000abe:	f023 0307 	bic.w	r3, r3, #7
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ac6:	6813      	ldr	r3, [r2, #0]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d0d9      	beq.n	8000a84 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8000ad0:	2001      	movs	r0, #1
}
 8000ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ad4:	4839      	ldr	r0, [pc, #228]	; (8000bbc <HAL_RCC_ClockConfig+0x148>)
 8000ad6:	68a5      	ldr	r5, [r4, #8]
 8000ad8:	6843      	ldr	r3, [r0, #4]
 8000ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ade:	432b      	orrs	r3, r5
 8000ae0:	6043      	str	r3, [r0, #4]
 8000ae2:	e7d2      	b.n	8000a8a <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae4:	6862      	ldr	r2, [r4, #4]
 8000ae6:	4d35      	ldr	r5, [pc, #212]	; (8000bbc <HAL_RCC_ClockConfig+0x148>)
 8000ae8:	2a01      	cmp	r2, #1
 8000aea:	d127      	bne.n	8000b3c <HAL_RCC_ClockConfig+0xc8>
 8000aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af0:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af4:	6828      	ldr	r0, [r5, #0]
 8000af6:	fa93 f3a3 	rbit	r3, r3
 8000afa:	fab3 f383 	clz	r3, r3
 8000afe:	f003 031f 	and.w	r3, r3, #31
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b08:	d0e2      	beq.n	8000ad0 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b0a:	686b      	ldr	r3, [r5, #4]
 8000b0c:	f023 0303 	bic.w	r3, r3, #3
 8000b10:	431a      	orrs	r2, r3
 8000b12:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8000b14:	f7ff fd38 	bl	8000588 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b18:	6863      	ldr	r3, [r4, #4]
 8000b1a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000b1c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1e:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b22:	d11e      	bne.n	8000b62 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b24:	686b      	ldr	r3, [r5, #4]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d0af      	beq.n	8000a8e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b2e:	f7ff fd2b 	bl	8000588 <HAL_GetTick>
 8000b32:	1b80      	subs	r0, r0, r6
 8000b34:	42b8      	cmp	r0, r7
 8000b36:	d9f5      	bls.n	8000b24 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000b38:	2003      	movs	r0, #3
 8000b3a:	e7ca      	b.n	8000ad2 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b3c:	2a02      	cmp	r2, #2
 8000b3e:	bf0c      	ite	eq
 8000b40:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b44:	2302      	movne	r3, #2
 8000b46:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b4a:	682e      	ldr	r6, [r5, #0]
 8000b4c:	fa93 f3a3 	rbit	r3, r3
 8000b50:	fab3 f383 	clz	r3, r3
 8000b54:	f003 031f 	and.w	r3, r3, #31
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f303 	lsl.w	r3, r0, r3
 8000b5e:	4233      	tst	r3, r6
 8000b60:	e7d2      	b.n	8000b08 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d10f      	bne.n	8000b86 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b66:	686b      	ldr	r3, [r5, #4]
 8000b68:	f003 030c 	and.w	r3, r3, #12
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d08e      	beq.n	8000a8e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b70:	f7ff fd0a 	bl	8000588 <HAL_GetTick>
 8000b74:	1b80      	subs	r0, r0, r6
 8000b76:	42b8      	cmp	r0, r7
 8000b78:	d9f5      	bls.n	8000b66 <HAL_RCC_ClockConfig+0xf2>
 8000b7a:	e7dd      	b.n	8000b38 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7c:	f7ff fd04 	bl	8000588 <HAL_GetTick>
 8000b80:	1b80      	subs	r0, r0, r6
 8000b82:	42b8      	cmp	r0, r7
 8000b84:	d8d8      	bhi.n	8000b38 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b86:	686b      	ldr	r3, [r5, #4]
 8000b88:	f013 0f0c 	tst.w	r3, #12
 8000b8c:	d1f6      	bne.n	8000b7c <HAL_RCC_ClockConfig+0x108>
 8000b8e:	e77e      	b.n	8000a8e <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b90:	6813      	ldr	r3, [r2, #0]
 8000b92:	f023 0307 	bic.w	r3, r3, #7
 8000b96:	430b      	orrs	r3, r1
 8000b98:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d195      	bne.n	8000ad0 <HAL_RCC_ClockConfig+0x5c>
 8000ba4:	e779      	b.n	8000a9a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ba6:	4905      	ldr	r1, [pc, #20]	; (8000bbc <HAL_RCC_ClockConfig+0x148>)
 8000ba8:	68e3      	ldr	r3, [r4, #12]
 8000baa:	684a      	ldr	r2, [r1, #4]
 8000bac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	604a      	str	r2, [r1, #4]
 8000bb4:	e775      	b.n	8000aa2 <HAL_RCC_ClockConfig+0x2e>
 8000bb6:	bf00      	nop
 8000bb8:	40022000 	.word	0x40022000
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc4:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8000d44 <HAL_GPIO_Init+0x184>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bc8:	4c5c      	ldr	r4, [pc, #368]	; (8000d3c <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00U;
 8000bca:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bcc:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000bd0:	680a      	ldr	r2, [r1, #0]
 8000bd2:	fa32 f503 	lsrs.w	r5, r2, r3
 8000bd6:	d102      	bne.n	8000bde <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000bd8:	b003      	add	sp, #12
 8000bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bde:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 8000be2:	ea1a 0202 	ands.w	r2, sl, r2
 8000be6:	f000 809e 	beq.w	8000d26 <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bea:	684d      	ldr	r5, [r1, #4]
 8000bec:	f025 0e10 	bic.w	lr, r5, #16
 8000bf0:	f1be 0f02 	cmp.w	lr, #2
 8000bf4:	d114      	bne.n	8000c20 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000bf6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000bfa:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfe:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000c02:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c06:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c0a:	270f      	movs	r7, #15
 8000c0c:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c10:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c14:	690e      	ldr	r6, [r1, #16]
 8000c16:	fa06 f60b 	lsl.w	r6, r6, fp
 8000c1a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000c1c:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8000c20:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c28:	2603      	movs	r6, #3
 8000c2a:	fa06 f70c 	lsl.w	r7, r6, ip
 8000c2e:	ea2b 0b07 	bic.w	fp, fp, r7
 8000c32:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c34:	f005 0703 	and.w	r7, r5, #3
 8000c38:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c3c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c40:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c44:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8000c48:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c4a:	d811      	bhi.n	8000c70 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8000c4c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c4e:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c52:	68cf      	ldr	r7, [r1, #12]
 8000c54:	fa07 f70c 	lsl.w	r7, r7, ip
 8000c58:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000c5c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c5e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c60:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c64:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000c68:	409f      	lsls	r7, r3
 8000c6a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000c6e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c70:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c72:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c74:	688e      	ldr	r6, [r1, #8]
 8000c76:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c7a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000c7c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7e:	00ee      	lsls	r6, r5, #3
 8000c80:	d551      	bpl.n	8000d26 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000c86:	f046 0601 	orr.w	r6, r6, #1
 8000c8a:	f8c8 6018 	str.w	r6, [r8, #24]
 8000c8e:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000c92:	f023 0703 	bic.w	r7, r3, #3
 8000c96:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c9a:	f006 0601 	and.w	r6, r6, #1
 8000c9e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000ca2:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000ca4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000caa:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000cb0:	f04f 0c0f 	mov.w	ip, #15
 8000cb4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cb8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cbc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cc0:	d033      	beq.n	8000d2a <HAL_GPIO_Init+0x16a>
 8000cc2:	4e1f      	ldr	r6, [pc, #124]	; (8000d40 <HAL_GPIO_Init+0x180>)
 8000cc4:	42b0      	cmp	r0, r6
 8000cc6:	d032      	beq.n	8000d2e <HAL_GPIO_Init+0x16e>
 8000cc8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ccc:	42b0      	cmp	r0, r6
 8000cce:	d030      	beq.n	8000d32 <HAL_GPIO_Init+0x172>
 8000cd0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000cd4:	42b0      	cmp	r0, r6
 8000cd6:	d02e      	beq.n	8000d36 <HAL_GPIO_Init+0x176>
 8000cd8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000cdc:	42b0      	cmp	r0, r6
 8000cde:	bf0c      	ite	eq
 8000ce0:	2604      	moveq	r6, #4
 8000ce2:	2605      	movne	r6, #5
 8000ce4:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ce8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cec:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000cee:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000cf0:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf2:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000cf6:	bf0c      	ite	eq
 8000cf8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000cfa:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8000cfc:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000cfe:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d00:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d04:	bf0c      	ite	eq
 8000d06:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d08:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8000d0a:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000d0c:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d0e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d12:	bf0c      	ite	eq
 8000d14:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d16:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8000d18:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000d1a:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d1c:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000d1e:	bf54      	ite	pl
 8000d20:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000d22:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8000d24:	60e6      	str	r6, [r4, #12]
    position++;
 8000d26:	3301      	adds	r3, #1
 8000d28:	e752      	b.n	8000bd0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d2a:	2600      	movs	r6, #0
 8000d2c:	e7da      	b.n	8000ce4 <HAL_GPIO_Init+0x124>
 8000d2e:	2601      	movs	r6, #1
 8000d30:	e7d8      	b.n	8000ce4 <HAL_GPIO_Init+0x124>
 8000d32:	2602      	movs	r6, #2
 8000d34:	e7d6      	b.n	8000ce4 <HAL_GPIO_Init+0x124>
 8000d36:	2603      	movs	r6, #3
 8000d38:	e7d4      	b.n	8000ce4 <HAL_GPIO_Init+0x124>
 8000d3a:	bf00      	nop
 8000d3c:	40010400 	.word	0x40010400
 8000d40:	48000400 	.word	0x48000400
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d48:	b10a      	cbz	r2, 8000d4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4a:	6181      	str	r1, [r0, #24]
 8000d4c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000d50:	4770      	bx	lr
 8000d52:	0000      	movs	r0, r0

08000d54 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d54:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d56:	6881      	ldr	r1, [r0, #8]
 8000d58:	69c3      	ldr	r3, [r0, #28]
{
 8000d5a:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d5c:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d5e:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d60:	4329      	orrs	r1, r5
 8000d62:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d64:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d68:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d6a:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d6e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d70:	4321      	orrs	r1, r4
 8000d72:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d74:	6851      	ldr	r1, [r2, #4]
 8000d76:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d78:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d7a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000d7e:	4321      	orrs	r1, r4
 8000d80:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d82:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d84:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d86:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d8a:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d8c:	4321      	orrs	r1, r4
 8000d8e:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d90:	4962      	ldr	r1, [pc, #392]	; (8000f1c <UART_SetConfig+0x1c8>)
 8000d92:	428a      	cmp	r2, r1
 8000d94:	d116      	bne.n	8000dc4 <UART_SetConfig+0x70>
 8000d96:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8000d9a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000d9c:	f001 0103 	and.w	r1, r1, #3
 8000da0:	3901      	subs	r1, #1
 8000da2:	2902      	cmp	r1, #2
 8000da4:	f200 80b2 	bhi.w	8000f0c <UART_SetConfig+0x1b8>
 8000da8:	4c5d      	ldr	r4, [pc, #372]	; (8000f20 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dae:	5c61      	ldrb	r1, [r4, r1]
 8000db0:	d177      	bne.n	8000ea2 <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 8000db2:	2908      	cmp	r1, #8
 8000db4:	d872      	bhi.n	8000e9c <UART_SetConfig+0x148>
 8000db6:	e8df f001 	tbb	[pc, r1]
 8000dba:	acac      	.short	0xacac
 8000dbc:	71ac7124 	.word	0x71ac7124
 8000dc0:	7171      	.short	0x7171
 8000dc2:	a4          	.byte	0xa4
 8000dc3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000dc4:	4957      	ldr	r1, [pc, #348]	; (8000f24 <UART_SetConfig+0x1d0>)
 8000dc6:	428a      	cmp	r2, r1
 8000dc8:	d12c      	bne.n	8000e24 <UART_SetConfig+0xd0>
 8000dca:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8000dce:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000dd0:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8000dd4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000dd8:	f000 8090 	beq.w	8000efc <UART_SetConfig+0x1a8>
 8000ddc:	d80b      	bhi.n	8000df6 <UART_SetConfig+0xa2>
 8000dde:	2900      	cmp	r1, #0
 8000de0:	f000 8094 	beq.w	8000f0c <UART_SetConfig+0x1b8>
 8000de4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000de8:	f000 8090 	beq.w	8000f0c <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000df0:	d054      	beq.n	8000e9c <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000df2:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000df4:	e015      	b.n	8000e22 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000df6:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8000dfa:	d1f7      	bne.n	8000dec <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e00:	d166      	bne.n	8000ed0 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000e02:	6841      	ldr	r1, [r0, #4]
 8000e04:	084b      	lsrs	r3, r1, #1
 8000e06:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8000e0a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8000e12:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000e14:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8000e16:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000e1a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	60d3      	str	r3, [r2, #12]

}
 8000e22:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000e24:	4940      	ldr	r1, [pc, #256]	; (8000f28 <UART_SetConfig+0x1d4>)
 8000e26:	428a      	cmp	r2, r1
 8000e28:	d110      	bne.n	8000e4c <UART_SetConfig+0xf8>
 8000e2a:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8000e2e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000e30:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8000e34:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8000e38:	d060      	beq.n	8000efc <UART_SetConfig+0x1a8>
 8000e3a:	d804      	bhi.n	8000e46 <UART_SetConfig+0xf2>
 8000e3c:	2900      	cmp	r1, #0
 8000e3e:	d065      	beq.n	8000f0c <UART_SetConfig+0x1b8>
 8000e40:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8000e44:	e7d0      	b.n	8000de8 <UART_SetConfig+0x94>
 8000e46:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8000e4a:	e7d6      	b.n	8000dfa <UART_SetConfig+0xa6>
 8000e4c:	4937      	ldr	r1, [pc, #220]	; (8000f2c <UART_SetConfig+0x1d8>)
 8000e4e:	428a      	cmp	r2, r1
 8000e50:	d110      	bne.n	8000e74 <UART_SetConfig+0x120>
 8000e52:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8000e56:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000e58:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8000e5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000e60:	d04c      	beq.n	8000efc <UART_SetConfig+0x1a8>
 8000e62:	d804      	bhi.n	8000e6e <UART_SetConfig+0x11a>
 8000e64:	2900      	cmp	r1, #0
 8000e66:	d051      	beq.n	8000f0c <UART_SetConfig+0x1b8>
 8000e68:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000e6c:	e7bc      	b.n	8000de8 <UART_SetConfig+0x94>
 8000e6e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8000e72:	e7c2      	b.n	8000dfa <UART_SetConfig+0xa6>
 8000e74:	492e      	ldr	r1, [pc, #184]	; (8000f30 <UART_SetConfig+0x1dc>)
 8000e76:	428a      	cmp	r2, r1
 8000e78:	d1b8      	bne.n	8000dec <UART_SetConfig+0x98>
 8000e7a:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8000e7e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000e80:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8000e84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e88:	d038      	beq.n	8000efc <UART_SetConfig+0x1a8>
 8000e8a:	d804      	bhi.n	8000e96 <UART_SetConfig+0x142>
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d03d      	beq.n	8000f0c <UART_SetConfig+0x1b8>
 8000e90:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8000e94:	e7a8      	b.n	8000de8 <UART_SetConfig+0x94>
 8000e96:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8000e9a:	e7ae      	b.n	8000dfa <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 8000e9c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e7b9      	b.n	8000e16 <UART_SetConfig+0xc2>
    switch (clocksource)
 8000ea2:	2908      	cmp	r1, #8
 8000ea4:	d8a5      	bhi.n	8000df2 <UART_SetConfig+0x9e>
 8000ea6:	a301      	add	r3, pc, #4	; (adr r3, 8000eac <UART_SetConfig+0x158>)
 8000ea8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000eac:	08000ee9 	.word	0x08000ee9
 8000eb0:	08000ee9 	.word	0x08000ee9
 8000eb4:	08000ed1 	.word	0x08000ed1
 8000eb8:	08000df3 	.word	0x08000df3
 8000ebc:	08000ee9 	.word	0x08000ee9
 8000ec0:	08000df3 	.word	0x08000df3
 8000ec4:	08000df3 	.word	0x08000df3
 8000ec8:	08000df3 	.word	0x08000df3
 8000ecc:	08000ef3 	.word	0x08000ef3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000ed0:	6841      	ldr	r1, [r0, #4]
 8000ed2:	084b      	lsrs	r3, r1, #1
 8000ed4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000ed8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000edc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000ee4:	2000      	movs	r0, #0
        break;
 8000ee6:	e79c      	b.n	8000e22 <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000ee8:	6841      	ldr	r1, [r0, #4]
 8000eea:	084b      	lsrs	r3, r1, #1
 8000eec:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8000ef0:	e7f4      	b.n	8000edc <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000ef2:	6841      	ldr	r1, [r0, #4]
 8000ef4:	084b      	lsrs	r3, r1, #1
 8000ef6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000efa:	e7ef      	b.n	8000edc <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f00:	d1f7      	bne.n	8000ef2 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f02:	6841      	ldr	r1, [r0, #4]
 8000f04:	084b      	lsrs	r3, r1, #1
 8000f06:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f0a:	e780      	b.n	8000e0e <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f10:	d1ea      	bne.n	8000ee8 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f12:	6841      	ldr	r1, [r0, #4]
 8000f14:	084b      	lsrs	r3, r1, #1
 8000f16:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8000f1a:	e778      	b.n	8000e0e <UART_SetConfig+0xba>
 8000f1c:	40013800 	.word	0x40013800
 8000f20:	0800122c 	.word	0x0800122c
 8000f24:	40004400 	.word	0x40004400
 8000f28:	40004800 	.word	0x40004800
 8000f2c:	40004c00 	.word	0x40004c00
 8000f30:	40005000 	.word	0x40005000

08000f34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f36:	9f06      	ldr	r7, [sp, #24]
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4615      	mov	r5, r2
 8000f3c:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f3e:	6822      	ldr	r2, [r4, #0]
 8000f40:	69d3      	ldr	r3, [r2, #28]
 8000f42:	ea31 0303 	bics.w	r3, r1, r3
 8000f46:	bf0c      	ite	eq
 8000f48:	2301      	moveq	r3, #1
 8000f4a:	2300      	movne	r3, #0
 8000f4c:	42ab      	cmp	r3, r5
 8000f4e:	d001      	beq.n	8000f54 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000f50:	2000      	movs	r0, #0
 8000f52:	e014      	b.n	8000f7e <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8000f54:	1c7b      	adds	r3, r7, #1
 8000f56:	d0f3      	beq.n	8000f40 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f58:	b997      	cbnz	r7, 8000f80 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f62:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8000f72:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8000f76:	2300      	movs	r3, #0
 8000f78:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8000f7c:	2003      	movs	r0, #3
}
 8000f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f80:	f7ff fb02 	bl	8000588 <HAL_GetTick>
 8000f84:	1b80      	subs	r0, r0, r6
 8000f86:	42b8      	cmp	r0, r7
 8000f88:	d9d9      	bls.n	8000f3e <UART_WaitOnFlagUntilTimeout+0xa>
 8000f8a:	e7e6      	b.n	8000f5a <UART_WaitOnFlagUntilTimeout+0x26>

08000f8c <UART_CheckIdleState>:
{
 8000f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f8e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f90:	2100      	movs	r1, #0
 8000f92:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8000f94:	f7ff faf8 	bl	8000588 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8000f9e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000fa0:	d417      	bmi.n	8000fd2 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	075b      	lsls	r3, r3, #29
 8000fa8:	d50a      	bpl.n	8000fc0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000faa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	462b      	mov	r3, r5
 8000fb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f7ff ffbb 	bl	8000f34 <UART_WaitOnFlagUntilTimeout>
 8000fbe:	b9a0      	cbnz	r0, 8000fea <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8000fc0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8000fc2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8000fc4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8000fc8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8000fcc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8000fd0:	e00c      	b.n	8000fec <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000fd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	460a      	mov	r2, r1
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff ffa7 	bl	8000f34 <UART_WaitOnFlagUntilTimeout>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d0db      	beq.n	8000fa2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8000fea:	2003      	movs	r0, #3
}
 8000fec:	b003      	add	sp, #12
 8000fee:	bd30      	pop	{r4, r5, pc}

08000ff0 <HAL_UART_Init>:
{
 8000ff0:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	b328      	cbz	r0, 8001042 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000ff6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000ffa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ffe:	b90b      	cbnz	r3, 8001004 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8001000:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8001004:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001006:	2324      	movs	r3, #36	; 0x24
 8001008:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	f023 0301 	bic.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001014:	4620      	mov	r0, r4
 8001016:	f7ff fe9d 	bl	8000d54 <UART_SetConfig>
 800101a:	2801      	cmp	r0, #1
 800101c:	d011      	beq.n	8001042 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800102e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8001036:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001038:	601a      	str	r2, [r3, #0]
}
 800103a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 800103e:	f7ff bfa5 	b.w	8000f8c <UART_CheckIdleState>
}
 8001042:	2001      	movs	r0, #1
 8001044:	bd10      	pop	{r4, pc}

08001046 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001048:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800104a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800104e:	2b20      	cmp	r3, #32
{
 8001050:	460d      	mov	r5, r1
 8001052:	4604      	mov	r4, r0
 8001054:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001056:	d14a      	bne.n	80010ee <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8001058:	2d00      	cmp	r5, #0
 800105a:	d046      	beq.n	80010ea <HAL_UART_Transmit+0xa4>
 800105c:	2a00      	cmp	r2, #0
 800105e:	d044      	beq.n	80010ea <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001060:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001064:	2b01      	cmp	r3, #1
 8001066:	d042      	beq.n	80010ee <HAL_UART_Transmit+0xa8>
 8001068:	2301      	movs	r3, #1
 800106a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800106e:	2300      	movs	r3, #0
 8001070:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001072:	2321      	movs	r3, #33	; 0x21
 8001074:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001078:	f7ff fa86 	bl	8000588 <HAL_GetTick>
 800107c:	4607      	mov	r7, r0

    huart->TxXferSize = Size;
 800107e:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001082:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001086:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800108a:	b292      	uxth	r2, r2
 800108c:	b962      	cbnz	r2, 80010a8 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800108e:	9600      	str	r6, [sp, #0]
 8001090:	463b      	mov	r3, r7
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff ff4d 	bl	8000f34 <UART_WaitOnFlagUntilTimeout>
 800109a:	b998      	cbnz	r0, 80010c4 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800109c:	2320      	movs	r3, #32
 800109e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80010a2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80010a6:	e00e      	b.n	80010c6 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80010a8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010ac:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 80010ae:	3a01      	subs	r2, #1
 80010b0:	b292      	uxth	r2, r2
 80010b2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff ff39 	bl	8000f34 <UART_WaitOnFlagUntilTimeout>
 80010c2:	b110      	cbz	r0, 80010ca <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80010c4:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80010c6:	b003      	add	sp, #12
 80010c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010ca:	68a3      	ldr	r3, [r4, #8]
 80010cc:	6822      	ldr	r2, [r4, #0]
 80010ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010d2:	d107      	bne.n	80010e4 <HAL_UART_Transmit+0x9e>
 80010d4:	6923      	ldr	r3, [r4, #16]
 80010d6:	b92b      	cbnz	r3, 80010e4 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80010d8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80010dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80010e0:	8513      	strh	r3, [r2, #40]	; 0x28
 80010e2:	e7d0      	b.n	8001086 <HAL_UART_Transmit+0x40>
 80010e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80010e8:	e7fa      	b.n	80010e0 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 80010ea:	2001      	movs	r0, #1
 80010ec:	e7eb      	b.n	80010c6 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80010ee:	2002      	movs	r0, #2
 80010f0:	e7e9      	b.n	80010c6 <HAL_UART_Transmit+0x80>

080010f2 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80010f6:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80010f8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80010fc:	2b20      	cmp	r3, #32
{
 80010fe:	460d      	mov	r5, r1
 8001100:	4604      	mov	r4, r0
 8001102:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001104:	d15c      	bne.n	80011c0 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8001106:	2d00      	cmp	r5, #0
 8001108:	d058      	beq.n	80011bc <HAL_UART_Receive+0xca>
 800110a:	2a00      	cmp	r2, #0
 800110c:	d056      	beq.n	80011bc <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800110e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001112:	2b01      	cmp	r3, #1
 8001114:	d054      	beq.n	80011c0 <HAL_UART_Receive+0xce>
 8001116:	2301      	movs	r3, #1
 8001118:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 800111c:	6803      	ldr	r3, [r0, #0]
 800111e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001122:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001124:	2300      	movs	r3, #0
 8001126:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001128:	2322      	movs	r3, #34	; 0x22
 800112a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800112e:	f7ff fa2b 	bl	8000588 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001132:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8001134:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800113c:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800113e:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001142:	d115      	bne.n	8001170 <HAL_UART_Receive+0x7e>
 8001144:	6923      	ldr	r3, [r4, #16]
 8001146:	b98b      	cbnz	r3, 800116c <HAL_UART_Receive+0x7a>
 8001148:	f240 13ff 	movw	r3, #511	; 0x1ff
 800114c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001150:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001154:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001158:	b280      	uxth	r0, r0
 800115a:	b980      	cbnz	r0, 800117e <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800115c:	2320      	movs	r3, #32
 800115e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001162:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001166:	b002      	add	sp, #8
 8001168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 800116c:	23ff      	movs	r3, #255	; 0xff
 800116e:	e7ed      	b.n	800114c <HAL_UART_Receive+0x5a>
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1ed      	bne.n	8001150 <HAL_UART_Receive+0x5e>
 8001174:	6923      	ldr	r3, [r4, #16]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f8      	beq.n	800116c <HAL_UART_Receive+0x7a>
 800117a:	237f      	movs	r3, #127	; 0x7f
 800117c:	e7e6      	b.n	800114c <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 800117e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001182:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 8001184:	3a01      	subs	r2, #1
 8001186:	b292      	uxth	r2, r2
 8001188:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800118c:	4643      	mov	r3, r8
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	4620      	mov	r0, r4
 8001194:	f7ff fece 	bl	8000f34 <UART_WaitOnFlagUntilTimeout>
 8001198:	b9a0      	cbnz	r0, 80011c4 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800119a:	68a2      	ldr	r2, [r4, #8]
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011a2:	d106      	bne.n	80011b2 <HAL_UART_Receive+0xc0>
 80011a4:	6922      	ldr	r2, [r4, #16]
 80011a6:	b922      	cbnz	r2, 80011b2 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80011a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011aa:	403b      	ands	r3, r7
 80011ac:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80011b0:	e7d0      	b.n	8001154 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80011b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011b4:	403b      	ands	r3, r7
 80011b6:	f805 3b01 	strb.w	r3, [r5], #1
 80011ba:	e7cb      	b.n	8001154 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
 80011be:	e7d2      	b.n	8001166 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80011c0:	2002      	movs	r0, #2
 80011c2:	e7d0      	b.n	8001166 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80011c4:	2003      	movs	r0, #3
 80011c6:	e7ce      	b.n	8001166 <HAL_UART_Receive+0x74>

080011c8 <Reset_Handler>:
 80011c8:	2100      	movs	r1, #0
 80011ca:	e003      	b.n	80011d4 <LoopCopyDataInit>

080011cc <CopyDataInit>:
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <LoopForever+0x2>)
 80011ce:	585b      	ldr	r3, [r3, r1]
 80011d0:	5043      	str	r3, [r0, r1]
 80011d2:	3104      	adds	r1, #4

080011d4 <LoopCopyDataInit>:
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <LoopForever+0x6>)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LoopForever+0xa>)
 80011d8:	1842      	adds	r2, r0, r1
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3f6      	bcc.n	80011cc <CopyDataInit>
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopForever+0xe>)
 80011e0:	e002      	b.n	80011e8 <LoopFillZerobss>

080011e2 <FillZerobss>:
 80011e2:	2300      	movs	r3, #0
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	3204      	adds	r2, #4

080011e8 <LoopFillZerobss>:
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <LoopForever+0x12>)
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3f9      	bcc.n	80011e2 <FillZerobss>
 80011ee:	f3af 8000 	nop.w
 80011f2:	f7ff f80d 	bl	8000210 <__libc_init_array>
 80011f6:	f7ff f861 	bl	80002bc <main>

080011fa <LoopForever>:
 80011fa:	e7fe      	b.n	80011fa <LoopForever>
 80011fc:	08001354 	.word	0x08001354
 8001200:	20000000 	.word	0x20000000
 8001204:	20000000 	.word	0x20000000
 8001208:	20000000 	.word	0x20000000
 800120c:	20000094 	.word	0x20000094

08001210 <BusFault_Handler>:
 8001210:	e7fe      	b.n	8001210 <BusFault_Handler>
 8001212:	0000      	movs	r0, r0

08001214 <_init>:
 8001214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001216:	bf00      	nop
 8001218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800121a:	bc08      	pop	{r3}
 800121c:	469e      	mov	lr, r3
 800121e:	4770      	bx	lr

08001220 <_fini>:
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001222:	bf00      	nop
 8001224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001226:	bc08      	pop	{r3}
 8001228:	469e      	mov	lr, r3
 800122a:	4770      	bx	lr
